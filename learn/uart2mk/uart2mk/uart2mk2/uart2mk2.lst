
AVRASM ver. 2.1.17  D:\My Documents\Programming\Projects_CodeVision\learn\uart2mk\uart2mk\uart2mk2\uart2mk2.asm Fri Sep 19 16:53:46 2014

D:\My Documents\Programming\Projects_CodeVision\learn\uart2mk\uart2mk\uart2mk2\uart2mk2.asm(1026): warning: Register r4 already defined by the .DEF directive
D:\My Documents\Programming\Projects_CodeVision\learn\uart2mk\uart2mk\uart2mk2\uart2mk2.asm(1027): warning: Register r6 already defined by the .DEF directive
D:\My Documents\Programming\Projects_CodeVision\learn\uart2mk\uart2mk\uart2mk2\uart2mk2.asm(1028): warning: Register r9 already defined by the .DEF directive
D:\My Documents\Programming\Projects_CodeVision\learn\uart2mk\uart2mk\uart2mk2\uart2mk2.asm(1029): warning: Register r8 already defined by the .DEF directive
D:\My Documents\Programming\Projects_CodeVision\learn\uart2mk\uart2mk\uart2mk2\uart2mk2.asm(1030): warning: Register r11 already defined by the .DEF directive
D:\My Documents\Programming\Projects_CodeVision\learn\uart2mk\uart2mk\uart2mk2\uart2mk2.asm(1031): warning: Register r10 already defined by the .DEF directive
D:\My Documents\Programming\Projects_CodeVision\learn\uart2mk\uart2mk\uart2mk2\uart2mk2.asm(1032): warning: Register r13 already defined by the .DEF directive
D:\My Documents\Programming\Projects_CodeVision\learn\uart2mk\uart2mk\uart2mk2\uart2mk2.asm(1033): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.03.4 Standard
                 ;(C) Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : Yes
                 ;global const stored in FLASH  : No
                 ;8 bit enums            : Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _j=R6
                 	.DEF _lcd_can_clear=R9
                 	.DEF _status_usart=R8
                 	.DEF _rx_wr_index=R11
                 	.DEF _rx_rd_index=R10
                 	.DEF _rx_counter=R13
                 	.DEF __lcd_x=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 c028      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 c051      	RJMP _timer1_compa_isr
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b c05a      	RJMP _usart_rx_isr
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G101:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G101:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x16:
00001c 0000
00001d 0000
00001e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
00001f 6325
D:\My Documents\Programming\Projects_CodeVision\learn\uart2mk\uart2mk\uart2mk2\uart2mk2.asm(1068): warning: .cseg .db misalignment - padding zero byte
000020 0000      	.DB  0x25,0x63,0x0
                 _0x2000003:
000021 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000022 0006      	.DW  0x06
000023 0004      	.DW  0x04
000024 0038      	.DW  _0x16*2
                 
000025 0002      	.DW  0x02
000026 01b0      	.DW  __base_y_G100
000027 0042      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000028 0000      	.DW  0
                 
                 __RESET:
000029 94f8      	CLI
00002a 27ee      	CLR  R30
00002b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002c e0f1      	LDI  R31,1
00002d bffb      	OUT  GICR,R31
00002e bfeb      	OUT  GICR,R30
00002f bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000030 e1f8      	LDI  R31,0x18
000031 bdf1      	OUT  WDTCR,R31
000032 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000033 e08d      	LDI  R24,(14-2)+1
000034 e0a2      	LDI  R26,2
000035 27bb      	CLR  R27
                 __CLEAR_REG:
000036 93ed      	ST   X+,R30
000037 958a      	DEC  R24
000038 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000039 e080      	LDI  R24,LOW(0x400)
00003a e094      	LDI  R25,HIGH(0x400)
00003b e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
00003c 93ed      	ST   X+,R30
00003d 9701      	SBIW R24,1
00003e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003f e4e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000040 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000041 9185      	LPM  R24,Z+
000042 9195      	LPM  R25,Z+
000043 9700      	SBIW R24,0
000044 f061      	BREQ __GLOBAL_INI_END
000045 91a5      	LPM  R26,Z+
000046 91b5      	LPM  R27,Z+
000047 9005      	LPM  R0,Z+
000048 9015      	LPM  R1,Z+
000049 01bf      	MOVW R22,R30
00004a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004b 9005      	LPM  R0,Z+
00004c 920d      	ST   X+,R0
00004d 9701      	SBIW R24,1
00004e f7e1      	BRNE __GLOBAL_INI_LOOP
00004f 01fb      	MOVW R30,R22
000050 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
000051 e5ef      	LDI  R30,LOW(0x45F)
000052 bfed      	OUT  SPL,R30
000053 e0e4      	LDI  R30,HIGH(0x45F)
000054 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000055 e6c0      	LDI  R28,LOW(0x160)
000056 e0d1      	LDI  R29,HIGH(0x160)
                 
000057 c03c      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#asm
                    .equ __lcd_port=0x18 ;PORTB
                 ; 0000 0005 #endasm
                 ;#include <lcd.h>
                 ;
                 ;char lcd_buffer[32];
                 ;char uart_data[16];
                 ;int i=0,j=0;
                 ;unsigned char lcd_can_clear=0,status_usart;
                 ;
                 ;#define RXB8 1
                 ;#define TXB8 0
                 ;#define UPE 2
                 ;#define OVR 3
                 ;#define FE 4
                 ;#define UDRE 5
                 ;#define RXC 7
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<OVR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 32
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE<256
                 ;unsigned char rx_wr_index,rx_rd_index,rx_counter;
                 ;#else
                 ;unsigned int rx_wr_index,rx_rd_index,rx_counter;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 002A {
                 
                 	.CSEG
                 _timer1_compa_isr:
000058 93aa      	ST   -Y,R26
000059 93ea      	ST   -Y,R30
00005a b7ef      	IN   R30,SREG
00005b 93ea      	ST   -Y,R30
                 ; 0000 002B // Place your code here
                 ; 0000 002C PORTD^=0b00001000;
00005c b3e2      	IN   R30,0x12
00005d e0a8      	LDI  R26,LOW(8)
00005e 27ea      	EOR  R30,R26
00005f bbe2      	OUT  0x12,R30
                 ; 0000 002D //lcd_can_clear++;
                 ; 0000 002E 
                 ; 0000 002F TCCR1A=0x00;
000060 d2b0      	RCALL SUBOPT_0x0
                 ; 0000 0030 TCCR1B=0x05;
                 ; 0000 0031 TCNT1H=0x00;
                 ; 0000 0032 TCNT1L=0x00;
                 ; 0000 0033 ICR1H=0x00;
                 ; 0000 0034 ICR1L=0x00;
                 ; 0000 0035 OCR1AH=0x1E;
                 ; 0000 0036 OCR1AL=0x85;
                 ; 0000 0037 OCR1BH=0x00;
                 ; 0000 0038 OCR1BL=0x00;
                 ; 0000 0039 }
000061 91e9      	LD   R30,Y+
000062 bfef      	OUT  SREG,R30
000063 91e9      	LD   R30,Y+
000064 91a9      	LD   R26,Y+
000065 9518      	RETI
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 003B {
                 _usart_rx_isr:
000066 93ea      	ST   -Y,R30
000067 93fa      	ST   -Y,R31
000068 b7ef      	IN   R30,SREG
000069 93ea      	ST   -Y,R30
                 ; 0000 003C char status,data;
                 ; 0000 003D status=UCSRA;
00006a d314      	RCALL __SAVELOCR2
                 ;	status -> R17
                 ;	data -> R16
00006b b11b      	IN   R17,11
                 ; 0000 003E data=UDR;
00006c b10c      	IN   R16,12
                 ; 0000 003F if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00006d 2fe1      	MOV  R30,R17
00006e 71ec      	ANDI R30,LOW(0x1C)
00006f f489      	BRNE _0x3
                 ; 0000 0040    {
                 ; 0000 0041    rx_buffer[rx_wr_index]=data;
000070 2deb      	MOV  R30,R11
000071 e0f0      	LDI  R31,0
000072 57e0      	SUBI R30,LOW(-_rx_buffer)
000073 4ffe      	SBCI R31,HIGH(-_rx_buffer)
000074 8300      	ST   Z,R16
                 ; 0000 0042    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000075 94b3      	INC  R11
000076 e2e0      	LDI  R30,LOW(32)
000077 15eb      	CP   R30,R11
000078 f409      	BRNE _0x4
000079 24bb      	CLR  R11
                 ; 0000 0043    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
00007a 94d3      	INC  R13
00007b e2e0      	LDI  R30,LOW(32)
00007c 15ed      	CP   R30,R13
00007d f419      	BRNE _0x5
                 ; 0000 0044       {
                 ; 0000 0045       rx_counter=0;
00007e 24dd      	CLR  R13
                 ; 0000 0046       rx_buffer_overflow=1;
00007f 9468      	SET
000080 f820      	BLD  R2,0
                 ; 0000 0047       };
                 _0x5:
                 ; 0000 0048    };
                 _0x3:
                 ; 0000 0049   uart_data[i]=data;
000081 01f2      	MOVW R30,R4
000082 58e0      	SUBI R30,LOW(-_uart_data)
000083 4ffe      	SBCI R31,HIGH(-_uart_data)
000084 8300      	ST   Z,R16
                 ; 0000 004A   status_usart=UCSRA;
000085 b08b      	IN   R8,11
                 ; 0000 004B   i++;
000086 01f2      	MOVW R30,R4
000087 9631      	ADIW R30,1
000088 012f      	MOVW R4,R30
                 ; 0000 004C   if(UCSRA==48)
000089 b1eb      	IN   R30,0xB
00008a 33e0      	CPI  R30,LOW(0x30)
00008b f411      	BRNE _0x6
                 ; 0000 004D   {
                 ; 0000 004E   i=0;
00008c 2444      	CLR  R4
00008d 2455      	CLR  R5
                 ; 0000 004F   }
                 ; 0000 0050 
                 ; 0000 0051 
                 ; 0000 0052 }
                 _0x6:
00008e d2fa      	RCALL __LOADLOCR2P
00008f 91e9      	LD   R30,Y+
000090 bfef      	OUT  SREG,R30
000091 91f9      	LD   R31,Y+
000092 91e9      	LD   R30,Y+
000093 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0059 {
                 ; 0000 005A char data;
                 ; 0000 005B while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 005C data=rx_buffer[rx_rd_index];
                 ; 0000 005D if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 005E #asm("cli")
                 ; 0000 005F --rx_counter;
                 ; 0000 0060 #asm("sei")
                 ; 0000 0061 return data;
                 ; 0000 0062 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 006C {
                 _main:
                 ; 0000 006D 
                 ; 0000 006E 
                 ; 0000 006F // USART initialization
                 ; 0000 0070 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0071 // USART Receiver: On
                 ; 0000 0072 // USART Transmitter: Off
                 ; 0000 0073 // USART Mode: Asynchronous
                 ; 0000 0074 // USART Baud Rate: 1786
                 ; 0000 0075 UCSRA=0x00;
000094 e0e0      	LDI  R30,LOW(0)
000095 b9eb      	OUT  0xB,R30
                 ; 0000 0076 UCSRB=0x90;
000096 e9e0      	LDI  R30,LOW(144)
000097 b9ea      	OUT  0xA,R30
                 ; 0000 0077 UCSRC=0x86;
000098 e8e6      	LDI  R30,LOW(134)
000099 bde0      	OUT  0x20,R30
                 ; 0000 0078 UBRRH=0x01;
00009a e0e1      	LDI  R30,LOW(1)
00009b bde0      	OUT  0x20,R30
                 ; 0000 0079 UBRRL=0x17;
00009c e1e7      	LDI  R30,LOW(23)
00009d b9e9      	OUT  0x9,R30
                 ; 0000 007A 
                 ; 0000 007B DDRD=0b00001000;
00009e e0e8      	LDI  R30,LOW(8)
00009f bbe1      	OUT  0x11,R30
                 ; 0000 007C 
                 ; 0000 007D TCCR1A=0x00;
0000a0 d270      	RCALL SUBOPT_0x0
                 ; 0000 007E TCCR1B=0x05;
                 ; 0000 007F TCNT1H=0x00;
                 ; 0000 0080 TCNT1L=0x00;
                 ; 0000 0081 ICR1H=0x00;
                 ; 0000 0082 ICR1L=0x00;
                 ; 0000 0083 OCR1AH=0x1E;
                 ; 0000 0084 OCR1AL=0x85;
                 ; 0000 0085 OCR1BH=0x00;
                 ; 0000 0086 OCR1BL=0x00;
                 ; 0000 0087 
                 ; 0000 0088 TIMSK=0x10;
0000a1 e1e0      	LDI  R30,LOW(16)
0000a2 bfe9      	OUT  0x39,R30
                 ; 0000 0089 ACSR=0x80;
0000a3 e8e0      	LDI  R30,LOW(128)
0000a4 b9e8      	OUT  0x8,R30
                 ; 0000 008A SFIOR=0x00;
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 bfe0      	OUT  0x30,R30
                 ; 0000 008B // LCD module initialization
                 ; 0000 008C lcd_init(16);
0000a7 e1e0      	LDI  R30,LOW(16)
0000a8 93ea      	ST   -Y,R30
0000a9 d0c5      	RCALL _lcd_init
                 ; 0000 008D 
                 ; 0000 008E // Global enable interrupts
                 ; 0000 008F #asm("sei")
0000aa 9478      	sei
                 ; 0000 0090 
                 ; 0000 0091 while (1)
                 _0xB:
                 ; 0000 0092       {
                 ; 0000 0093       if (lcd_can_clear>3){
0000ab e0e3      	LDI  R30,LOW(3)
0000ac 15e9      	CP   R30,R9
0000ad f490      	BRSH _0xE
                 ; 0000 0094 
                 ; 0000 0095         j=0;
0000ae 2466      	CLR  R6
0000af 2477      	CLR  R7
                 ; 0000 0096             while(j<12){
                 _0xF:
0000b0 d271      	RCALL SUBOPT_0x1
0000b1 f43c      	BRGE _0x11
                 ; 0000 0097             uart_data[j]=0;
0000b2 d274      	RCALL SUBOPT_0x2
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 93ec      	ST   X,R30
                 ; 0000 0098             j++;
0000b5 01f3      	MOVW R30,R6
0000b6 9631      	ADIW R30,1
0000b7 013f      	MOVW R6,R30
                 ; 0000 0099             }
0000b8 cff7      	RJMP _0xF
                 _0x11:
                 ; 0000 009A         lcd_clear();
0000b9 d06a      	RCALL _lcd_clear
                 ; 0000 009B         lcd_can_clear=0;
0000ba 2499      	CLR  R9
                 ; 0000 009C         lcd_gotoxy(0,0);
0000bb d270      	RCALL SUBOPT_0x3
0000bc d26f      	RCALL SUBOPT_0x3
0000bd d057      	RCALL _lcd_gotoxy
                 ; 0000 009D             j=0;
0000be 2466      	CLR  R6
0000bf 2477      	CLR  R7
                 ; 0000 009E       }
                 ; 0000 009F       while(j<12)
                 _0xE:
                 _0x12:
0000c0 d261      	RCALL SUBOPT_0x1
0000c1 f4b4      	BRGE _0x14
                 ; 0000 00A0       {
                 ; 0000 00A1       lcd_gotoxy(j,0);
0000c2 926a      	ST   -Y,R6
0000c3 d268      	RCALL SUBOPT_0x3
0000c4 d050      	RCALL _lcd_gotoxy
                 ; 0000 00A2       sprintf(lcd_buffer,"%c",uart_data[j]);
0000c5 d269      	RCALL SUBOPT_0x4
                +
0000c6 e3ee     +LDI R30 , LOW ( 2 * _0x0 + 0 )
0000c7 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 0 )
                 	__POINTW1FN _0x0,0
0000c8 d26b      	RCALL SUBOPT_0x5
0000c9 d25d      	RCALL SUBOPT_0x2
0000ca 91ec      	LD   R30,X
0000cb 27ff      	CLR  R31
0000cc 2766      	CLR  R22
0000cd 2777      	CLR  R23
0000ce d2a7      	RCALL __PUTPARD1
0000cf e084      	LDI  R24,4
0000d0 d208      	RCALL _sprintf
0000d1 9628      	ADIW R28,8
                 ; 0000 00A3       //sprintf(lcd_buffer,"%d",status_usart);
                 ; 0000 00A4 
                 ; 0000 00A5       lcd_puts(lcd_buffer);
0000d2 d25c      	RCALL SUBOPT_0x4
0000d3 d07d      	RCALL _lcd_puts
                 ; 0000 00A6       j++;
0000d4 01f3      	MOVW R30,R6
0000d5 9631      	ADIW R30,1
0000d6 013f      	MOVW R6,R30
                 ; 0000 00A7       }
0000d7 cfe8      	RJMP _0x12
                 _0x14:
                 ; 0000 00A8       j=0;
0000d8 2466      	CLR  R6
0000d9 2477      	CLR  R7
                 ; 0000 00A9       //lcd_clear();
                 ; 0000 00AA       };
0000da cfd0      	RJMP _0xB
                 ; 0000 00AB }
                 _0x15:
0000db cfff      	RJMP _0x15
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
0000dc e0ff          ldi   r31,15
                 __lcd_delay0:
0000dd 95fa          dec   r31
0000de f7f1          brne  __lcd_delay0
0000df 9508      	RET
                 __lcd_ready:
0000e0 b3a7          in    r26,__lcd_direction
0000e1 70af          andi  r26,0xf                 ;set as input
0000e2 bba7          out   __lcd_direction,r26
0000e3 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
0000e4 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
0000e5 dff6      	RCALL __lcd_delay_G100
0000e6 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0000e7 dff4      	RCALL __lcd_delay_G100
0000e8 b3a6          in    r26,__lcd_pin
0000e9 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0000ea dff1      	RCALL __lcd_delay_G100
0000eb 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0000ec dfef      	RCALL __lcd_delay_G100
0000ed 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0000ee fda7          sbrc  r26,__lcd_busy_flag
0000ef cff5          rjmp  __lcd_busy
0000f0 9508      	RET
                 __lcd_write_nibble_G100:
0000f1 7fa0          andi  r26,0xf0
0000f2 2bab          or    r26,r27
0000f3 bba8          out   __lcd_port,r26          ;write
0000f4 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
0000f5 dfe6      	RCALL __lcd_delay_G100
0000f6 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0000f7 dfe4      	RCALL __lcd_delay_G100
0000f8 9508      	RET
                 __lcd_write_data:
0000f9 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0000fa b3a7          in    r26,__lcd_direction
0000fb 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0000fc bba7          out   __lcd_direction,r26
0000fd b3b8          in    r27,__lcd_port
0000fe 70bf          andi  r27,0xf
0000ff 81a8          ld    r26,y
000100 dff0      	RCALL __lcd_write_nibble_G100
000101 81a8          ld    r26,y
000102 95a2          swap  r26
000103 dfed      	RCALL __lcd_write_nibble_G100
000104 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000105 c099      	RJMP _0x2080002
                 __lcd_read_nibble_G100:
000106 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000107 dfd4      	RCALL __lcd_delay_G100
000108 b3e6          in    r30,__lcd_pin           ;read
000109 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
00010a dfd1      	RCALL __lcd_delay_G100
00010b 7fe0          andi  r30,0xf0
00010c 9508      	RET
                 _lcd_read_byte0_G100:
00010d dfce      	RCALL __lcd_delay_G100
00010e dff7      	RCALL __lcd_read_nibble_G100
00010f 2fae          mov   r26,r30
000110 dff5      	RCALL __lcd_read_nibble_G100
000111 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
000112 95e2          swap  r30
000113 2bea          or    r30,r26
000114 9508      	RET
                 _lcd_gotoxy:
000115 dfca      	RCALL __lcd_ready
000116 81e8      	LD   R30,Y
000117 e0f0      	LDI  R31,0
000118 55e0      	SUBI R30,LOW(-__base_y_G100)
000119 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00011a 81e0      	LD   R30,Z
00011b 81a9      	LDD  R26,Y+1
00011c 0fea      	ADD  R30,R26
00011d d219      	RCALL SUBOPT_0x6
00011e 80c9      	LDD  R12,Y+1
00011f 81e8      	LD   R30,Y
000120 93e0 01b4 	STS  __lcd_y,R30
000122 9622      	ADIW R28,2
000123 9508      	RET
                 _lcd_clear:
000124 dfbb      	RCALL __lcd_ready
000125 e0e2      	LDI  R30,LOW(2)
000126 d210      	RCALL SUBOPT_0x6
000127 dfb8      	RCALL __lcd_ready
000128 e0ec      	LDI  R30,LOW(12)
000129 d20d      	RCALL SUBOPT_0x6
00012a dfb5      	RCALL __lcd_ready
00012b e0e1      	LDI  R30,LOW(1)
00012c d20a      	RCALL SUBOPT_0x6
00012d e0e0      	LDI  R30,LOW(0)
00012e 93e0 01b4 	STS  __lcd_y,R30
000130 2ece      	MOV  R12,R30
000131 9508      	RET
                 _lcd_putchar:
000132 93ef          push r30
000133 93ff          push r31
000134 81a8          ld   r26,y
000135 9468          set
000136 30aa          cpi  r26,10
000137 f031          breq __lcd_putchar1
000138 94e8          clt
000139 94c3      	INC  R12
00013a 91e0 01b5 	LDS  R30,__lcd_maxx
00013c 15ec      	CP   R30,R12
00013d f458      	BRSH _0x2000004
                 	__lcd_putchar1:
00013e 91e0 01b4 	LDS  R30,__lcd_y
000140 5fef      	SUBI R30,-LOW(1)
000141 93e0 01b4 	STS  __lcd_y,R30
000143 d1e8      	RCALL SUBOPT_0x3
000144 91e0 01b4 	LDS  R30,__lcd_y
000146 93ea      	ST   -Y,R30
000147 dfcd      	RCALL _lcd_gotoxy
000148 f02e      	brts __lcd_putchar0
                 _0x2000004:
000149 df96          rcall __lcd_ready
00014a 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
00014b 81a8          ld   r26,y
00014c 93aa          st   -y,r26
00014d dfab          rcall __lcd_write_data
                 __lcd_putchar0:
00014e 91ff          pop  r31
00014f 91ef          pop  r30
000150 c04e      	RJMP _0x2080002
                 _lcd_puts:
000151 931a      	ST   -Y,R17
                 _0x2000005:
000152 81a9      	LDD  R26,Y+1
000153 81ba      	LDD  R27,Y+1+1
000154 91ed      	LD   R30,X+
000155 83a9      	STD  Y+1,R26
000156 83ba      	STD  Y+1+1,R27
000157 2f1e      	MOV  R17,R30
000158 30e0      	CPI  R30,0
000159 f019      	BREQ _0x2000007
00015a 931a      	ST   -Y,R17
00015b dfd6      	RCALL _lcd_putchar
00015c cff5      	RJMP _0x2000005
                 _0x2000007:
00015d 8118      	LDD  R17,Y+0
00015e 9623      	ADIW R28,3
00015f 9508      	RET
                 __long_delay_G100:
000160 27aa          clr   r26
000161 27bb          clr   r27
                 __long_delay0:
000162 9711          sbiw  r26,1         ;2 cycles
000163 f7f1          brne  __long_delay0 ;2 cycles
000164 9508      	RET
                 __lcd_init_write_G100:
000165 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000166 b3a7          in    r26,__lcd_direction
000167 6fa7          ori   r26,0xf7                ;set as output
000168 bba7          out   __lcd_direction,r26
000169 b3b8          in    r27,__lcd_port
00016a 70bf          andi  r27,0xf
00016b 81a8          ld    r26,y
00016c df84      	RCALL __lcd_write_nibble_G100
00016d 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
00016e c030      	RJMP _0x2080002
                 _lcd_init:
00016f 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000170 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
000171 81e8      	LD   R30,Y
000172 93e0 01b5 	STS  __lcd_maxx,R30
000174 58e0      	SUBI R30,-LOW(128)
                +
000175 93e0 01b2+STS __base_y_G100 + 2 , R30
                 	__PUTB1MN __base_y_G100,2
000177 81e8      	LD   R30,Y
000178 54e0      	SUBI R30,-LOW(192)
                +
000179 93e0 01b3+STS __base_y_G100 + 3 , R30
                 	__PUTB1MN __base_y_G100,3
00017b d1bd      	RCALL SUBOPT_0x7
00017c d1bc      	RCALL SUBOPT_0x7
00017d d1bb      	RCALL SUBOPT_0x7
00017e dfe1      	RCALL __long_delay_G100
00017f e2e0      	LDI  R30,LOW(32)
000180 93ea      	ST   -Y,R30
000181 dfe3      	RCALL __lcd_init_write_G100
000182 dfdd      	RCALL __long_delay_G100
000183 e2e8      	LDI  R30,LOW(40)
000184 d1b2      	RCALL SUBOPT_0x6
000185 dfda      	RCALL __long_delay_G100
000186 e0e4      	LDI  R30,LOW(4)
000187 d1af      	RCALL SUBOPT_0x6
000188 dfd7      	RCALL __long_delay_G100
000189 e8e5      	LDI  R30,LOW(133)
00018a d1ac      	RCALL SUBOPT_0x6
00018b dfd4      	RCALL __long_delay_G100
00018c b3a7          in    r26,__lcd_direction
00018d 70af          andi  r26,0xf                 ;set as input
00018e bba7          out   __lcd_direction,r26
00018f 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000190 df7c      	RCALL _lcd_read_byte0_G100
000191 30e5      	CPI  R30,LOW(0x5)
000192 f011      	BREQ _0x200000B
000193 e0e0      	LDI  R30,LOW(0)
000194 c00a      	RJMP _0x2080001
                 _0x200000B:
000195 df4a      	RCALL __lcd_ready
000196 e0e6      	LDI  R30,LOW(6)
000197 d19f      	RCALL SUBOPT_0x6
000198 df8b      	RCALL _lcd_clear
000199 e0e1      	LDI  R30,LOW(1)
00019a c004      	RJMP _0x2080001
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
00019b 9b5d           sbis usr,udre
00019c cffe           rjmp _putchar
00019d 81e8           ld   r30,y
00019e b9ec           out  udr,r30
                 _0x2080002:
                 _0x2080001:
00019f 9621      	ADIW R28,1
0001a0 9508      	RET
                 __put_G101:
0001a1 d1dd      	RCALL __SAVELOCR2
0001a2 81ac      	LDD  R26,Y+4
0001a3 81bd      	LDD  R27,Y+4+1
0001a4 d1c9      	RCALL __GETW1P
0001a5 9730      	SBIW R30,0
0001a6 f0d1      	BREQ _0x2020010
0001a7 81aa      	LDD  R26,Y+2
0001a8 81bb      	LDD  R27,Y+2+1
0001a9 d1c4      	RCALL __GETW1P
0001aa 018f      	MOVW R16,R30
0001ab 9730      	SBIW R30,0
0001ac f049      	BREQ _0x2020012
                +
0001ad 3002     +CPI R16 , LOW ( 2 )
0001ae e0e0     +LDI R30 , HIGH ( 2 )
0001af 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001b0 f078      	BRLO _0x2020013
0001b1 01f8      	MOVW R30,R16
0001b2 9731      	SBIW R30,1
0001b3 018f      	MOVW R16,R30
0001b4 93ed      	ST   X+,R30
0001b5 93fc      	ST   X,R31
                 _0x2020012:
0001b6 81ac      	LDD  R26,Y+4
0001b7 81bd      	LDD  R27,Y+4+1
0001b8 91ed      	LD   R30,X+
0001b9 91fd      	LD   R31,X+
0001ba 9631      	ADIW R30,1
0001bb 93fe      	ST   -X,R31
0001bc 93ee      	ST   -X,R30
0001bd 9731      	SBIW R30,1
0001be 81ae      	LDD  R26,Y+6
0001bf 83a0      	STD  Z+0,R26
                 _0x2020013:
0001c0 c003      	RJMP _0x2020014
                 _0x2020010:
0001c1 81ee      	LDD  R30,Y+6
0001c2 93ea      	ST   -Y,R30
0001c3 dfd7      	RCALL _putchar
                 _0x2020014:
0001c4 d1c1      	RCALL __LOADLOCR2
0001c5 9627      	ADIW R28,7
0001c6 9508      	RET
                 __print_G101:
0001c7 9726      	SBIW R28,6
0001c8 d1b2      	RCALL __SAVELOCR6
0001c9 e010      	LDI  R17,0
                 _0x2020015:
0001ca 89ea      	LDD  R30,Y+18
0001cb 89fb      	LDD  R31,Y+18+1
0001cc 9631      	ADIW R30,1
0001cd 8bea      	STD  Y+18,R30
0001ce 8bfb      	STD  Y+18+1,R31
0001cf 9731      	SBIW R30,1
0001d0 91e4      	LPM  R30,Z
0001d1 2f2e      	MOV  R18,R30
0001d2 30e0      	CPI  R30,0
0001d3 f409      	BRNE PC+2
0001d4 c101      	RJMP _0x2020017
0001d5 2fe1      	MOV  R30,R17
0001d6 30e0      	CPI  R30,0
0001d7 f431      	BRNE _0x202001B
0001d8 3225      	CPI  R18,37
0001d9 f411      	BRNE _0x202001C
0001da e011      	LDI  R17,LOW(1)
0001db c001      	RJMP _0x202001D
                 _0x202001C:
0001dc d160      	RCALL SUBOPT_0x8
                 _0x202001D:
0001dd c0f7      	RJMP _0x202001A
                 _0x202001B:
0001de 30e1      	CPI  R30,LOW(0x1)
0001df f4a1      	BRNE _0x202001E
0001e0 3225      	CPI  R18,37
0001e1 f411      	BRNE _0x202001F
0001e2 d15a      	RCALL SUBOPT_0x8
0001e3 c0f0      	RJMP _0x20200BC
                 _0x202001F:
0001e4 e012      	LDI  R17,LOW(2)
0001e5 e040      	LDI  R20,LOW(0)
0001e6 e000      	LDI  R16,LOW(0)
0001e7 322d      	CPI  R18,45
0001e8 f411      	BRNE _0x2020020
0001e9 e001      	LDI  R16,LOW(1)
0001ea c0ea      	RJMP _0x202001A
                 _0x2020020:
0001eb 322b      	CPI  R18,43
0001ec f411      	BRNE _0x2020021
0001ed e24b      	LDI  R20,LOW(43)
0001ee c0e6      	RJMP _0x202001A
                 _0x2020021:
0001ef 3220      	CPI  R18,32
0001f0 f411      	BRNE _0x2020022
0001f1 e240      	LDI  R20,LOW(32)
0001f2 c0e2      	RJMP _0x202001A
                 _0x2020022:
0001f3 c002      	RJMP _0x2020023
                 _0x202001E:
0001f4 30e2      	CPI  R30,LOW(0x2)
0001f5 f439      	BRNE _0x2020024
                 _0x2020023:
0001f6 e050      	LDI  R21,LOW(0)
0001f7 e013      	LDI  R17,LOW(3)
0001f8 3320      	CPI  R18,48
0001f9 f411      	BRNE _0x2020025
0001fa 6800      	ORI  R16,LOW(128)
0001fb c0d9      	RJMP _0x202001A
                 _0x2020025:
0001fc c003      	RJMP _0x2020026
                 _0x2020024:
0001fd 30e3      	CPI  R30,LOW(0x3)
0001fe f009      	BREQ PC+2
0001ff c0d5      	RJMP _0x202001A
                 _0x2020026:
000200 3320      	CPI  R18,48
000201 f010      	BRLO _0x2020029
000202 332a      	CPI  R18,58
000203 f008      	BRLO _0x202002A
                 _0x2020029:
000204 c009      	RJMP _0x2020028
                 _0x202002A:
000205 2fa5      	MOV  R26,R21
000206 e0ea      	LDI  R30,LOW(10)
000207 9fea      	MUL  R30,R26
000208 01f0      	MOVW R30,R0
000209 2f5e      	MOV  R21,R30
00020a 2fe2      	MOV  R30,R18
00020b 53e0      	SUBI R30,LOW(48)
00020c 0f5e      	ADD  R21,R30
00020d c0c7      	RJMP _0x202001A
                 _0x2020028:
00020e 2fe2      	MOV  R30,R18
00020f 36e3      	CPI  R30,LOW(0x63)
000210 f439      	BRNE _0x202002E
000211 d133      	RCALL SUBOPT_0x9
000212 d135      	RCALL SUBOPT_0xA
000213 d131      	RCALL SUBOPT_0x9
000214 81a4      	LDD  R26,Z+4
000215 93aa      	ST   -Y,R26
000216 d135      	RCALL SUBOPT_0xB
000217 c0bc      	RJMP _0x202002F
                 _0x202002E:
000218 37e3      	CPI  R30,LOW(0x73)
000219 f429      	BRNE _0x2020031
00021a d138      	RCALL SUBOPT_0xC
00021b d139      	RCALL SUBOPT_0xD
00021c d0df      	RCALL _strlen
00021d 2f1e      	MOV  R17,R30
00021e c007      	RJMP _0x2020032
                 _0x2020031:
00021f 37e0      	CPI  R30,LOW(0x70)
000220 f449      	BRNE _0x2020034
000221 d131      	RCALL SUBOPT_0xC
000222 d132      	RCALL SUBOPT_0xD
000223 d0e2      	RCALL _strlenf
000224 2f1e      	MOV  R17,R30
000225 6008      	ORI  R16,LOW(8)
                 _0x2020032:
000226 6002      	ORI  R16,LOW(2)
000227 770f      	ANDI R16,LOW(127)
000228 e030      	LDI  R19,LOW(0)
000229 c02d      	RJMP _0x2020035
                 _0x2020034:
00022a 36e4      	CPI  R30,LOW(0x64)
00022b f011      	BREQ _0x2020038
00022c 36e9      	CPI  R30,LOW(0x69)
00022d f411      	BRNE _0x2020039
                 _0x2020038:
00022e 6004      	ORI  R16,LOW(4)
00022f c002      	RJMP _0x202003A
                 _0x2020039:
000230 37e5      	CPI  R30,LOW(0x75)
000231 f429      	BRNE _0x202003B
                 _0x202003A:
000232 e2e6      	LDI  R30,LOW(_tbl10_G101*2)
000233 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000234 d127      	RCALL SUBOPT_0xE
000235 e015      	LDI  R17,LOW(5)
000236 c00b      	RJMP _0x202003C
                 _0x202003B:
000237 35e8      	CPI  R30,LOW(0x58)
000238 f411      	BRNE _0x202003E
000239 6008      	ORI  R16,LOW(8)
00023a c003      	RJMP _0x202003F
                 _0x202003E:
00023b 37e8      	CPI  R30,LOW(0x78)
00023c f009      	BREQ PC+2
00023d c096      	RJMP _0x2020070
                 _0x202003F:
00023e e3e0      	LDI  R30,LOW(_tbl16_G101*2)
00023f e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000240 d11b      	RCALL SUBOPT_0xE
000241 e014      	LDI  R17,LOW(4)
                 _0x202003C:
000242 ff02      	SBRS R16,2
000243 c011      	RJMP _0x2020041
000244 d10e      	RCALL SUBOPT_0xC
000245 d119      	RCALL SUBOPT_0xF
000246 85ab      	LDD  R26,Y+11
000247 23aa      	TST  R26
000248 f432      	BRPL _0x2020042
000249 85ea      	LDD  R30,Y+10
00024a 85fb      	LDD  R31,Y+10+1
00024b d11e      	RCALL __ANEGW1
00024c 87ea      	STD  Y+10,R30
00024d 87fb      	STD  Y+10+1,R31
00024e e24d      	LDI  R20,LOW(45)
                 _0x2020042:
00024f 3040      	CPI  R20,0
000250 f011      	BREQ _0x2020043
000251 5f1f      	SUBI R17,-LOW(1)
000252 c001      	RJMP _0x2020044
                 _0x2020043:
000253 7f0b      	ANDI R16,LOW(251)
                 _0x2020044:
000254 c002      	RJMP _0x2020045
                 _0x2020041:
000255 d0fd      	RCALL SUBOPT_0xC
000256 d108      	RCALL SUBOPT_0xF
                 _0x2020045:
                 _0x2020035:
000257 fd00      	SBRC R16,0
000258 c010      	RJMP _0x2020046
                 _0x2020047:
000259 1715      	CP   R17,R21
00025a f470      	BRSH _0x2020049
00025b ff07      	SBRS R16,7
00025c c008      	RJMP _0x202004A
00025d ff02      	SBRS R16,2
00025e c004      	RJMP _0x202004B
00025f 7f0b      	ANDI R16,LOW(251)
000260 2f24      	MOV  R18,R20
000261 5011      	SUBI R17,LOW(1)
000262 c001      	RJMP _0x202004C
                 _0x202004B:
000263 e320      	LDI  R18,LOW(48)
                 _0x202004C:
000264 c001      	RJMP _0x202004D
                 _0x202004A:
000265 e220      	LDI  R18,LOW(32)
                 _0x202004D:
000266 d0d6      	RCALL SUBOPT_0x8
000267 5051      	SUBI R21,LOW(1)
000268 cff0      	RJMP _0x2020047
                 _0x2020049:
                 _0x2020046:
000269 2f31      	MOV  R19,R17
00026a ff01      	SBRS R16,1
00026b c018      	RJMP _0x202004E
                 _0x202004F:
00026c 3030      	CPI  R19,0
00026d f0a9      	BREQ _0x2020051
00026e ff03      	SBRS R16,3
00026f c007      	RJMP _0x2020052
000270 81ee      	LDD  R30,Y+6
000271 81ff      	LDD  R31,Y+6+1
000272 9631      	ADIW R30,1
000273 d0e8      	RCALL SUBOPT_0xE
000274 9731      	SBIW R30,1
000275 91e4      	LPM  R30,Z
000276 c005      	RJMP _0x20200BD
                 _0x2020052:
000277 81ae      	LDD  R26,Y+6
000278 81bf      	LDD  R27,Y+6+1
000279 91ed      	LD   R30,X+
00027a 83ae      	STD  Y+6,R26
00027b 83bf      	STD  Y+6+1,R27
                 _0x20200BD:
00027c 93ea      	ST   -Y,R30
00027d d0ce      	RCALL SUBOPT_0xB
00027e 3050      	CPI  R21,0
00027f f009      	BREQ _0x2020054
000280 5051      	SUBI R21,LOW(1)
                 _0x2020054:
000281 5031      	SUBI R19,LOW(1)
000282 cfe9      	RJMP _0x202004F
                 _0x2020051:
000283 c047      	RJMP _0x2020055
                 _0x202004E:
                 _0x2020057:
000284 e320      	LDI  R18,LOW(48)
000285 81ee      	LDD  R30,Y+6
000286 81ff      	LDD  R31,Y+6+1
000287 d0ea      	RCALL __GETW1PF
000288 87e8      	STD  Y+8,R30
000289 87f9      	STD  Y+8+1,R31
00028a 81ee      	LDD  R30,Y+6
00028b 81ff      	LDD  R31,Y+6+1
00028c 9632      	ADIW R30,2
00028d d0ce      	RCALL SUBOPT_0xE
                 _0x2020059:
00028e 85e8      	LDD  R30,Y+8
00028f 85f9      	LDD  R31,Y+8+1
000290 85aa      	LDD  R26,Y+10
000291 85bb      	LDD  R27,Y+10+1
000292 17ae      	CP   R26,R30
000293 07bf      	CPC  R27,R31
000294 f050      	BRLO _0x202005B
000295 5f2f      	SUBI R18,-LOW(1)
000296 85a8      	LDD  R26,Y+8
000297 85b9      	LDD  R27,Y+8+1
000298 85ea      	LDD  R30,Y+10
000299 85fb      	LDD  R31,Y+10+1
00029a 1bea      	SUB  R30,R26
00029b 0bfb      	SBC  R31,R27
00029c 87ea      	STD  Y+10,R30
00029d 87fb      	STD  Y+10+1,R31
00029e cfef      	RJMP _0x2020059
                 _0x202005B:
00029f 332a      	CPI  R18,58
0002a0 f028      	BRLO _0x202005C
0002a1 ff03      	SBRS R16,3
0002a2 c002      	RJMP _0x202005D
0002a3 5f29      	SUBI R18,-LOW(7)
0002a4 c001      	RJMP _0x202005E
                 _0x202005D:
0002a5 5d29      	SUBI R18,-LOW(39)
                 _0x202005E:
                 _0x202005C:
0002a6 fd04      	SBRC R16,4
0002a7 c019      	RJMP _0x2020060
0002a8 3321      	CPI  R18,49
0002a9 f420      	BRSH _0x2020062
0002aa 85a8      	LDD  R26,Y+8
0002ab 85b9      	LDD  R27,Y+8+1
0002ac 9711      	SBIW R26,1
0002ad f409      	BRNE _0x2020061
                 _0x2020062:
0002ae c009      	RJMP _0x20200BE
                 _0x2020061:
0002af 1753      	CP   R21,R19
0002b0 f010      	BRLO _0x2020066
0002b1 ff00      	SBRS R16,0
0002b2 c001      	RJMP _0x2020067
                 _0x2020066:
0002b3 c011      	RJMP _0x2020065
                 _0x2020067:
0002b4 e220      	LDI  R18,LOW(32)
0002b5 ff07      	SBRS R16,7
0002b6 c00a      	RJMP _0x2020068
0002b7 e320      	LDI  R18,LOW(48)
                 _0x20200BE:
0002b8 6100      	ORI  R16,LOW(16)
0002b9 ff02      	SBRS R16,2
0002ba c006      	RJMP _0x2020069
0002bb 7f0b      	ANDI R16,LOW(251)
0002bc 934a      	ST   -Y,R20
0002bd d08e      	RCALL SUBOPT_0xB
0002be 3050      	CPI  R21,0
0002bf f009      	BREQ _0x202006A
0002c0 5051      	SUBI R21,LOW(1)
                 _0x202006A:
                 _0x2020069:
                 _0x2020068:
                 _0x2020060:
0002c1 d07b      	RCALL SUBOPT_0x8
0002c2 3050      	CPI  R21,0
0002c3 f009      	BREQ _0x202006B
0002c4 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x2020065:
0002c5 5031      	SUBI R19,LOW(1)
0002c6 85a8      	LDD  R26,Y+8
0002c7 85b9      	LDD  R27,Y+8+1
0002c8 9712      	SBIW R26,2
0002c9 f008      	BRLO _0x2020058
0002ca cfb9      	RJMP _0x2020057
                 _0x2020058:
                 _0x2020055:
0002cb ff00      	SBRS R16,0
0002cc c007      	RJMP _0x202006C
                 _0x202006D:
0002cd 3050      	CPI  R21,0
0002ce f029      	BREQ _0x202006F
0002cf 5051      	SUBI R21,LOW(1)
0002d0 e2e0      	LDI  R30,LOW(32)
0002d1 93ea      	ST   -Y,R30
0002d2 d079      	RCALL SUBOPT_0xB
0002d3 cff9      	RJMP _0x202006D
                 _0x202006F:
                 _0x202006C:
                 _0x2020070:
                 _0x202002F:
                 _0x20200BC:
0002d4 e010      	LDI  R17,LOW(0)
                 _0x202001A:
0002d5 cef4      	RJMP _0x2020015
                 _0x2020017:
0002d6 d0ab      	RCALL __LOADLOCR6
0002d7 9664      	ADIW R28,20
0002d8 9508      	RET
                 _sprintf:
0002d9 92ff      	PUSH R15
0002da 2ef8      	MOV  R15,R24
0002db 9722      	SBIW R28,2
0002dc d0a2      	RCALL __SAVELOCR2
0002dd 01de      	MOVW R26,R28
0002de d087      	RCALL __ADDW2R15
0002df 018d      	MOVW R16,R26
0002e0 01de      	MOVW R26,R28
0002e1 9616      	ADIW R26,6
0002e2 d083      	RCALL __ADDW2R15
0002e3 d08a      	RCALL __GETW1P
0002e4 83ea      	STD  Y+2,R30
0002e5 83fb      	STD  Y+2+1,R31
0002e6 01de      	MOVW R26,R28
0002e7 9614      	ADIW R26,4
0002e8 d07d      	RCALL __ADDW2R15
0002e9 d084      	RCALL __GETW1P
0002ea d049      	RCALL SUBOPT_0x5
0002eb 931a      	ST   -Y,R17
0002ec 930a      	ST   -Y,R16
0002ed 01fe      	MOVW R30,R28
0002ee 9636      	ADIW R30,6
0002ef d044      	RCALL SUBOPT_0x5
0002f0 e0e0      	LDI  R30,LOW(0)
0002f1 e0f0      	LDI  R31,HIGH(0)
0002f2 d041      	RCALL SUBOPT_0x5
0002f3 ded3      	RCALL __print_G101
0002f4 81aa      	LDD  R26,Y+2
0002f5 81bb      	LDD  R27,Y+2+1
0002f6 e0e0      	LDI  R30,LOW(0)
0002f7 93ec      	ST   X,R30
0002f8 d08d      	RCALL __LOADLOCR2
0002f9 9624      	ADIW R28,4
0002fa 90ff      	POP  R15
0002fb 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
0002fc 91a9          ld   r26,y+
0002fd 91b9          ld   r27,y+
0002fe 27ee          clr  r30
0002ff 27ff          clr  r31
                 strlen0:
000300 916d          ld   r22,x+
000301 2366          tst  r22
000302 f011          breq strlen1
000303 9631          adiw r30,1
000304 cffb          rjmp strlen0
                 strlen1:
000305 9508          ret
                 _strlenf:
000306 27aa          clr  r26
000307 27bb          clr  r27
000308 91e9          ld   r30,y+
000309 91f9          ld   r31,y+
                 strlenf0:
00030a 9005          lpm  r0,z+
00030b 2000          tst  r0
00030c f011          breq strlenf1
00030d 9611          adiw r26,1
00030e cffb          rjmp strlenf0
                 strlenf1:
00030f 01fd          movw r30,r26
000310 9508          ret
                 
                 	.DSEG
                 _lcd_buffer:
000160           	.BYTE 0x20
                 _uart_data:
000180           	.BYTE 0x10
                 _rx_buffer:
000190           	.BYTE 0x20
                 __base_y_G100:
0001b0           	.BYTE 0x4
                 __lcd_y:
0001b4           	.BYTE 0x1
                 __lcd_maxx:
0001b5           	.BYTE 0x1
                 _p_S1030024:
0001b6           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x0:
000311 e0e0      	LDI  R30,LOW(0)
000312 bdef      	OUT  0x2F,R30
000313 e0e5      	LDI  R30,LOW(5)
000314 bdee      	OUT  0x2E,R30
000315 e0e0      	LDI  R30,LOW(0)
000316 bded      	OUT  0x2D,R30
000317 bdec      	OUT  0x2C,R30
000318 bde7      	OUT  0x27,R30
000319 bde6      	OUT  0x26,R30
00031a e1ee      	LDI  R30,LOW(30)
00031b bdeb      	OUT  0x2B,R30
00031c e8e5      	LDI  R30,LOW(133)
00031d bdea      	OUT  0x2A,R30
00031e e0e0      	LDI  R30,LOW(0)
00031f bde9      	OUT  0x29,R30
000320 bde8      	OUT  0x28,R30
000321 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000322 e0ec      	LDI  R30,LOW(12)
000323 e0f0      	LDI  R31,HIGH(12)
000324 166e      	CP   R6,R30
000325 067f      	CPC  R7,R31
000326 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000327 e8a0      	LDI  R26,LOW(_uart_data)
000328 e0b1      	LDI  R27,HIGH(_uart_data)
000329 0da6      	ADD  R26,R6
00032a 1db7      	ADC  R27,R7
00032b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00032c e0e0      	LDI  R30,LOW(0)
00032d 93ea      	ST   -Y,R30
00032e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00032f e6e0      	LDI  R30,LOW(_lcd_buffer)
000330 e0f1      	LDI  R31,HIGH(_lcd_buffer)
000331 93fa      	ST   -Y,R31
000332 93ea      	ST   -Y,R30
000333 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x5:
000334 93fa      	ST   -Y,R31
000335 93ea      	ST   -Y,R30
000336 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
000337 93ea      	ST   -Y,R30
000338 cdc0      	RJMP __lcd_write_data
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
000339 de26      	RCALL __long_delay_G100
00033a e3e0      	LDI  R30,LOW(48)
00033b 93ea      	ST   -Y,R30
00033c ce28      	RJMP __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x8:
00033d 932a      	ST   -Y,R18
00033e 85ef      	LDD  R30,Y+15
00033f 89f8      	LDD  R31,Y+15+1
000340 dff3      	RCALL SUBOPT_0x5
000341 01fe      	MOVW R30,R28
000342 963f      	ADIW R30,15
000343 dff0      	RCALL SUBOPT_0x5
000344 ce5c      	RJMP __put_G101
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000345 89e8      	LDD  R30,Y+16
000346 89f9      	LDD  R31,Y+16+1
000347 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xA:
000348 9734      	SBIW R30,4
000349 8be8      	STD  Y+16,R30
00034a 8bf9      	STD  Y+16+1,R31
00034b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0xB:
00034c 85ef      	LDD  R30,Y+15
00034d 89f8      	LDD  R31,Y+15+1
00034e dfe5      	RCALL SUBOPT_0x5
00034f 01fe      	MOVW R30,R28
000350 963f      	ADIW R30,15
000351 dfe2      	RCALL SUBOPT_0x5
000352 ce4e      	RJMP __put_G101
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000353 dff1      	RCALL SUBOPT_0x9
000354 cff3      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xD:
000355 89a8      	LDD  R26,Y+16
000356 89b9      	LDD  R27,Y+16+1
000357 9614      	ADIW R26,4
000358 d015      	RCALL __GETW1P
000359 83ee      	STD  Y+6,R30
00035a 83ff      	STD  Y+6+1,R31
00035b cfd8      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
00035c 83ee      	STD  Y+6,R30
00035d 83ff      	STD  Y+6+1,R31
00035e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
00035f 89a8      	LDD  R26,Y+16
000360 89b9      	LDD  R27,Y+16+1
000361 9614      	ADIW R26,4
000362 d00b      	RCALL __GETW1P
000363 87ea      	STD  Y+10,R30
000364 87fb      	STD  Y+10+1,R31
000365 9508      	RET
                 
                 
                 	.CSEG
                 __ADDW2R15:
000366 2400      	CLR  R0
000367 0daf      	ADD  R26,R15
000368 1db0      	ADC  R27,R0
000369 9508      	RET
                 
                 __ANEGW1:
00036a 95f1      	NEG  R31
00036b 95e1      	NEG  R30
00036c 40f0      	SBCI R31,0
00036d 9508      	RET
                 
                 __GETW1P:
00036e 91ed      	LD   R30,X+
00036f 91fc      	LD   R31,X
000370 9711      	SBIW R26,1
000371 9508      	RET
                 
                 __GETW1PF:
000372 9005      	LPM  R0,Z+
000373 91f4      	LPM  R31,Z
000374 2de0      	MOV  R30,R0
000375 9508      	RET
                 
                 __PUTPARD1:
000376 937a      	ST   -Y,R23
000377 936a      	ST   -Y,R22
000378 93fa      	ST   -Y,R31
000379 93ea      	ST   -Y,R30
00037a 9508      	RET
                 
                 __SAVELOCR6:
00037b 935a      	ST   -Y,R21
                 __SAVELOCR5:
00037c 934a      	ST   -Y,R20
                 __SAVELOCR4:
00037d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00037e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00037f 931a      	ST   -Y,R17
000380 930a      	ST   -Y,R16
000381 9508      	RET
                 
                 __LOADLOCR6:
000382 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000383 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000384 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000385 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000386 8119      	LDD  R17,Y+1
000387 8108      	LD   R16,Y
000388 9508      	RET
                 
                 __LOADLOCR2P:
000389 9109      	LD   R16,Y+
00038a 9119      	LD   R17,Y+
00038b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  11 r1 :   1 r2 :   1 r3 :   0 r4 :   4 r5 :   1 r6 :  10 r7 :   5 
r8 :   1 r9 :   2 r10:   0 r11:   4 r12:   4 r13:   3 r14:   0 r15:   4 
r16:  36 r17:  25 r18:  25 r19:   8 r20:   9 r21:  17 r22:   6 r23:   2 
r24:   9 r25:   2 r26:  80 r27:  29 r28:  16 r29:   1 r30: 242 r31:  57 
x  :  17 y  : 138 z  :  17 
Registers used: 32 out of 35 (91.4%)

ATmega8 instruction use summary:
adc   :   2 add   :   4 adiw  :  23 and   :   0 andi  :  11 asr   :   0 
bclr  :   0 bld   :   1 brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 
break :   0 breq  :  17 brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   7 brlt  :   0 brmi  :   0 brne  :  26 brpl  :   1 
brsh  :   4 brtc  :   0 brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 
cln   :   0 clr   :  23 cls   :   0 clt   :   1 clv   :   0 clz   :   0 
com   :   0 cp    :   8 cpc   :   3 cpi   :  34 cpse  :   0 dec   :   2 
des   :   0 eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :  15 inc   :   3 ld    :  32 ldd   :  56 ldi   :  89 
lds   :   3 lpm   :  15 lsl   :   0 lsr   :   0 mov   :  17 movw  :  22 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   8 out   :  36 pop   :   3 push  :   3 rcall : 117 ret   :  33 
reti  :   2 rjmp  :  89 rol   :   0 ror   :   0 sbc   :   1 sbci  :   4 
sbi   :   9 sbic  :   0 sbis  :   1 sbiw  :  16 sbr   :   0 sbrc  :   3 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  49 std   :  23 sts   :   6 sub   :   1 subi  :  19 swap  :   2 
tst   :   3 wdr   :   0 
Instructions used: 57 out of 110 (51.8%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000718   1772     44   1816    8192  22.2%
[.dseg] 0x000060 0x0001b8      0     88     88    1024   8.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings
