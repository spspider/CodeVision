;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x18 ;PORTB
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0005 #endasm
;#include <lcd.h>
;
;char lcd_buffer[32];
;char uart_data[16];
;int i=0,j=0;
;unsigned char lcd_can_clear=0,status_usart;
;
;#define RXB8 1
;#define TXB8 0
;#define UPE 2
;#define OVR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<OVR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 32
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 002A {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002B // Place your code here
; 0000 002C PORTD^=0b00001000;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002D //lcd_can_clear++;
; 0000 002E 
; 0000 002F TCCR1A=0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0030 TCCR1B=0x05;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0031 TCNT1H=0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0032 TCNT1L=0x00;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0033 ICR1H=0x00;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0034 ICR1L=0x00;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0035 OCR1AH=0x1E;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0036 OCR1AL=0x85;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0037 OCR1BH=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0038 OCR1BL=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0039 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 003B {
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 003C char status,data;
; 0000 003D status=UCSRA;
;PCODE: $0000002F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003E data=UDR;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003F if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0040    {
; 0000 0041    rx_buffer[rx_wr_index]=data;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0042    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0043    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0044       {
; 0000 0045       rx_counter=0;
;PCODE: $00000045 VOL: 0
; 0000 0046       rx_buffer_overflow=1;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0047       };
;PCODE: $00000049 VOL: 0
; 0000 0048    };
;PCODE: $0000004A VOL: 0
; 0000 0049   uart_data[i]=data;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 004A   status_usart=UCSRA;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 004B   i++;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 004C   if(UCSRA==48)
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 004D   {
; 0000 004E   i=0;
;PCODE: $00000056 VOL: 0
; 0000 004F   }
; 0000 0050 
; 0000 0051 
; 0000 0052 }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0059 {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 005A char data;
; 0000 005B while (rx_counter==0);
;PCODE: $0000005E VOL: 0
;	data -> R17
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 005C data=rx_buffer[rx_rd_index];
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 005D if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 005E #asm("cli")
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
	cli
;PCODE: $0000006F VOL: 0
; 0000 005F --rx_counter;
;PCODE: $00000070 VOL: 0
; 0000 0060 #asm("sei")
;PCODE: $00000071 VOL: 0
	sei
;PCODE: $00000072 VOL: 0
; 0000 0061 return data;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0062 }
;PCODE: $00000076 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;void main(void)
; 0000 006C {
;PCODE: $00000077 VOL: 0
; 0000 006D 
; 0000 006E 
; 0000 006F // USART initialization
; 0000 0070 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0071 // USART Receiver: On
; 0000 0072 // USART Transmitter: Off
; 0000 0073 // USART Mode: Asynchronous
; 0000 0074 // USART Baud Rate: 1786
; 0000 0075 UCSRA=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0076 UCSRB=0x90;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0077 UCSRC=0x86;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0078 UBRRH=0x01;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0079 UBRRL=0x17;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 007A 
; 0000 007B DDRD=0b00001000;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 007C 
; 0000 007D TCCR1A=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 007E TCCR1B=0x05;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 007F TCNT1H=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0080 TCNT1L=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0081 ICR1H=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0082 ICR1L=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0083 OCR1AH=0x1E;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0084 OCR1AL=0x85;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0085 OCR1BH=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0086 OCR1BL=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0087 
; 0000 0088 TIMSK=0x10;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0089 ACSR=0x80;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 008A SFIOR=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 008B // LCD module initialization
; 0000 008C lcd_init(16);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 008D 
; 0000 008E // Global enable interrupts
; 0000 008F #asm("sei")
;PCODE: $000000A1 VOL: 0
	sei
;PCODE: $000000A2 VOL: 0
; 0000 0090 
; 0000 0091 while (1)
;PCODE: $000000A3 VOL: 0
; 0000 0092       {
; 0000 0093       if (lcd_can_clear>3){
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0094 
; 0000 0095         j=0;
;PCODE: $000000A7 VOL: 0
; 0000 0096             while(j<12){
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0097             uart_data[j]=0;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0098             j++;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0099             }
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 009A         lcd_clear();
;PCODE: $000000B5 VOL: 0
; 0000 009B         lcd_can_clear=0;
;PCODE: $000000B6 VOL: 0
; 0000 009C         lcd_gotoxy(0,0);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 009D             j=0;
;PCODE: $000000BC VOL: 0
; 0000 009E       }
; 0000 009F       while(j<12)
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00A0       {
; 0000 00A1       lcd_gotoxy(j,0);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00A2       sprintf(lcd_buffer,"%c",uart_data[j]);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00A3       //sprintf(lcd_buffer,"%d",status_usart);
; 0000 00A4 
; 0000 00A5       lcd_puts(lcd_buffer);
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00A6       j++;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00A7       }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00A8       j=0;
;PCODE: $000000DC VOL: 0
; 0000 00A9       //lcd_clear();
; 0000 00AA       };
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00AB }
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
