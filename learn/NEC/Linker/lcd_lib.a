;#include "lcd_lib.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;//макросы для работы с битами
;#define ClearBit(reg, bit)       reg &= (~(1<<(bit)))
;#define SetBit(reg, bit)         reg |= (1<<(bit))
;
;#define FLAG_BF 7
;
;unsigned char __swap_nibbles(unsigned char data)
; 0001 000A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 000B  #asm
;	data -> Y+0
;PCODE: $0000000F VOL: 0
; 0001 000C  ld r30, Y
 ld r30, Y
;PCODE: $00000010 VOL: 0
; 0001 000D  swap r30
 swap r30
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 000E  #endasm
; 0001 000F }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;
;void LCD_WriteComInit(unsigned char data)
; 0001 0012 {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0001 0013   unsigned char tmp;
; 0001 0014   delay_us(40);
;PCODE: $00000018 VOL: 0
;	data -> Y+1
;	tmp -> R17
;PCODE: $00000019 VOL: 0
; 0001 0015   ClearBit(PORT_SIG, RS);	//установка RS в 0 - команды
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 0016 #ifdef BUS_4BIT
; 0001 0017   tmp  = PORT_DATA & 0x0f;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0018   tmp |= (data & 0xf0);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 0019   PORT_DATA = tmp;		//вывод старшей тетрады
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 001A #else
; 0001 001B   PORT_DATA = data;		//вывод данных на шину индикатора
; 0001 001C #endif
; 0001 001D   SetBit(PORT_SIG, EN);	        //установка E в 1
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 001E   delay_us(2);
;PCODE: $00000027 VOL: 0
; 0001 001F   ClearBit(PORT_SIG, EN);	//установка E в 0 - записывающий фронт
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 0020 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;
;inline static void LCD_CommonFunc(unsigned char data)
; 0001 0024 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 0025 #ifdef BUS_4BIT
; 0001 0026   unsigned char tmp;
; 0001 0027   tmp  = PORT_DATA & 0x0f;
;PCODE: $00000031 VOL: 0
;	data -> Y+1
;	tmp -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0001 0028   tmp |= (data & 0xf0);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 0029 
; 0001 002A   PORT_DATA = tmp;		//вывод старшей тетрады
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 002B   SetBit(PORT_SIG, EN);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 002C   delay_us(2);
;PCODE: $0000003D VOL: 0
; 0001 002D   ClearBit(PORT_SIG, EN);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 002E 
; 0001 002F   data = __swap_nibbles(data);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 0030   tmp  = PORT_DATA & 0x0f;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 0031   tmp |= (data & 0xf0);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 0032 
; 0001 0033   PORT_DATA = tmp;		//вывод младшей тетрады
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 0034   SetBit(PORT_SIG, EN);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0001 0035   delay_us(2);
;PCODE: $0000004F VOL: 0
; 0001 0036   ClearBit(PORT_SIG, EN);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 0037 #else
; 0001 0038   PORT_DATA = data;		//вывод данных на шину индикатора
; 0001 0039   SetBit(PORT_SIG, EN);	        //установка E в 1
; 0001 003A   delay_us(2);
; 0001 003B   ClearBit(PORT_SIG, EN);	//установка E в 0 - записывающий фронт
; 0001 003C #endif
; 0001 003D }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;inline static void LCD_Wait(void)
; 0001 0040 {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 0041 #ifdef CHECK_FLAG_BF
; 0001 0042   #ifdef BUS_4BIT
; 0001 0043 
; 0001 0044   unsigned char data;
; 0001 0045   DDRX_DATA &= 0x0f;            //конфигурируем порт на вход
; 0001 0046   PORT_DATA |= 0xf0;	        //включаем pull-up резисторы
; 0001 0047   SetBit(PORT_SIG, RW);         //RW в 1 чтение из lcd
; 0001 0048   ClearBit(PORT_SIG, RS);	//RS в 0 команды
; 0001 0049   do{
; 0001 004A     SetBit(PORT_SIG, EN);
; 0001 004B     delay_us(2);
; 0001 004C     data = PIN_DATA & 0xf0;      //чтение данных с порта
; 0001 004D     ClearBit(PORT_SIG, EN);
; 0001 004E     data = __swap_nibbles(data);
; 0001 004F     SetBit(PORT_SIG, EN);
; 0001 0050     delay_us(2);
; 0001 0051     data |= PIN_DATA & 0xf0;      //чтение данных с порта
; 0001 0052     ClearBit(PORT_SIG, EN);
; 0001 0053     data = __swap_nibbles(data);
; 0001 0054   }while((data & (1<<FLAG_BF))!= 0 );
; 0001 0055   ClearBit(PORT_SIG, RW);
; 0001 0056   DDRX_DATA |= 0xf0;
; 0001 0057 
; 0001 0058   #else
; 0001 0059   unsigned char data;
; 0001 005A   DDRX_DATA = 0;                //конфигурируем порт на вход
; 0001 005B   PORT_DATA = 0xff;	        //включаем pull-up резисторы
; 0001 005C   SetBit(PORT_SIG, RW);         //RW в 1 чтение из lcd
; 0001 005D   ClearBit(PORT_SIG, RS);	//RS в 0 команды
; 0001 005E   do{
; 0001 005F     SetBit(PORT_SIG, EN);
; 0001 0060     delay_us(2);
; 0001 0061     data = PIN_DATA;            //чтение данных с порта
; 0001 0062     ClearBit(PORT_SIG, EN);
; 0001 0063   }while((data & (1<<FLAG_BF))!= 0 );
; 0001 0064   ClearBit(PORT_SIG, RW);
; 0001 0065   DDRX_DATA = 0xff;
; 0001 0066   #endif
; 0001 0067 #else
; 0001 0068   delay_us(40);
;PCODE: $00000059 VOL: 0
; 0001 0069 #endif
; 0001 006A }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;
;//функция записи команды
;void LCD_WriteCom(unsigned char data)
; 0001 006E {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 006F   LCD_Wait();
;	data -> Y+0
;PCODE: $0000005E VOL: 0
; 0001 0070   ClearBit(PORT_SIG, RS);	//установка RS в 0 - команды
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0001 0071   LCD_CommonFunc(data);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0001 0072 }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;
;//функция записи данных
;void LCD_WriteData(unsigned char data)
; 0001 0076 {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0001 0077   LCD_Wait();
;	data -> Y+0
;PCODE: $00000069 VOL: 0
; 0001 0078   SetBit(PORT_SIG, RS);	        //установка RS в 1 - данные
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0001 0079   LCD_CommonFunc(data);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0001 007A }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;
;//функция инициализации
;void LCD_Init(void)
; 0001 007E {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0001 007F #ifdef BUS_4BIT
; 0001 0080   DDRX_DATA |= 0xf0;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 0081   PORT_DATA |= 0xf0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0001 0082 #else
; 0001 0083   DDRX_DATA |= 0xff;
; 0001 0084   PORT_DATA |= 0xff;
; 0001 0085 #endif
; 0001 0086 
; 0001 0087   DDRX_SIG |= (1<<RW)|(1<<RS)|(1<<EN);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0001 0088   PORT_SIG |= (1<<RW)|(1<<RS)|(1<<EN);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0001 0089   ClearBit(PORT_SIG, RW);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0001 008A   delay_ms(40);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0001 008B 
; 0001 008C #ifdef HD44780
; 0001 008D   LCD_WriteComInit(0x30);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0001 008E   delay_ms(10);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0001 008F   LCD_WriteComInit(0x30);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0001 0090   delay_ms(1);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 0091   LCD_WriteComInit(0x30);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0001 0092 #endif
; 0001 0093 
; 0001 0094 #ifdef BUS_4BIT
; 0001 0095   LCD_WriteComInit(0x20); //4-ми разрядная шина
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0001 0096   LCD_WriteCom(0x28); //4-ми разрядная шина, 2 - строки
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 0097 #else
; 0001 0098   LCD_WriteCom(0x38); //8-ми разрядная шина, 2 - строки
; 0001 0099 #endif
; 0001 009A   LCD_WriteCom(0x08);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0001 009B   LCD_WriteCom(0x0c);  //0b00001111 - дисплей вкл, курсор и мерцание выключены
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0001 009C   LCD_WriteCom(0x01);  //0b00000001 - очистка дисплея
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0001 009D   delay_ms(2);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0001 009E   LCD_WriteCom(0x06);  //0b00000110 - курсор движется вправо, сдвига нет
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0001 009F }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;
;//функция вывода строки из флэш памяти
;void LCD_SendStringFlash(char __flash *str)
; 0001 00A3 {
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0001 00A4   unsigned char data;
; 0001 00A5   while (*str)
;PCODE: $000000AD VOL: 0
;	*str -> Y+1
;	data -> R17
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0001 00A6   {
; 0001 00A7     data = *str++;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0001 00A8     LCD_WriteData(data);
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 00A9   }
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0001 00AA }
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;
;//функция вывда строки из ОЗУ
;void LCD_SendString(char *str)
; 0001 00AE {
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0001 00AF   unsigned char data;
; 0001 00B0   while (*str)
;PCODE: $000000C1 VOL: 0
;	*str -> Y+1
;	data -> R17
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0001 00B1   {
; 0001 00B2     data = *str++;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0001 00B3     LCD_WriteData(data);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0001 00B4   }
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 00B5 }
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;
;void LCD_Clear(void)
; 0001 00B8 {
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0001 00B9   LCD_WriteCom(0x01);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0001 00BA   delay_ms(2);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0001 00BB }
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
