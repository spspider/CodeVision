;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <string.h>
;
;
;
;#define ADC_VREF_TYPE 0x00
;//#define ADC_VREF_TYPE 0x20
;
;unsigned int adc0,Timer1,Timer2;
;unsigned char Timer_2,Timer_3,sig1,U2;
;char data;
;bit a, U1;
;
;#include <INT.c>
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0010 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;Timer1++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;Timer2++;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;if (Timer2==1500){Timer2=0;a=1;}
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;if (Timer1==10000){
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;U2=0;
;PCODE: $00000020 VOL: 0
;}
;if (Timer1==20000){
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;U2=1;Timer1=0;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;}
;Timer_2++;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;if (Timer_2==20){Timer_2=1;Timer_3++;} //скорость обновлени€ PWM модулировани€, значение мен€етс€ с частотой
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;if (Timer_2<sig1){U1=1;}else{U1=0;} // sig1 + задержка драйвер дл€ лампы 0 - значение 1й переменной
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;if (U1==1){PORTD|=0b00000100;} //x3,y4
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;if (U1==0){PORTD&=~0b00000100;}
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;if (Timer_3>=20){ //скорость затухани€
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;
;
;
;if (U2==1) {if(sig1<20){sig1=sig1+1;}}
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;if (U2==0) {if(sig1>1){sig1=sig1-1;}else{sig1=0;}}
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;
;
;
;Timer_3=0;}
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;
;
;
;
;}
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;
;#include <USART_Rx.c>
;#define RXB8 1
;#define TXB8 0
;#define UPE 2
;#define OVR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<OVR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0011 {
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;char status;
;status=UCSRA;
;PCODE: $00000068 VOL: 0
;	status -> R17
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;data=UDR;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;   {
;   rx_buffer[rx_wr_index]=data;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;   if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;   if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;      {
;      rx_counter=0;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;      rx_buffer_overflow=1;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;      };
;PCODE: $00000087 VOL: 0
;   };
;PCODE: $00000088 VOL: 0
;}
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
;{
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;char data;
;while (rx_counter==0);
;PCODE: $0000008F VOL: 0
;	data -> R17
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;data=rx_buffer[rx_rd_index];
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;#asm("cli")
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
	cli
;PCODE: $000000A3 VOL: 0
;--rx_counter;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;#asm("sei")
;PCODE: $000000A7 VOL: 0
	sei
;PCODE: $000000A8 VOL: 0
;return data;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;}
;PCODE: $000000AC VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;
;unsigned int read_adc(unsigned char adc_input)
; 0000 0015 {
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0016 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0017 // Delay needed for the stabilization of the ADC input voltage
; 0000 0018 delay_us(20);
;PCODE: $000000B1 VOL: 0
; 0000 0019 // Start the AD conversion
; 0000 001A ADCSRA|=0x40;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 001B // Wait for the AD conversion to complete
; 0000 001C while ((ADCSRA & 0x10)==0);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 001D ADCSRA|=0x10;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 001E return ADCW;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 001F }
;PCODE: $000000BF VOL: 0
;/*
;
;unsigned char read_adc(unsigned char adc_input)
;{
;ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;// Delay needed for the stabilization of the ADC input voltage
;delay_us(50);
;// Start the AD conversion
;ADCSRA|=0x40;
;// Wait for the AD conversion to complete
;while ((ADCSRA & 0x10)==0);
;ADCSRA|=0x10;
;return ADCH;
;}
;*/
;void main(void)
; 0000 0030 {
;PCODE: $000000C0 VOL: 0
; 0000 0031 
; 0000 0032 //PORTB=0xFF;         //вкл. подт€гивающие резисторы
; 0000 0033 //DDRB=0xFF;           // весь порт как вход
; 0000 0034 //PORTD=0xFF;
; 0000 0035 
; 0000 0036 DDRD=0xFF;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0037 UCSRA=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0038 UCSRB=0x18;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0039 UCSRC=0x86;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 003A UBRRH=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 003B UBRRL=0x33;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 003C 
; 0000 003D //////////////////////////////
; 0000 003E /*
; 0000 003F // USART initialization
; 0000 0040 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0041 // USART Receiver: On
; 0000 0042 // USART Transmitter: On
; 0000 0043 // USART Mode: Asynchronous
; 0000 0044 // USART Baud Rate: 110
; 0000 0045 UCSRA=0x00;
; 0000 0046 UCSRB=0xD8;
; 0000 0047 UCSRC=0x86;
; 0000 0048 UBRRH=0x02;
; 0000 0049 UBRRL=0x37;
; 0000 004A */
; 0000 004B ///////////////////////////////////////
; 0000 004C 
; 0000 004D TCCR0=0x01;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 004E TIMSK=0x01;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 004F ACSR=0x80;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0050 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0051 
; 0000 0052 ADCSRA=0x87;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0053 #asm("sei")
;PCODE: $000000D7 VOL: 0
	sei
;PCODE: $000000D8 VOL: 0
; 0000 0054 
; 0000 0055 
; 0000 0056 while (1)
;PCODE: $000000D9 VOL: 0
; 0000 0057 {
; 0000 0058 if (a==1){
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0059 adc0=read_adc(2);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 005A printf("%d#",adc0);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 005B //prin=getchar();
; 0000 005C if (data != 0){
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 005D printf("%d#",data);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 005E }
; 0000 005F a=0;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0060 //delay_ms(500);
; 0000 0061 //PORTD^=0b00000100;
; 0000 0062 }
; 0000 0063 }
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0064 }
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
