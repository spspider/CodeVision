;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.4 Standard
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 16.07.2010
;Author  :
;Company :
;Comments:
;
;
;Chip type           : ATmega8L
;Program type        : Application
;Clock frequency     : 8,000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 256
;*****************************************************/
;
;unsigned char adc1,c;
;bit S_1=1;
;unsigned char Timer_2;
;unsigned int Timer_1,DataS[255];
;#include <stdlib.h>
;#include <stdio.h>
;#include <delay.h>
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <ADC.c>
;
;
;unsigned char read_adc(unsigned char adc_input)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;ADMUX=adc_input;
;	adc_input -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;// Start the AD conversion
;ADCSRA|=0x40;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;// Wait for the AD conversion to complete
;while ((ADCSRA & 0x10)==0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;ADCSRA|=0x10;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;return ADCW;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;adc1 = ADCH;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;}
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;#include <Sound_1.c>
;
;void sound(){
; 0000 0021 void sound(){
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;if (S_1==1){ // если получено разрешение слышать сигнал
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;Timer_1++;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;if (Timer_1==1000){ //если таймер равен промежутку времени
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;adc1=read_adc(0);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;Timer_1=0;
;PCODE: $00000039 VOL: 0
;Timer_2++;
;PCODE: $0000003A VOL: 0
;DataS[Timer_2]=adc1;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;if (Timer_2==20){Timer_2=0;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;for (c=0;c<20;c++){printf("%d\n",DataS[c]);}printf("%d\n\r");}
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;}
;PCODE: $00000068 VOL: 0
;}
;PCODE: $00000069 VOL: 0
;}
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;
;
;
;// Declare your global variables here
;
;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 002A {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 002B // Place your code here
; 0000 002C sound();
;PCODE: $0000006F VOL: 0
; 0000 002D #include <Timer.c>
; 0000 002E 
; 0000 002F }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;
;void main(void)
; 0000 0032 {
;PCODE: $00000073 VOL: 0
; 0000 0033 
; 0000 0034 PORTB=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0035 DDRB=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0036 
; 0000 0037 PORTC=0xFF;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0038 DDRC=0xFF;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0039 
; 0000 003A PORTD=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 003B DDRD=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 003C 
; 0000 003D TCCR0=0x02;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 003E TCNT0=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 003F 
; 0000 0040 TCCR1A=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0041 TCCR1B=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0042 TCNT1H=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0043 TCNT1L=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0044 ICR1H=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0045 ICR1L=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0046 OCR1AH=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0047 OCR1AL=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0048 OCR1BH=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0049 OCR1BL=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 004A 
; 0000 004B ASSR=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 004C TCCR2=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 004D TCNT2=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 004E OCR2=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 004F MCUCR=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0050 
; 0000 0051 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0052 TIMSK=0x01;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0053 
; 0000 0054 UCSRA=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0055 UCSRB=0xD8;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0056 UCSRC=0x86;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0057 UBRRH=0x00;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0058 UBRRL=0x33;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0059 
; 0000 005A 
; 0000 005B // Analog Comparator initialization
; 0000 005C // Analog Comparator: Off
; 0000 005D // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 005E SFIOR=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 005F 
; 0000 0060 // ADC initialization
; 0000 0061 // ADC Clock frequency: 1000,000 kHz
; 0000 0062 // ADC Voltage Reference: AREF pin
; 0000 0063 ACSR=0x80;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0064 ADCSRA=0x84;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0065 
; 0000 0066 #asm("sei")
;PCODE: $000000B4 VOL: 0
	sei
;PCODE: $000000B5 VOL: 0
; 0000 0067 
; 0000 0068 while (1)
;PCODE: $000000B6 VOL: 0
; 0000 0069       {
; 0000 006A 
; 0000 006B       // Place your code here
; 0000 006C       };
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 006D }
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
