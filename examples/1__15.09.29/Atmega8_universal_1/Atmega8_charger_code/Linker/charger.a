;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.4 Standard
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 26.11.2013
;Author  :
;Company :
;Comments:
;
;
;Chip type           : ATmega8
;Program type        : Application
;Clock frequency     : 8,000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x18 ;PORTB
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001D #endasm
;#include <lcd.h>
;
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x00
;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0027 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0028 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0029 // Delay needed for the stabilization of the ADC input voltage
; 0000 002A delay_us(10);
;PCODE: $00000015 VOL: 0
; 0000 002B // Start the AD conversion
; 0000 002C ADCSRA|=0x40;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002D // Wait for the AD conversion to complete
; 0000 002E while ((ADCSRA & 0x10)==0);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002F ADCSRA|=0x10;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0030 return ADCW;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0031 }
;PCODE: $00000028 VOL: 0
;#include <interrupt.c>
;//unsigned char Dig[20],DisOther,Num3,Num2,Disp6,Disp7,Timer_3;
;// Timer 0 overflow interrupt service routine
;unsigned char Timer_read_adc_1,Timer_read_adc_2,Temp1,_str,*_data[5],Timer_buzzer_1,Timer_buzzer_active,Timer_buzzer_signal,Timer_buzzer_silence,Timer_buzzer_silence_1,Timer_buzzer_active_1,Timer_buzzer_active,Voltage1;
;unsigned int adc[5];
;float Voltage2;
;void buzzer(unsigned char time,unsigned char freq,unsigned char repeat){
; 0000 0032 void buzzer(unsigned char time,unsigned char freq,unsigned char repeat){
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;if (time>0){
;	time -> Y+2
;	freq -> Y+1
;	repeat -> Y+0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;Timer_buzzer_active_1++;
;PCODE: $0000002E VOL: 0
;if (Timer_buzzer_active_1>250){//длинна бузера
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;Timer_buzzer_active++;
;PCODE: $00000032 VOL: 0
;Timer_buzzer_active_1=0;
;PCODE: $00000033 VOL: 0
;}
;
;if(Timer_buzzer_active<time){
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;    Timer_buzzer_signal++;
;PCODE: $00000038 VOL: 0
;    if (Timer_buzzer_signal==freq){//частота бузера
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;    PORTD^=0b10000000;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;    Timer_buzzer_signal=0;
;PCODE: $00000041 VOL: 0
;    }
;Timer_buzzer_silence=0;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;}
;if(Timer_buzzer_active>time){
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;    Timer_buzzer_silence_1++;
;PCODE: $00000048 VOL: 0
;    if(Timer_buzzer_silence_1>250){
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;    Timer_buzzer_silence_1=0;
;PCODE: $0000004C VOL: 0
;    Timer_buzzer_silence++;
;PCODE: $0000004D VOL: 0
;    }
;    PORTD&=~0b10000000;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;        if(Timer_buzzer_silence>time){
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;            if (repeat>0){
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;            Timer_buzzer_active=0;
;PCODE: $00000059 VOL: 0
;            }
;            repeat--;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;            if (repeat==0){
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;            time=0;freq=0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;            }
;        }
;PCODE: $00000065 VOL: 0
;    }
;PCODE: $00000066 VOL: 0
;}
;PCODE: $00000067 VOL: 0
;}
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
;{
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;if (PIND.6==0){buzzer(10,10,3);};
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;Timer_read_adc_1++;
;PCODE: $00000079 VOL: 0
;if(Timer_read_adc_1==255){
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;Timer_read_adc_2++;
;PCODE: $0000007D VOL: 0
;Timer_read_adc_1=0;
;PCODE: $0000007E VOL: 0
;}
;/*
;if(Timer_read_adc_2==10){lcd_clear();}
;if(Timer_read_adc_2==15){adc[0]=read_adc(0);}//чтение батареи
;if(Timer_read_adc_2==25){Voltage1=adc[0]/204;}
;if(Timer_read_adc_2==35){Voltage2=adc[0]/2.048;}
;if(Timer_read_adc_2==45){itoa(Voltage1, _data[0]);}
;if(Timer_read_adc_2==55){itoa(Voltage2, _data[1]);lcd_gotoxy(0,0);}
;if(Timer_read_adc_2==60){lcd_putsf("bat:");}
;if(Timer_read_adc_2==70){lcd_puts(_data[0]);lcd_putsf(",");lcd_puts(_data[1]);}   // Выводим строку _str на дисплей ЖКИ
;if(Timer_read_adc_2==80){lcd_gotoxy(7,0);}
;if(Timer_read_adc_2==100){lcd_putsf("Time:");}
;if(Timer_read_adc_2==110){lcd_puts(_data[1]);Timer_read_adc_2=0;}   // Выводим строку _str на дисплей ЖКИ
;*/
;if(Timer_read_adc_2==25){
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;lcd_clear();
;PCODE: $00000083 VOL: 0
;adc[0]=read_adc(0);//чтение батареи
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;Voltage1=adc[0]/204;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;Voltage2=adc[0]/2.048;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;itoa(Voltage1, _data[0]);}
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;if(Timer_read_adc_2==100){
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;itoa(Voltage2, _data[1]);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;lcd_gotoxy(0,0);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;lcd_putsf("bat:");
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;lcd_puts(_data[0]);lcd_putsf(",");lcd_puts(_data[1]);   // Выводим строку _str на дисплей ЖКИ
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;lcd_gotoxy(7,0);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;lcd_putsf("Time:");
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;lcd_puts(_data[1]);Timer_read_adc_2=0;   // Выводим строку _str на дисплей ЖКИ
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;
;}
;//}
;// Place your code here
;/*
;Timer_3++;
;if (Timer_3==1){//первая цифра
;PORTC&=~0b00000100;
;PORTC|=0b00001000;
;PORTB=Disp6-Dis1;}
;if (Timer_3==100){//вторая цифра
;PORTC&=~0b00001000;
;PORTC|=0b00000100;
;PORTB=Disp7-Dis2;
;}
;if (Timer_3==200){Timer_3=0;}
;//Timer_8++
;*/
;}
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;/*
;void Dig_init() //Массив для отображения цифр на семисегментном индикаторе
;{          //ABCDEFG DP
;  Dig[0] = 0b00000011;
;  Dig[1] = 0b10011111;
;  Dig[2] = 0b00100101;
;  Dig[3] = 0b00001101;
;  Dig[4] = 0b10011001;
;  Dig[5] = 0b01001001;
;  Dig[6] = 0b01000011;
;  Dig[7] = 0b00011111;
;  Dig[8] = 0b00000001;
;  Dig[9] = 0b00001001;
;  Dig[10]= 0b01001001;//s
;  Dig[11]= 0b00110001;//p
;  Dig[12]= 0b01100011;//C
;  Dig[13]= 0b00001111;//C
;  Dig[14]= 0b11001111;//u
;  Dig[15]= 0b11100111;//u
;  Dig[16]= 0b00000001;//.
;}
;void Display (unsigned int Number) //Ф-ция для разложения десятичного цисла
;{
;if (DisOther==0){
;  Num2=0, Num3=0;
;    while (Number >= 10)
;  {
;    Number -= 10;
;    Num3++;
;  }
;  Num2 = Number;
; }
;
;  Disp6 = Dig[Num3];
;  Disp7 = Dig[Num2];
;}
;*/
;// Declare your global variables here
;
;void main(void)
; 0000 0036 {
;PCODE: $000000C9 VOL: 0
; 0000 0037 // Declare your local variables here
; 0000 0038 
; 0000 0039 // Input/Output Ports initialization
; 0000 003A // Port B initialization
; 0000 003B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 003C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 003D PORTB=0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 003E DDRB=0x00;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 003F 
; 0000 0040 // Port C initialization
; 0000 0041 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0042 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0043 PORTC=0x00;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0044 DDRC=0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0045 
; 0000 0046 // Port D initialization
; 0000 0047 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0048 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0049 PORTD=0b00000000;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 004A DDRD=0b10000000;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 004B 
; 0000 004C // Timer/Counter 0 initialization
; 0000 004D // Clock source: System Clock
; 0000 004E // Clock value: 8000,000 kHz
; 0000 004F TCCR0=0x01;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0050 TCNT0=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0051 
; 0000 0052 // Timer/Counter 1 initialization
; 0000 0053 // Clock source: System Clock
; 0000 0054 // Clock value: Timer 1 Stopped
; 0000 0055 // Mode: Normal top=FFFFh
; 0000 0056 // OC1A output: Discon.
; 0000 0057 // OC1B output: Discon.
; 0000 0058 // Noise Canceler: Off
; 0000 0059 // Input Capture on Falling Edge
; 0000 005A // Timer 1 Overflow Interrupt: Off
; 0000 005B // Input Capture Interrupt: Off
; 0000 005C // Compare A Match Interrupt: Off
; 0000 005D // Compare B Match Interrupt: Off
; 0000 005E TCCR1A=0x00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 005F TCCR1B=0x00;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0060 TCNT1H=0x00;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0061 TCNT1L=0x00;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0062 ICR1H=0x00;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0063 ICR1L=0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0064 OCR1AH=0x00;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0065 OCR1AL=0x00;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0066 OCR1BH=0x00;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0067 OCR1BL=0x00;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0068 
; 0000 0069 // Timer/Counter 2 initialization
; 0000 006A // Clock source: System Clock
; 0000 006B // Clock value: Timer 2 Stopped
; 0000 006C // Mode: Normal top=FFh
; 0000 006D // OC2 output: Disconnected
; 0000 006E ASSR=0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 006F TCCR2=0x00;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0070 TCNT2=0x00;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0071 OCR2=0x00;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0072 
; 0000 0073 // External Interrupt(s) initialization
; 0000 0074 // INT0: Off
; 0000 0075 // INT1: Off
; 0000 0076 MCUCR=0x00;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0077 
; 0000 0078 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0079 TIMSK=0x01;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 007A 
; 0000 007B // Analog Comparator initialization
; 0000 007C // Analog Comparator: Off
; 0000 007D // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 007E ACSR=0x80;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 007F SFIOR=0x00;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0080 
; 0000 0081 // ADC initialization
; 0000 0082 // ADC Clock frequency: 1000,000 kHz
; 0000 0083 // ADC Voltage Reference: AREF pin
; 0000 0084 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0085 ADCSRA=0x83;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0086 
; 0000 0087 // LCD module initialization
; 0000 0088 lcd_init(16);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0089 
; 0000 008A // Global enable interrupts
; 0000 008B #asm("sei")
;PCODE: $00000105 VOL: 0
	sei
;PCODE: $00000106 VOL: 0
; 0000 008C 
; 0000 008D while (1)
;PCODE: $00000107 VOL: 0
; 0000 008E       {
; 0000 008F       // Place your code here
; 0000 0090       #include <while.c>
; 0000 0091 
; 0000 0092       };
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0093 }
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
