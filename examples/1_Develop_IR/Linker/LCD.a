; #include <avr/io.h>
;
;extern unsigned char cellCount;
;extern void LCDInitialize();
;extern void LCDWriteChar(unsigned char letter);
;extern void TriggerE(unsigned int delayTime);
;extern void delay(unsigned int time);
;
;int main()
; 0002 000A {

	.CSEG
;PCODE: $00000000 VOL: 0
; 0002 000B       LCDInitialize();
;PCODE: $00000001 VOL: 0
; 0002 000C       while(1)
;PCODE: $00000002 VOL: 0
; 0002 000D          LCDWriteChar('a');
;PCODE: $00000003 VOL: 0
;PCODE: $00000004 VOL: 0
;PCODE: $00000005 VOL: 0
;PCODE: $00000006 VOL: 0
;PCODE: $00000007 VOL: 0
; 0002 000F return 0;
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
; 0002 0010 }
;PCODE: $0000000B VOL: 0
;//-----------------------------------------LCD helper file---------------------------------------
;#include <avr/io.h>
;
;/*
;Painfully rough and poor code to institute a 4 wire LCD using an ATmega8
;*/
;
;/* Useful functions to your main code:
;extern unsigned char cellCount;
;extern void LCDInitialize();
;extern void LCDWriteChar(unsigned char letter);
;*/
;#define E = (1<<PC5)   // E = PC5
;#define RS = (1<<PC4)      // RS = PC4
;
;unsigned char cellCount;
;void LCDInitialize();
;void LCDWriteChar(unsigned char letter);
;void TriggerE(unsigned int delayTime);
;void delay(unsigned long time);
;void LCDResetCursor();
;void SetRS(unsigned char val);
;void SetE(unsigned char val);
;void OutputVal(unsigned char val);
;
;void SetE(unsigned char val)
; 0002 002B {
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0002 002C    if(val == 1)
;	val -> Y+0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0002 002D       PORTC |=  (1<<PC5);   //Set the RS pin to 1
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0002 002E    else
; 0002 002F       PORTC &= ~(1<<PC5);  //set the RS pin to 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0002 0030 }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;
;void OutputVal(unsigned char val)
; 0002 0033 {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0002 0034    PORTC &= 0xF0; //set the lower four bits to a 0, for consistancy sake
;	val -> Y+0
;PCODE: $0000001A VOL: 0
; 0002 0035    //output the first part of the value:
; 0002 0036    PORTC |= ((0xF0 & val)>>4);  //display the top part as the lower 4 bits
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0002 0037    TriggerE(1000);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0002 0038    delay(100);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0002 0039    PORTC &= 0xF0; //set the lower four bits to a 0, for consistancy sake
;PCODE: $00000025 VOL: 0
; 0002 003A    PORTC |= (0x0F & val);  //display the top part as the lower 4 bits
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0002 003B    TriggerE(1000);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0002 003C }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;
;void SetRS(unsigned char val)
; 0002 0040 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0002 0041    if(val == 1)
;	val -> Y+0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0002 0042       PORTC |= (1<<PC4);   //Set the RS pin to 1
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0002 0043    else
; 0002 0044       PORTC &= ~(1<<PC4);  //set the RS pin to 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0002 0045 }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;
;
;//reset cursor to the beginning
;void LCDResetCursor()
; 0002 004B {
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0002 004C     SetRS(0);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0002 004D     cellCount = 0;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0002 004E     //set cursor to home
; 0002 004F     OutputVal(0x03);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0002 0050     TriggerE(1000);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0002 0051     delay(1000);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0002 0052 }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;//initialize LCD routine
;void LCDInitialize()
; 0002 0055 {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0002 0056     cellCount = 0;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0002 0057     DDRC = 0xFF;  //set PORTC as output port
;PCODE: $00000051 VOL: 0
; 0002 0058     SetRS(0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0002 0059     OutputVal(0x00);     //clear buffer
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0002 005A     delay(11500);   //delay for about 15 milliseconds
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0002 005B 
; 0002 005C     OutputVal(0x20); //function set: 4 bit mode
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0002 005D     TriggerE(1000);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0002 005E     delay(3124);    //need to delay for more than 4.1 ms
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0002 005F 
; 0002 0060   //  OutputVal(0x28); //For some reason, it treats this LCD as a 8x2 array, instead of a 16x1. Uncomment this line and you will see that each cell is used
; 0002 0061     TriggerE(1000);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0002 0062     delay(1000);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0002 0063 
; 0002 0064 
; 0002 0065     OutputVal(0x06);    //cursor move right, no shift display
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0002 0066     TriggerE(100);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0002 0067     delay(1000);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0002 0068 
; 0002 0069     OutputVal(0x0f);    //display on blinker, ect
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0002 006A     TriggerE(100);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0002 006B     delay(1000);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0002 006C 
; 0002 006D     OutputVal(0x01);    //set cursor to home and clear the cursor
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0002 006E     TriggerE(100);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0002 006F     delay(100);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0002 0070 }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;
;
;void LCDWriteChar(unsigned char letter)
; 0002 0074 {
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0002 0075     unsigned int i;
; 0002 0076 
; 0002 0077     //skip to the next row
; 0002 0078     if(cellCount == 16)
;PCODE: $00000089 VOL: 0
;	letter -> Y+2
;	i -> R16,R17
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0002 0079     {
; 0002 007A         for(i = 0; i < 24; i++)
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0002 007B         {
; 0002 007C             SetRS(1);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0002 007D             OutputVal(letter);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0002 007E             TriggerE(1);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0002 007F             delay(100);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0002 0080         }
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0002 0081     }
; 0002 0082     //clear the screen and jump to the first line
; 0002 0083     else if(cellCount == 33)
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0002 0084     {
; 0002 0085         for(i = 0; i < 104; i++)
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0002 0086         {
; 0002 0087             OutputVal(0x20);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0002 0088             TriggerE(1);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0002 0089             delay(100);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0002 008A             cellCount = 1;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0002 008B         }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0002 008C     }
; 0002 008D 
; 0002 008E     //output the values
; 0002 008F 
; 0002 0090     SetRS(1);
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0002 0091 
; 0002 0092     OutputVal(letter);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0002 0093     TriggerE(100);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0002 0094     delay(100);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0002 0095 //   OutputVal(0xFF);
; 0002 0096 }
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;
;
;
;void delay(unsigned long time)
; 0002 009B {
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0002 009C 
; 0002 009D //The FOR loop runs 14 assembly instructions.
; 0002 009E //each assembly instruction takes approximately 3 clock cycles per instruction.
; 0002 009F //meaning each iteration takes about 3*14= 42 clock cycles.
; 0002 00A0 //Since I am using a 16 MHz clock, each clock cycle takes 1/16000000 seconds, or 62.5 nanoseconds.
; 0002 00A1 // 62.5 ns * 42 = 2.625 microseconds per loop.
; 0002 00A2 
; 0002 00A3 //1 second should be 380952 loops
; 0002 00A4 //to test, run delay at 65535 for 5.8129 times
; 0002 00A5 //or 20000 for 19 times.
; 0002 00A6 
; 0002 00A7 //After testing, it looks like it is closer to 40000 for 19 times, implying that it is 1 to 2 clock cycles per instruction.
; 0002 00A8 //also implying that it is 1.3125 microseconds per loop
; 0002 00A9 
; 0002 00AA     unsigned int i;
; 0002 00AB     for(i = 0; i < time; i++);
;PCODE: $000000D9 VOL: 0
;	time -> Y+2
;	i -> R16,R17
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0002 00AC }
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;
;//delayTime = time required to keep e high
;void TriggerE(unsigned int delayTime)
; 0002 00B0 {
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0002 00B1    SetE(1);
;	delayTime -> Y+0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0002 00B2    delay(delayTime);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0002 00B3    SetE(0);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0002 00B4 }
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
