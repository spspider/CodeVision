;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.4 Standard
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 26.11.2013
;Author  :
;Company :
;Comments:
;
;
;Chip type           : ATmega8
;Program type        : Application
;Clock frequency     : 8,000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 256
;*****************************************************/
;
;
;#include <stdio.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega8.h>
;#include <stdlib.h>
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x18 ;PORTB
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001F #endasm
;#include <lcd.h>
;
;#include <delay.h>
;#include <spi.h>
;#define ADC_VREF_TYPE 0x00
;#include <bcd.h>
;
;eeprom signed int STempEE;
;float Temp=99.9,STemp,Temp_min=99.9,CO_sensor;

	.DSEG
;char EEPromOut,EEPromIn;
;
;#include <USART.c>
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;char lcd_buffer[32];
;char uart_data[16];
;int i=0,j=0;
;unsigned int databits=0;
;unsigned char lcd_can_clear=0,status_usart,now_set;
;
;#define RXB8 1
;#define TXB8 0
;#define UPE 2
;#define OVR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<OVR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 32
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;void clear_usart(){
; 0000 002B void clear_usart(){

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;while(i<13)
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;    {
;    uart_data[i]=0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;    i++;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;    }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;    i=0;
;PCODE: $0000001F VOL: 0
;}
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
;{
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;char status,data;
;status=UCSRA;
;PCODE: $00000024 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;data=UDR;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;   {
;   rx_buffer[rx_wr_index]=data;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;   if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;   if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;      {
;      rx_counter=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;      rx_buffer_overflow=1;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;      };
;PCODE: $00000042 VOL: 0
;   now_set=0;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;   };
;PCODE: $00000045 VOL: 0
;  uart_data[i]=data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;  status_usart=UCSRA;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;  i++;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;  if(UCSRA==48)
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;  {
;  //clear_uart();
;  i=0;
;PCODE: $00000051 VOL: 0
;  //data_recived=0;
;  PORTD&=~0b00001000;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;  }
; ///////////////////////////////////////////////
;if ((status_usart==48)&&(now_set==0)){
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;      uart_data[10]=uart_data[2] ^ uart_data[3];
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;      uart_data[11]=uart_data[4] ^ uart_data[5] ;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;      uart_data[12]=uart_data[6] ^ uart_data[7];
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;      uart_data[13]=uart_data[12] ^ uart_data[11];
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;      databits=uart_data[13];
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;      databits<<=8;
;PCODE: $0000007F VOL: 0
;      databits|=uart_data[11];
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;
;   //if {
;        if (databits==43648){
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;        STemp+=0.1;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;        }
;        if (databits==8352){
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;        STemp-=0.1;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;        }
;        EEPromIn=1;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;        //clear_usart();
;        //STempEE=STemp*100.00;
;        now_set=1;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;
;      }
;   // }
;
;      //////////////////////////////////
;}
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
;{
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;char data;
;while (rx_counter==0);
;PCODE: $000000A0 VOL: 0
;	data -> R17
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;data=rx_buffer[rx_rd_index];
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;#asm("cli")
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
	cli
;PCODE: $000000B4 VOL: 0
;--rx_counter;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;#asm("sei")
;PCODE: $000000B8 VOL: 0
	sei
;PCODE: $000000B9 VOL: 0
;return data;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;}
;PCODE: $000000BD VOL: 0
;#pragma used-
;#endif
;/////////////////////////////////////
;
;
;////////////////////////////////////////
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0032 {
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0033 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $000000C0 VOL: 0
;	adc_input -> Y+0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0034 // Delay needed for the stabilization of the ADC input voltage
; 0000 0035 delay_us(500);
;PCODE: $000000C4 VOL: 0
; 0000 0036 // Start the AD conversion
; 0000 0037 ADCSRA|=0x40;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0038 // Wait for the AD conversion to complete
; 0000 0039 while ((ADCSRA & 0x10)==0);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 003A ADCSRA|=0x10;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 003B return ADCW;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 003C }
;PCODE: $000000D2 VOL: 0
;unsigned char on[6],nowPORT[6];
;
;#include <allPWM.c>
;void allPWM(){
; 0000 003F void allPWM(){
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;///////////////////////////////////////
;//PWM
;nowPORT[2] = 0b00000100;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;nowPORT[3] = 0b00001000;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;nowPORT[4] = 0b00010000;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;nowPORT[5] = 0b00100000;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;
;
;on[2]=4;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;on[3]=4;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;on[4]=4;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;on[5]=4;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;
;/*
;for (n=2;n<6;n++) {
;off[n]=on[n]+1;
;if (PWM[n]==on[n]){PORTD|=nowPORT[n];}
;if (PWM[n]==off[n]){PORTD&=~nowPORT[n] ;}
;if (PWM[n]>=PWMmax){PORTD|=nowPORT[n];PWM[n]=0;}
;PWM[n]++;
;};
;
;*/
;
;///////////////////////////////////////
;}
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;#include <interrupt.c>
;//unsigned char Dig[20],DisOther,Num3,Num2,Disp6,Disp7,Timer_3;
;// Timer 0 overflow interrupt service routine
;unsigned char Timer_read_adc_1,Timer_read_adc_2,Timer_buzzer_active,Timer_buzzer_signal,Timer_buzzer_silence,Timer_buzze ...

	.DSEG
;unsigned int adc[6];
;
;//float Voltage2_old,Time;
;char Temp_str[20],Time_str[20],_NeedTemp[20],_Time_sec[20],_Time_min[20],_Time_hour[20],_Temp_min[20],_show_data[20],_CO ...
;
;//unsigned char delay_start,delay_start_timer;
;unsigned int Time_sec_all,Time,Time_sec,Time_min,Time_hour;
;
;//for IR
;unsigned char Startsomedelay,delayneed,Timer_IR,Timer_IR_Start;
;unsigned int databits,show_data;
;#include <buzzer.c>
;void buzzer(unsigned char time,unsigned char freq,unsigned char repeat){
; 0000 0040 void buzzer(unsigned char time,unsigned char freq,unsigned char repeat){

	.CSEG
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;if (time>0){
;PCODE: $000000F1 VOL: 0
;	time -> Y+2
;	freq -> Y+1
;	repeat -> Y+0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;Timer_buzzer_active_1++;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;if (Timer_buzzer_active_1>250){//äëèííà áóçåðà
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;Timer_buzzer_active++;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;Timer_buzzer_active_1=0;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;}
;
;if(Timer_buzzer_active<time){
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;    Timer_buzzer_signal++;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;    if (Timer_buzzer_signal==freq){//÷àñòîòà áóçåðà
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;    PORTB^=0b00001000;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;    Timer_buzzer_signal=0;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;    }
;Timer_buzzer_silence=0;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;}
;if(Timer_buzzer_active>time){
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;    Timer_buzzer_silence_1++;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;    if(Timer_buzzer_silence_1>250){
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;    Timer_buzzer_silence_1=0;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;    Timer_buzzer_silence++;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;    }
;    PORTB&=~0b00001000;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;        if(Timer_buzzer_silence>time){
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;            if (repeat>0){
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;            Timer_buzzer_active=0;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;            }
;            repeat--;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;            if (repeat==0){
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;            time=0;freq=0;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;            }
;        }
;PCODE: $0000013C VOL: 0
;    }
;PCODE: $0000013D VOL: 0
;}
;PCODE: $0000013E VOL: 0
;}
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;interrupt [TIM1_COMPB] void timer1_compb_isr(void)
;{
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;// Place your code here
;
;}
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;// Timer 2 overflow interrupt service routine
;interrupt [TIM2_COMP] void timer2_comp_isr(void)
;{
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;// Place your code here
;ASSR=0x00;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;TCCR2=0x01;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;TCNT2=0x00;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;OCR2=0x22;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;
;}
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;
;interrupt [TIM1_COMPA] void timer1_compa_isr(void){
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;TCCR1A=0x00;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;TCCR1B=0x05;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;TCNT1H=0x00;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;TCNT1L=0x00;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;ICR1H=0x00;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;ICR1L=0x00;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;OCR1AH=0x0F;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;OCR1AL=0x42;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;OCR1BH=0x00;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;OCR1BL=0x00;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;
;PORTD^=0b00001000;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;
;
;if (Temp<STemp){
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;delay_switch=0;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;start_delay_switch=1;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;is_on=1;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;}
;if (Temp>STemp){
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;delay_switch=0;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;start_delay_switch=1;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;is_on=0;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;}
;if (start_delay_switch==1){
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;delay_switch++;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;}
;if (delay_switch==20){
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;    if (is_on==0){
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;    PORTD&=~0b00100000;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;    }
;    if (is_on==1){
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;    PORTD|=0b00100000;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;    }
;    start_delay_switch=0;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;
;}
;
;if (EEPromIn==1){
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;STempEE=STemp*100.00;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;EEPromIn=0;
;PCODE: $000001A7 VOL: 0
;}
;
;// Place your code here
;if (PIND.5==1){
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;Time_one_sec++;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;    if (Time_one_sec==2){
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;    Time_sec_all++;
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;    Time_one_sec=0;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;    }
;}
;PCODE: $000001B8 VOL: 0
;
;  //ststus lamp
;
;}
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
;{
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;TCNT0=0x00;
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;//#include <IR.c>
;//allPWM();
;
;Timer_LCD++;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;Timer_read_adc_1++;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;if(Timer_read_adc_1==50){
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;Timer_read_adc_2++;
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;Timer_read_adc_1=0;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;}
;
;
;}
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0045 {
;PCODE: $000001D3 VOL: 0
; 0000 0046 // Declare your local variables here
; 0000 0047 
; 0000 0048 // Input/Output Ports initialization
; 0000 0049 // Port B initialization
; 0000 004A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004C PORTB=0b00000000;
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 004D DDRB=0b00001000;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 004E 
; 0000 004F // Port C initialization
; 0000 0050 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0051 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0052 PORTC=0x00;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0053 DDRC=0b00000000;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0054 
; 0000 0055 // Port D initialization
; 0000 0056 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0057 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0058 PORTD=0b00010100;
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 0059 DDRD=0b00101000;//5-ðåëå,3-ëàìïî÷êà
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 005A 
; 0000 005B // Timer/Counter 0 initialization
; 0000 005C // Clock source: System Clock
; 0000 005D // Clock value: 8000,000 kHz
; 0000 005E TCCR0=0x02;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 005F TCNT0=0x00;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0060 
; 0000 0061 // Timer/Counter 1 initialization
; 0000 0062 // Clock source: System Clock
; 0000 0063 // Clock value: 7,813 kHz
; 0000 0064 // Mode: Normal top=FFFFh
; 0000 0065 // OC1A output: Discon.
; 0000 0066 // OC1B output: Discon.
; 0000 0067 // Noise Canceler: Off
; 0000 0068 // Input Capture on Falling Edge
; 0000 0069 // Timer 1 Overflow Interrupt: Off
; 0000 006A // Input Capture Interrupt: Off
; 0000 006B // Compare A Match Interrupt: On
; 0000 006C // Compare B Match Interrupt: Off
; 0000 006D TCCR1A=0x00;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 006E TCCR1B=0x05;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 006F TCNT1H=0x00;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0070 TCNT1L=0x00;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 0071 ICR1H=0x00;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0072 ICR1L=0x00;
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 0073 OCR1AH=0x1E;
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0074 OCR1AL=0x85;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0075 OCR1BH=0x00;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0076 OCR1BL=0x00;
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 0077 
; 0000 0078 
; 0000 0079 // Timer/Counter 2 initialization
; 0000 007A // Clock source: System Clock
; 0000 007B // Clock value: 8000,000 kHz
; 0000 007C // Mode: Normal top=FFh
; 0000 007D // OC2 output: Disconnected
; 0000 007E ASSR=0x00;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 007F TCCR2=0x01;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 0080 TCNT2=0x00;
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 0081 OCR2=0x22;
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0082 
; 0000 0083 // External Interrupt(s) initialization
; 0000 0084 // INT0: Off
; 0000 0085 // INT1: Off
; 0000 0086 MCUCR=0x00;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0087 
; 0000 0088 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0089 TIMSK=0x91;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 008A 
; 0000 008B 
; 0000 008C 
; 0000 008D 
; 0000 008E // USART initialization
; 0000 008F // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0090 // USART Receiver: On
; 0000 0091 // USART Transmitter: Off
; 0000 0092 // USART Mode: Asynchronous
; 0000 0093 // USART Baud Rate: 1786
; 0000 0094 UCSRA=0x00;
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0095 UCSRB=0x90;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0096 UCSRC=0x86;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 0097 UBRRH=0x01;
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0098 UBRRL=0x17;
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0099 
; 0000 009A 
; 0000 009B // Analog Comparator initialization
; 0000 009C // Analog Comparator: Off
; 0000 009D // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 009E ACSR=0x80;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 009F SFIOR=0x00;
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 00A0 
; 0000 00A1 SPCR=0x00;
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 00A2 SPSR=0x00;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 00A3 
; 0000 00A4 // ADC initialization
; 0000 00A5 // ADC Clock frequency: 1000,000 kHz
; 0000 00A6 // ADC Voltage Reference: AREF pin
; 0000 00A7 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 00A8 ADCSRA=0x83;
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 00A9 
; 0000 00AA // LCD module initialization
; 0000 00AB lcd_init(16);
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 00AC 
; 0000 00AD // Global enable interrupts
; 0000 00AE #asm("sei")
;PCODE: $0000021C VOL: 0
	sei
;PCODE: $0000021D VOL: 0
; 0000 00AF 
; 0000 00B0 while (1)
;PCODE: $0000021E VOL: 0
; 0000 00B1       {
; 0000 00B2       // Place your code here
; 0000 00B3       #include <while.c>
;//////////////////////////////////////////////////////////////////
;  //show_data=getchar();
;if ((STempEE!=32767)&&(EEPromOut==0)){
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;STemp = STempEE/100.00;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;EEPromOut=1;
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;}
;if ((STemp<-5.00)||(STempEE<-500)){STemp=-5.00;STempEE=-500;}
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;if ((STemp>30.00)||(STempEE>3000)){STemp=30.00;STempEE=30000;}
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;
;
;
;if ((Temp<Temp_min)&&(Temp!=0.00)){
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;Temp_min=Temp;
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;}
;
;
;//áåðåì ïàðàìåòðû
;if(Timer_read_adc_2==20){
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;adc[0]=read_adc(0);//÷òåíèå òåìïåðàòóðû
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;Temp=adc[0]/18.52631578;
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;}
;if(Timer_read_adc_2==22){
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;adc[1]=read_adc(1);//÷òåíèå CO
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;CO_sensor=adc[1];
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;}
;if(Timer_read_adc_2==44){
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;Timer_read_adc_2=0;   // îáíóëÿåì
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;}
;
;//STemp=adc[2]/42.625;
;
;
;
;
;
;
;if (Timer_LCD==250){
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;//îòîáðàæåíèå
;
;
;if (LCD_switch==1){
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;
;
;    Time_hour=Time_sec_all/60.0/60.0;
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;    Time_min=((Time_sec_all/60.0)-(Time_hour*60.0));
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;    Time_sec=((Time_sec_all)-((Time_min*60.0)+(Time_hour*60.0*60.0)));
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;
;sprintf(Temp_str, "T:%.1f", Temp);
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;sprintf(_NeedTemp," ST:%.1f",STemp);
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;sprintf(Time_str," time:%d",Time);
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;sprintf(_Time_hour,"%d:",Time_hour);
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;sprintf(_Time_min,"%d:",Time_min);
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;sprintf(_Time_sec,"%d",Time_sec);
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;//sprintf(_Temp_min,"min:%.1f",Temp_min);
;sprintf(_CO_sensor,"CO:%.1f",CO_sensor);
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;
;lcd_clear();
;PCODE: $00000307 VOL: 0
;lcd_gotoxy(0,0);
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;lcd_puts(Temp_str);
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;lcd_puts(_NeedTemp);
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;lcd_gotoxy(0,1);
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;lcd_puts(_Time_hour);
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;lcd_puts(_Time_min);
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;lcd_puts(_Time_sec);
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;lcd_gotoxy(7,1);
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;//lcd_puts(_Temp_min);
;lcd_puts(_CO_sensor);
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;}
;/////////////////////////////////////////////////////////////////////
;if (LCD_switch==200){
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;
;      while(j<12)
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;      {
;      lcd_gotoxy(j,0);
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;      sprintf(lcd_buffer,"%c",uart_data[j]);
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;      lcd_puts(lcd_buffer);
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;      j++;
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;      }
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;      j=0;
;PCODE: $00000340 VOL: 0
;
;      };
;PCODE: $00000341 VOL: 0
;//////////////////////////////////////////////////////////////////////////////
;//////////////////////////////////////////////////////////////////////////////
;//}
;Timer_LCD=0;
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;}
; 0000 00B4 
; 0000 00B5       };
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 00B6 }
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
