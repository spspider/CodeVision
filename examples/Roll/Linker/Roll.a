;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.4 Standard
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10.07.2010
;Author  :
;Company :
;Comments:
;
;
;Chip type           : ATmega8L
;Program type        : Application
;Clock frequency     : 8,000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;
;unsigned long int Timer_1;
;bit u1;
;unsigned char m1[6][6],roll;
;// Declare your global variables here
;
;#include <t_counter.c>
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;Timer_1++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;if ((PIND.2==1)&&(u1==1)){
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;roll=31115/Timer_1;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;printf("%d,",roll);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;Timer_1=u1=0;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;}
;if (PIND.2==0){u1=1;}
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;}
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;
;void main(void)
; 0000 0023 {
;PCODE: $0000003C VOL: 0
; 0000 0024 // Declare your local variables here
; 0000 0025 
; 0000 0026 // Input/Output Ports initialization
; 0000 0027 // Port B initialization
; 0000 0028 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0029 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 002A PORTB=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 002B DDRB=0xFF;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 002C 
; 0000 002D // Port C initialization
; 0000 002E // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 002F // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0030 PORTC=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0031 DDRC=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0032 
; 0000 0033 // Port D initialization
; 0000 0034 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0035 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0036 PORTD=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0037 DDRD=0b00000100;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0038 
; 0000 0039 // Timer/Counter 0 initialization
; 0000 003A // Clock source: System Clock
; 0000 003B // Clock value: Timer 0 Stopped
; 0000 003C TCCR0=0x01;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 003D TIMSK|=0x01;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 003E 
; 0000 003F UCSRA=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0040 UCSRB=0x18;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0041 UCSRC=0x86;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0042 UBRRH=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0043 UBRRL=0x33;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0044 
; 0000 0045 
; 0000 0046 ACSR=0x80;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0047 
; 0000 0048 #asm("sei")
;PCODE: $0000005B VOL: 0
	sei
;PCODE: $0000005C VOL: 0
; 0000 0049 
; 0000 004A 
; 0000 004B while (1)
;PCODE: $0000005D VOL: 0
; 0000 004C       {
; 0000 004D       // Place your code here
; 0000 004E 
; 0000 004F       };
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0050 }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
