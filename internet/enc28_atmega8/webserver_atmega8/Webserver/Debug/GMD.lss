
GMD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  000019d4  00001a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000211  008000f0  008000f0  00001af8  2**0
                  ALLOC
  3 .stab         00001d58  00000000  00000000  00001af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006b6  00000000  00000000  00003850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00003f08  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022fc  00000000  00000000  000040c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb9  00000000  00000000  000063c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013d9  00000000  00000000  0000707d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000728  00000000  00000000  00008458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e1  00000000  00000000  00008b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002045  00000000  00000000  00009461  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000b4a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	85 c0       	rjmp	.+266    	; 0x10c <__ctors_end>
       2:	9f c0       	rjmp	.+318    	; 0x142 <__bad_interrupt>
       4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
       6:	9d c0       	rjmp	.+314    	; 0x142 <__bad_interrupt>
       8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
       a:	9b c0       	rjmp	.+310    	; 0x142 <__bad_interrupt>
       c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
       e:	99 c0       	rjmp	.+306    	; 0x142 <__bad_interrupt>
      10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
      12:	97 c0       	rjmp	.+302    	; 0x142 <__bad_interrupt>
      14:	96 c0       	rjmp	.+300    	; 0x142 <__bad_interrupt>
      16:	95 c0       	rjmp	.+298    	; 0x142 <__bad_interrupt>
      18:	94 c0       	rjmp	.+296    	; 0x142 <__bad_interrupt>
      1a:	93 c0       	rjmp	.+294    	; 0x142 <__bad_interrupt>
      1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
      1e:	91 c0       	rjmp	.+290    	; 0x142 <__bad_interrupt>
      20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
      22:	8f c0       	rjmp	.+286    	; 0x142 <__bad_interrupt>
      24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>

00000026 <__c.2063>:
      26:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
      36:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
      46:	65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67 6d 61     ext/html..Pragma
      56:	3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 0d 0a 00        : no-cache.....

00000065 <__c.2065>:
      65:	3c 68 31 3e 32 30 30 20 4f 4b 3c 2f 68 31 3e 00     <h1>200 OK</h1>.

00000075 <__c.2068>:
      75:	48 54 54 50 2f 31 2e 30 20 32 30 30 20 4f 4b 0d     HTTP/1.0 200 OK.
      85:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
      95:	65 78 74 2f 68 74 6d 6c 0d 0a 50 72 61 67 6d 61     ext/html..Pragma
      a5:	3a 20 6e 6f 2d 63 61 63 68 65 0d 0a 0d 0a 00        : no-cache.....

000000b4 <__c.2071>:
      b4:	48 54 54 50 2f 31 2e 30 20 34 30 31 20 55 6e 61     HTTP/1.0 401 Una
      c4:	75 74 68 6f 72 69 7a 65 64 0d 0a 43 6f 6e 74 65     uthorized..Conte
      d4:	6e 74 2d 54 79 70 65 3a 20 74 65 78 74 2f 68 74     nt-Type: text/ht
      e4:	6d 6c 0d 0a 0d 0a 3c 68 31 3e 34 30 31 20 55 6e     ml....<h1>401 Un
      f4:	61 75 74 68 6f 72 69 7a 65 64 3c 2f 68 31 3e 00     authorized</h1>.

00000104 <arpreqhdr>:
     104:	00 01 08 00 06 04 00 01                             ........

0000010c <__ctors_end>:
     10c:	11 24       	eor	r1, r1
     10e:	1f be       	out	0x3f, r1	; 63
     110:	cf e5       	ldi	r28, 0x5F	; 95
     112:	d4 e0       	ldi	r29, 0x04	; 4
     114:	de bf       	out	0x3e, r29	; 62
     116:	cd bf       	out	0x3d, r28	; 61

00000118 <__do_copy_data>:
     118:	10 e0       	ldi	r17, 0x00	; 0
     11a:	a0 e6       	ldi	r26, 0x60	; 96
     11c:	b0 e0       	ldi	r27, 0x00	; 0
     11e:	e4 ed       	ldi	r30, 0xD4	; 212
     120:	f9 e1       	ldi	r31, 0x19	; 25
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x10>
     124:	05 90       	lpm	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	a0 3f       	cpi	r26, 0xF0	; 240
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0xc>

0000012e <__do_clear_bss>:
     12e:	13 e0       	ldi	r17, 0x03	; 3
     130:	a0 ef       	ldi	r26, 0xF0	; 240
     132:	b0 e0       	ldi	r27, 0x00	; 0
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
     138:	a1 30       	cpi	r26, 0x01	; 1
     13a:	b1 07       	cpc	r27, r17
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>
     13e:	0c d0       	rcall	.+24     	; 0x158 <main>
     140:	47 cc       	rjmp	.-1906   	; 0xfffff9d0 <__eeprom_end+0xff7ef9d0>

00000142 <__bad_interrupt>:
     142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <PingCallback>:


 

void PingCallback(uint8_t *ip) {
	nPingCount++;
     144:	80 91 f0 00 	lds	r24, 0x00F0
     148:	90 91 f1 00 	lds	r25, 0x00F1
     14c:	01 96       	adiw	r24, 0x01	; 1
     14e:	90 93 f1 00 	sts	0x00F1, r25
     152:	80 93 f0 00 	sts	0x00F0, r24
}
     156:	08 95       	ret

00000158 <main>:


/*
 * Main entry point
 */
int main(void) {
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	c2 58       	subi	r28, 0x82	; 130
     162:	d0 40       	sbci	r29, 0x00	; 0
     164:	0f b6       	in	r0, 0x3f	; 63
     166:	f8 94       	cli
     168:	de bf       	out	0x3e, r29	; 62
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	cd bf       	out	0x3d, r28	; 61
	
	//=====init green led	
	LEDInit();
     16e:	c7 d0       	rcall	.+398    	; 0x2fe <LEDInit>

	//=====setup eth interface
	uint16_t plen = 0,  dat_p = 0;
	//initialize enc28j60
    enc28j60Init(mymac);
     170:	04 ee       	ldi	r16, 0xE4	; 228
     172:	10 e0       	ldi	r17, 0x00	; 0
     174:	c8 01       	movw	r24, r16
     176:	99 d1       	rcall	.+818    	; 0x4aa <enc28j60Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     178:	8f ef       	ldi	r24, 0xFF	; 255
     17a:	91 ee       	ldi	r25, 0xE1	; 225
     17c:	a4 e0       	ldi	r26, 0x04	; 4
     17e:	81 50       	subi	r24, 0x01	; 1
     180:	90 40       	sbci	r25, 0x00	; 0
     182:	a0 40       	sbci	r26, 0x00	; 0
     184:	e1 f7       	brne	.-8      	; 0x17e <main+0x26>
     186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x30>
     188:	00 00       	nop
        
    // Magjack leds configuration, see enc28j60 datasheet, page 11 
    // LEDB=yellow LEDA=green
    // 0x476 is PHLCON LEDA=links status, LEDB=receive/transmit
    // enc28j60PhyWrite(PHLCON,0b0000 0100 0111 01 10);
	enc28j60PhyWrite(PHLCON,0x476);
     18a:	84 e1       	ldi	r24, 0x14	; 20
     18c:	66 e7       	ldi	r22, 0x76	; 118
     18e:	74 e0       	ldi	r23, 0x04	; 4
     190:	6d d1       	rcall	.+730    	; 0x46c <enc28j60PhyWrite>
     192:	8f ef       	ldi	r24, 0xFF	; 255
     194:	91 ee       	ldi	r25, 0xE1	; 225
     196:	a4 e0       	ldi	r26, 0x04	; 4
     198:	81 50       	subi	r24, 0x01	; 1
     19a:	90 40       	sbci	r25, 0x00	; 0
     19c:	a0 40       	sbci	r26, 0x00	; 0
     19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x40>
     1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x4a>
     1a2:	00 00       	nop
	

	_delay_ms(100);

	//init the ethernet/ip layer:
	init_udp_or_www_server(mymac,myip);
     1a4:	c8 01       	movw	r24, r16
     1a6:	6a ee       	ldi	r22, 0xEA	; 234
     1a8:	70 e0       	ldi	r23, 0x00	; 0
     1aa:	8b d5       	rcall	.+2838   	; 0xcc2 <init_udp_or_www_server>
	www_server_port(MYWWWPORT);
     1ac:	80 e5       	ldi	r24, 0x50	; 80
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	9c d5       	rcall	.+2872   	; 0xcea <www_server_port>
	register_ping_rec_callback(PingCallback);
     1b2:	82 ea       	ldi	r24, 0xA2	; 162
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	e8 d5       	rcall	.+3024   	; 0xd88 <register_ping_rec_callback>


	while(1){
	
		// handle ping and wait for a tcp packet:
		dat_p=packetloop_arp_icmp_tcp(buf,enc28j60PacketReceive(BUFFER_SIZE, buf));
     1b8:	0f 2e       	mov	r0, r31
     1ba:	f2 ef       	ldi	r31, 0xF2	; 242
     1bc:	ef 2e       	mov	r14, r31
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	ff 2e       	mov	r15, r31
     1c2:	f0 2d       	mov	r31, r0
		if(dat_p==0){
		    // do nothing
		    continue;
		}
	    // tcp port 80 begin
	    if (strncmp("GET ",(char *)&(buf[dat_p]),4)!=0){
     1c4:	0f 2e       	mov	r0, r31
     1c6:	f0 e6       	ldi	r31, 0x60	; 96
     1c8:	af 2e       	mov	r10, r31
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	bf 2e       	mov	r11, r31
     1ce:	f0 2d       	mov	r31, r0
		    dat_p=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
		    dat_p=fill_tcp_data_p(buf,dat_p,PSTR("<h1>200 OK</h1>"));
			goto SENDTCP;
	    }
	    if (strncmp("/ ",(char *)&(buf[dat_p+4]),2)==0){
     1d0:	0f 2e       	mov	r0, r31
     1d2:	f5 e6       	ldi	r31, 0x65	; 101
     1d4:	8f 2e       	mov	r8, r31
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	9f 2e       	mov	r9, r31
     1da:	f0 2d       	mov	r31, r0
		    dat_p=fill_tcp_data(buf,dat_p,szWebText);
			 //
		    goto SENDTCP;
		}
	    // all other URLs:
	    dat_p=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 401 Unauthorized\r\nContent-Type: text/html\r\n\r\n<h1>401 Unauthorized</h1>"));
     1dc:	0f 2e       	mov	r0, r31
     1de:	f4 eb       	ldi	r31, 0xB4	; 180
     1e0:	4f 2e       	mov	r4, r31
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	5f 2e       	mov	r5, r31
     1e6:	f0 2d       	mov	r31, r0
		    dat_p=fill_tcp_data_p(buf,dat_p,PSTR("<h1>200 OK</h1>"));
			goto SENDTCP;
	    }
	    if (strncmp("/ ",(char *)&(buf[dat_p+4]),2)==0){
			nAccessCount++;
		    dat_p=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
     1e8:	0f 2e       	mov	r0, r31
     1ea:	f5 e7       	ldi	r31, 0x75	; 117
     1ec:	2f 2e       	mov	r2, r31
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	3f 2e       	mov	r3, r31
     1f2:	f0 2d       	mov	r31, r0
			// webcontent
			char szWebText[130] = {0};
     1f4:	0f 2e       	mov	r0, r31
     1f6:	f2 e8       	ldi	r31, 0x82	; 130
     1f8:	7f 2e       	mov	r7, r31
     1fa:	f0 2d       	mov	r31, r0
     1fc:	6e 01       	movw	r12, r28
     1fe:	08 94       	sec
     200:	c1 1c       	adc	r12, r1
     202:	d1 1c       	adc	r13, r1


	while(1){
	
		// handle ping and wait for a tcp packet:
		dat_p=packetloop_arp_icmp_tcp(buf,enc28j60PacketReceive(BUFFER_SIZE, buf));
     204:	84 ef       	ldi	r24, 0xF4	; 244
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	b7 01       	movw	r22, r14
     20a:	2d d2       	rcall	.+1114   	; 0x666 <enc28j60PacketReceive>
     20c:	bc 01       	movw	r22, r24
     20e:	c7 01       	movw	r24, r14
     210:	c0 d5       	rcall	.+2944   	; 0xd92 <packetloop_arp_icmp_tcp>
     212:	8c 01       	movw	r16, r24

		// dat_p will be unequal to zero if there is a valid http get
		if(dat_p==0){
     214:	00 97       	sbiw	r24, 0x00	; 0
     216:	b1 f3       	breq	.-20     	; 0x204 <main+0xac>
		    // do nothing
		    continue;
		}
	    // tcp port 80 begin
	    if (strncmp("GET ",(char *)&(buf[dat_p]),4)!=0){
     218:	bc 01       	movw	r22, r24
     21a:	6e 50       	subi	r22, 0x0E	; 14
     21c:	7f 4f       	sbci	r23, 0xFF	; 255
     21e:	c5 01       	movw	r24, r10
     220:	44 e0       	ldi	r20, 0x04	; 4
     222:	50 e0       	ldi	r21, 0x00	; 0
     224:	02 d9       	rcall	.-3580   	; 0xfffff42a <__eeprom_end+0xff7ef42a>
     226:	28 2f       	mov	r18, r24
     228:	39 2f       	mov	r19, r25
     22a:	21 15       	cp	r18, r1
     22c:	31 05       	cpc	r19, r1
     22e:	69 f0       	breq	.+26     	; 0x24a <main+0xf2>
		    dat_p=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
     230:	c7 01       	movw	r24, r14
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	46 e2       	ldi	r20, 0x26	; 38
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	61 d4       	rcall	.+2242   	; 0xafe <fill_tcp_data_p>
     23c:	bc 01       	movw	r22, r24
		    dat_p=fill_tcp_data_p(buf,dat_p,PSTR("<h1>200 OK</h1>"));
     23e:	c7 01       	movw	r24, r14
     240:	45 e6       	ldi	r20, 0x65	; 101
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	5c d4       	rcall	.+2232   	; 0xafe <fill_tcp_data_p>
     246:	bc 01       	movw	r22, r24
			goto SENDTCP;
     248:	57 c0       	rjmp	.+174    	; 0x2f8 <main+0x1a0>
	    }
	    if (strncmp("/ ",(char *)&(buf[dat_p+4]),2)==0){
     24a:	b8 01       	movw	r22, r16
     24c:	6a 50       	subi	r22, 0x0A	; 10
     24e:	7f 4f       	sbci	r23, 0xFF	; 255
     250:	c4 01       	movw	r24, r8
     252:	42 e0       	ldi	r20, 0x02	; 2
     254:	50 e0       	ldi	r21, 0x00	; 0
     256:	e9 d8       	rcall	.-3630   	; 0xfffff42a <__eeprom_end+0xff7ef42a>
     258:	28 2f       	mov	r18, r24
     25a:	39 2f       	mov	r19, r25
     25c:	21 15       	cp	r18, r1
     25e:	31 05       	cpc	r19, r1
     260:	09 f0       	breq	.+2      	; 0x264 <main+0x10c>
     262:	44 c0       	rjmp	.+136    	; 0x2ec <main+0x194>
			nAccessCount++;
     264:	80 91 e7 02 	lds	r24, 0x02E7
     268:	90 91 e8 02 	lds	r25, 0x02E8
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	90 93 e8 02 	sts	0x02E8, r25
     272:	80 93 e7 02 	sts	0x02E7, r24
		    dat_p=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n"));
     276:	c7 01       	movw	r24, r14
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	70 e0       	ldi	r23, 0x00	; 0
     27c:	a1 01       	movw	r20, r2
     27e:	3f d4       	rcall	.+2174   	; 0xafe <fill_tcp_data_p>
     280:	8c 01       	movw	r16, r24
			// webcontent
			char szWebText[130] = {0};
     282:	d6 01       	movw	r26, r12
     284:	e7 2d       	mov	r30, r7
     286:	1d 92       	st	X+, r1
     288:	ea 95       	dec	r30
     28a:	e9 f7       	brne	.-6      	; 0x286 <main+0x12e>
			sprintf(szWebText, 
     28c:	8d b7       	in	r24, 0x3d	; 61
     28e:	9e b7       	in	r25, 0x3e	; 62
     290:	08 97       	sbiw	r24, 0x08	; 8
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	9e bf       	out	0x3e, r25	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	8d bf       	out	0x3d, r24	; 61
     29c:	ed b7       	in	r30, 0x3d	; 61
     29e:	fe b7       	in	r31, 0x3e	; 62
     2a0:	31 96       	adiw	r30, 0x01	; 1
     2a2:	ad b7       	in	r26, 0x3d	; 61
     2a4:	be b7       	in	r27, 0x3e	; 62
     2a6:	12 96       	adiw	r26, 0x02	; 2
     2a8:	dc 92       	st	X, r13
     2aa:	ce 92       	st	-X, r12
     2ac:	11 97       	sbiw	r26, 0x01	; 1
     2ae:	88 e6       	ldi	r24, 0x68	; 104
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	93 83       	std	Z+3, r25	; 0x03
     2b4:	82 83       	std	Z+2, r24	; 0x02
     2b6:	80 91 e7 02 	lds	r24, 0x02E7
     2ba:	90 91 e8 02 	lds	r25, 0x02E8
     2be:	95 83       	std	Z+5, r25	; 0x05
     2c0:	84 83       	std	Z+4, r24	; 0x04
     2c2:	80 91 f0 00 	lds	r24, 0x00F0
     2c6:	90 91 f1 00 	lds	r25, 0x00F1
     2ca:	97 83       	std	Z+7, r25	; 0x07
     2cc:	86 83       	std	Z+6, r24	; 0x06
     2ce:	bb d8       	rcall	.-3722   	; 0xfffff446 <__eeprom_end+0xff7ef446>
				"<b>ATmega8 Webserver / ENC28J60</b><br><br>Server stats:<br>Acc:%d Png:%d<br><br>(C) Radu Motisan 2012, www.pocketmagic.net",
				nAccessCount, nPingCount);
		    dat_p=fill_tcp_data(buf,dat_p,szWebText);
     2d0:	ad b7       	in	r26, 0x3d	; 61
     2d2:	be b7       	in	r27, 0x3e	; 62
     2d4:	18 96       	adiw	r26, 0x08	; 8
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	be bf       	out	0x3e, r27	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	ad bf       	out	0x3d, r26	; 61
     2e0:	c7 01       	movw	r24, r14
     2e2:	b8 01       	movw	r22, r16
     2e4:	a6 01       	movw	r20, r12
     2e6:	39 d4       	rcall	.+2162   	; 0xb5a <fill_tcp_data>
     2e8:	bc 01       	movw	r22, r24
			 //
		    goto SENDTCP;
     2ea:	06 c0       	rjmp	.+12     	; 0x2f8 <main+0x1a0>
		}
	    // all other URLs:
	    dat_p=fill_tcp_data_p(buf,0,PSTR("HTTP/1.0 401 Unauthorized\r\nContent-Type: text/html\r\n\r\n<h1>401 Unauthorized</h1>"));
     2ec:	c7 01       	movw	r24, r14
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	a2 01       	movw	r20, r4
     2f4:	04 d4       	rcall	.+2056   	; 0xafe <fill_tcp_data_p>
     2f6:	bc 01       	movw	r22, r24
	    SENDTCP:
	    www_server_reply(buf,dat_p); // send web page data
     2f8:	c7 01       	movw	r24, r14
     2fa:	30 d5       	rcall	.+2656   	; 0xd5c <www_server_reply>
     2fc:	83 cf       	rjmp	.-250    	; 0x204 <main+0xac>

000002fe <LEDInit>:
#include "led.h"

int led_state = 0;
int LEDInit()
{
	LED_OUTPUT_MODE();
     2fe:	8f 9a       	sbi	0x11, 7	; 17
	
	return 1;
}
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	08 95       	ret

00000306 <LEDSet>:

//--------------------------------------------------------------------------------------------
// set led on off
int LEDSet(int st)	
{
	led_state = st;
     306:	90 93 ea 02 	sts	0x02EA, r25
     30a:	80 93 e9 02 	sts	0x02E9, r24
	if (st) 
     30e:	00 97       	sbiw	r24, 0x00	; 0
     310:	11 f0       	breq	.+4      	; 0x316 <LEDSet+0x10>
		LED_HIGH(); 
     312:	97 9a       	sbi	0x12, 7	; 18
     314:	01 c0       	rjmp	.+2      	; 0x318 <LEDSet+0x12>
	else 
		LED_LOW();
     316:	97 98       	cbi	0x12, 7	; 18
	return 1;
}
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	08 95       	ret

0000031e <LEDToggle>:

void LEDToggle() {
	if (led_state) LEDSet(0); else LEDSet(1);
     31e:	80 91 e9 02 	lds	r24, 0x02E9
     322:	90 91 ea 02 	lds	r25, 0x02EA
     326:	00 97       	sbiw	r24, 0x00	; 0
     328:	21 f0       	breq	.+8      	; 0x332 <LEDToggle+0x14>
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	eb df       	rcall	.-42     	; 0x306 <LEDSet>
     330:	08 95       	ret
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	e7 df       	rcall	.-50     	; 0x306 <LEDSet>
     338:	08 95       	ret

0000033a <enc28j60ReadOp>:
//
#define waitspi() while(!(SPSR&(1<<SPIF)))

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
        CSACTIVE;
     33a:	ad 98       	cbi	0x15, 5	; 21
        // issue read command
        SPDR = op | (address & ADDR_MASK);
     33c:	96 2f       	mov	r25, r22
     33e:	6f 71       	andi	r22, 0x1F	; 31
     340:	68 2b       	or	r22, r24
     342:	6f b9       	out	0x0f, r22	; 15
        waitspi();
     344:	77 9b       	sbis	0x0e, 7	; 14
     346:	fe cf       	rjmp	.-4      	; 0x344 <enc28j60ReadOp+0xa>
        // read data
        SPDR = 0x00;
     348:	1f b8       	out	0x0f, r1	; 15
        waitspi();
     34a:	77 9b       	sbis	0x0e, 7	; 14
     34c:	fe cf       	rjmp	.-4      	; 0x34a <enc28j60ReadOp+0x10>
        // do dummy read if needed (for mac and mii, see datasheet page 29)
        if(address & 0x80)
     34e:	99 23       	and	r25, r25
     350:	1c f4       	brge	.+6      	; 0x358 <enc28j60ReadOp+0x1e>
        {
                SPDR = 0x00;
     352:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     354:	77 9b       	sbis	0x0e, 7	; 14
     356:	fe cf       	rjmp	.-4      	; 0x354 <enc28j60ReadOp+0x1a>
        }
        // release CS
        CSPASSIVE;
     358:	ad 9a       	sbi	0x15, 5	; 21
        return(SPDR);
     35a:	8f b1       	in	r24, 0x0f	; 15
}
     35c:	08 95       	ret

0000035e <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
        CSACTIVE;
     35e:	ad 98       	cbi	0x15, 5	; 21
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     360:	6f 71       	andi	r22, 0x1F	; 31
     362:	68 2b       	or	r22, r24
     364:	6f b9       	out	0x0f, r22	; 15
        waitspi();
     366:	77 9b       	sbis	0x0e, 7	; 14
     368:	fe cf       	rjmp	.-4      	; 0x366 <enc28j60WriteOp+0x8>
        // write data
        SPDR = data;
     36a:	4f b9       	out	0x0f, r20	; 15
        waitspi();
     36c:	77 9b       	sbis	0x0e, 7	; 14
     36e:	fe cf       	rjmp	.-4      	; 0x36c <enc28j60WriteOp+0xe>
        CSPASSIVE;
     370:	ad 9a       	sbi	0x15, 5	; 21
}
     372:	08 95       	ret

00000374 <enc28j60ReadBuffer>:

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
     374:	9c 01       	movw	r18, r24
        CSACTIVE;
     376:	ad 98       	cbi	0x15, 5	; 21
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
     378:	8a e3       	ldi	r24, 0x3A	; 58
     37a:	8f b9       	out	0x0f, r24	; 15
        waitspi();
     37c:	77 9b       	sbis	0x0e, 7	; 14
     37e:	fe cf       	rjmp	.-4      	; 0x37c <enc28j60ReadBuffer+0x8>
        while(len)
     380:	21 15       	cp	r18, r1
     382:	31 05       	cpc	r19, r1
     384:	61 f0       	breq	.+24     	; 0x39e <enc28j60ReadBuffer+0x2a>
     386:	fb 01       	movw	r30, r22
     388:	c9 01       	movw	r24, r18
        {
                len--;
     38a:	01 97       	sbiw	r24, 0x01	; 1
                // read data
                SPDR = 0x00;
     38c:	1f b8       	out	0x0f, r1	; 15
                waitspi();
     38e:	77 9b       	sbis	0x0e, 7	; 14
     390:	fe cf       	rjmp	.-4      	; 0x38e <enc28j60ReadBuffer+0x1a>
                *data = SPDR;
     392:	4f b1       	in	r20, 0x0f	; 15
     394:	41 93       	st	Z+, r20
{
        CSACTIVE;
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
     396:	00 97       	sbiw	r24, 0x00	; 0
     398:	c1 f7       	brne	.-16     	; 0x38a <enc28j60ReadBuffer+0x16>
     39a:	62 0f       	add	r22, r18
     39c:	73 1f       	adc	r23, r19
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
                data++;
        }
        *data='\0';
     39e:	fb 01       	movw	r30, r22
     3a0:	10 82       	st	Z, r1
        CSPASSIVE;
     3a2:	ad 9a       	sbi	0x15, 5	; 21
}
     3a4:	08 95       	ret

000003a6 <enc28j60WriteBuffer>:

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
     3a6:	fb 01       	movw	r30, r22
        CSACTIVE;
     3a8:	ad 98       	cbi	0x15, 5	; 21
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     3aa:	2a e7       	ldi	r18, 0x7A	; 122
     3ac:	2f b9       	out	0x0f, r18	; 15
        waitspi();
     3ae:	77 9b       	sbis	0x0e, 7	; 14
     3b0:	fe cf       	rjmp	.-4      	; 0x3ae <enc28j60WriteBuffer+0x8>
     3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <enc28j60WriteBuffer+0x1a>
        while(len)
        {
                len--;
     3b4:	01 97       	sbiw	r24, 0x01	; 1
                // write data
                SPDR = *data;
     3b6:	21 91       	ld	r18, Z+
     3b8:	2f b9       	out	0x0f, r18	; 15
                data++;
                waitspi();
     3ba:	77 9b       	sbis	0x0e, 7	; 14
     3bc:	fe cf       	rjmp	.-4      	; 0x3ba <enc28j60WriteBuffer+0x14>
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <enc28j60WriteBuffer+0x20>
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     3c0:	00 97       	sbiw	r24, 0x00	; 0
     3c2:	c1 f7       	brne	.-16     	; 0x3b4 <enc28j60WriteBuffer+0xe>
     3c4:	02 c0       	rjmp	.+4      	; 0x3ca <enc28j60WriteBuffer+0x24>
     3c6:	00 97       	sbiw	r24, 0x00	; 0
     3c8:	a9 f7       	brne	.-22     	; 0x3b4 <enc28j60WriteBuffer+0xe>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     3ca:	ad 9a       	sbi	0x15, 5	; 21
}
     3cc:	08 95       	ret

000003ce <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	18 2f       	mov	r17, r24
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
     3d6:	c8 2f       	mov	r28, r24
     3d8:	d0 e0       	ldi	r29, 0x00	; 0
     3da:	c0 76       	andi	r28, 0x60	; 96
     3dc:	d0 70       	andi	r29, 0x00	; 0
     3de:	80 91 eb 02 	lds	r24, 0x02EB
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	c8 17       	cp	r28, r24
     3e6:	d9 07       	cpc	r29, r25
     3e8:	a9 f0       	breq	.+42     	; 0x414 <enc28j60SetBank+0x46>
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
     3ea:	80 ea       	ldi	r24, 0xA0	; 160
     3ec:	6f e1       	ldi	r22, 0x1F	; 31
     3ee:	43 e0       	ldi	r20, 0x03	; 3
     3f0:	b6 df       	rcall	.-148    	; 0x35e <enc28j60WriteOp>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
     3f2:	ae 01       	movw	r20, r28
     3f4:	55 95       	asr	r21
     3f6:	47 95       	ror	r20
     3f8:	55 95       	asr	r21
     3fa:	47 95       	ror	r20
     3fc:	55 95       	asr	r21
     3fe:	47 95       	ror	r20
     400:	55 95       	asr	r21
     402:	47 95       	ror	r20
     404:	55 95       	asr	r21
     406:	47 95       	ror	r20
     408:	80 e8       	ldi	r24, 0x80	; 128
     40a:	6f e1       	ldi	r22, 0x1F	; 31
     40c:	a8 df       	rcall	.-176    	; 0x35e <enc28j60WriteOp>
                Enc28j60Bank = (address & BANK_MASK);
     40e:	10 76       	andi	r17, 0x60	; 96
     410:	10 93 eb 02 	sts	0x02EB, r17
        }
}
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	1f 91       	pop	r17
     41a:	08 95       	ret

0000041c <enc28j60Read>:

uint8_t enc28j60Read(uint8_t address)
{
     41c:	cf 93       	push	r28
     41e:	c8 2f       	mov	r28, r24
        // set the bank
        enc28j60SetBank(address);
     420:	d6 df       	rcall	.-84     	; 0x3ce <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	6c 2f       	mov	r22, r28
     426:	89 df       	rcall	.-238    	; 0x33a <enc28j60ReadOp>
}
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <enc28j60Write>:
	
	return (enc28j60Read(MIRDH));
}

void enc28j60Write(uint8_t address, uint8_t data)
{
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	c8 2f       	mov	r28, r24
     432:	d6 2f       	mov	r29, r22
        // set the bank
        enc28j60SetBank(address);
     434:	cc df       	rcall	.-104    	; 0x3ce <enc28j60SetBank>
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
     436:	80 e4       	ldi	r24, 0x40	; 64
     438:	6c 2f       	mov	r22, r28
     43a:	4d 2f       	mov	r20, r29
     43c:	90 df       	rcall	.-224    	; 0x35e <enc28j60WriteOp>
}
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <enc28j60PhyReadH>:
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
}

// read upper 8 bits
uint16_t enc28j60PhyReadH(uint8_t address)
{
     444:	68 2f       	mov	r22, r24

	// Set the right address and start the register read operation
	enc28j60Write(MIREGADR, address);
     446:	84 ed       	ldi	r24, 0xD4	; 212
     448:	f1 df       	rcall	.-30     	; 0x42c <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
     44a:	82 ed       	ldi	r24, 0xD2	; 210
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	ee df       	rcall	.-36     	; 0x42c <enc28j60Write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     450:	88 e2       	ldi	r24, 0x28	; 40
     452:	8a 95       	dec	r24
     454:	f1 f7       	brne	.-4      	; 0x452 <enc28j60PhyReadH+0xe>
        _delay_loop_1(40); // 10us

	// wait until the PHY read completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
     456:	8a ee       	ldi	r24, 0xEA	; 234
     458:	e1 df       	rcall	.-62     	; 0x41c <enc28j60Read>
     45a:	80 fd       	sbrc	r24, 0
     45c:	fc cf       	rjmp	.-8      	; 0x456 <enc28j60PhyReadH+0x12>

	// reset reading bit
	enc28j60Write(MICMD, 0x00);
     45e:	82 ed       	ldi	r24, 0xD2	; 210
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	e4 df       	rcall	.-56     	; 0x42c <enc28j60Write>
	
	return (enc28j60Read(MIRDH));
     464:	89 ed       	ldi	r24, 0xD9	; 217
     466:	da df       	rcall	.-76     	; 0x41c <enc28j60Read>
}
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	08 95       	ret

0000046c <enc28j60PhyWrite>:
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
}

void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
     46c:	cf 93       	push	r28
     46e:	df 93       	push	r29
     470:	98 2f       	mov	r25, r24
     472:	d6 2f       	mov	r29, r22
     474:	c7 2f       	mov	r28, r23
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
     476:	84 ed       	ldi	r24, 0xD4	; 212
     478:	69 2f       	mov	r22, r25
     47a:	d8 df       	rcall	.-80     	; 0x42c <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
     47c:	86 ed       	ldi	r24, 0xD6	; 214
     47e:	6d 2f       	mov	r22, r29
     480:	d5 df       	rcall	.-86     	; 0x42c <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
     482:	87 ed       	ldi	r24, 0xD7	; 215
     484:	6c 2f       	mov	r22, r28
     486:	d2 df       	rcall	.-92     	; 0x42c <enc28j60Write>
     488:	c8 e2       	ldi	r28, 0x28	; 40
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
     48a:	03 c0       	rjmp	.+6      	; 0x492 <enc28j60PhyWrite+0x26>
     48c:	8c 2f       	mov	r24, r28
     48e:	8a 95       	dec	r24
     490:	f1 f7       	brne	.-4      	; 0x48e <enc28j60PhyWrite+0x22>
     492:	8a ee       	ldi	r24, 0xEA	; 234
     494:	c3 df       	rcall	.-122    	; 0x41c <enc28j60Read>
     496:	80 fd       	sbrc	r24, 0
     498:	f9 cf       	rjmp	.-14     	; 0x48c <enc28j60PhyWrite+0x20>
                _delay_loop_1(40); // 10us
        }
}
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	08 95       	ret

000004a0 <enc28j60clkout>:

void enc28j60clkout(uint8_t clk)
{
        //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
     4a0:	68 2f       	mov	r22, r24
     4a2:	67 70       	andi	r22, 0x07	; 7
     4a4:	85 e7       	ldi	r24, 0x75	; 117
     4a6:	c2 df       	rcall	.-124    	; 0x42c <enc28j60Write>
}
     4a8:	08 95       	ret

000004aa <enc28j60Init>:

void enc28j60Init(uint8_t* macaddr)
{
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	ec 01       	movw	r28, r24
	// initialize I/O
        // ss as output:
	ENC28J60_CS_DDR |= 1<<ENC28J60_CS_PIN;
     4b0:	a5 9a       	sbi	0x14, 5	; 20
	CSPASSIVE; // ss=0
     4b2:	ad 9a       	sbi	0x15, 5	; 21
        //	
	ENC28J60_CONTROL_DDR  |= 1<<ENC28J60_CONTROL_SI | 1<<ENC28J60_CONTROL_SCK; // mosi, sck output
     4b4:	87 b3       	in	r24, 0x17	; 23
     4b6:	88 62       	ori	r24, 0x28	; 40
     4b8:	87 bb       	out	0x17, r24	; 23
	ENC28J60_CONTROL_DDR|= 1<<ENC28J60_CONTROL_SO; // MISO is input
     4ba:	bc 9a       	sbi	0x17, 4	; 23
        //
        ENC28J60_CONTROL_PORT|= 1<<ENC28J60_CONTROL_SI; // MOSI low
     4bc:	c3 9a       	sbi	0x18, 3	; 24
        ENC28J60_CONTROL_PORT|= 1<<ENC28J60_CONTROL_SCK; // SCK low
     4be:	c5 9a       	sbi	0x18, 5	; 24
	//
	// initialize SPI interface
	// master mode and Fosc/2 clock:
        SPCR = (1<<SPE)|(1<<MSTR);
     4c0:	80 e5       	ldi	r24, 0x50	; 80
     4c2:	8d b9       	out	0x0d, r24	; 13
        SPSR |= (1<<SPI2X);
     4c4:	70 9a       	sbi	0x0e, 0	; 14
	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	4f ef       	ldi	r20, 0xFF	; 255
     4cc:	48 df       	rcall	.-368    	; 0x35e <enc28j60WriteOp>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <enc28j60Init+0x28>
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	gNextPacketPtr = RXSTART_INIT;
     4d6:	10 92 ed 02 	sts	0x02ED, r1
     4da:	10 92 ec 02 	sts	0x02EC, r1
        // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
     4de:	88 e0       	ldi	r24, 0x08	; 8
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	a4 df       	rcall	.-184    	; 0x42c <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
     4e4:	89 e0       	ldi	r24, 0x09	; 9
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	a1 df       	rcall	.-190    	; 0x42c <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
     4ea:	8c e0       	ldi	r24, 0x0C	; 12
     4ec:	60 e0       	ldi	r22, 0x00	; 0
     4ee:	9e df       	rcall	.-196    	; 0x42c <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
     4f0:	8d e0       	ldi	r24, 0x0D	; 13
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	9b df       	rcall	.-202    	; 0x42c <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
     4f6:	8a e0       	ldi	r24, 0x0A	; 10
     4f8:	6f ef       	ldi	r22, 0xFF	; 255
     4fa:	98 df       	rcall	.-208    	; 0x42c <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
     4fc:	8b e0       	ldi	r24, 0x0B	; 11
     4fe:	69 e1       	ldi	r22, 0x19	; 25
     500:	95 df       	rcall	.-214    	; 0x42c <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
     502:	84 e0       	ldi	r24, 0x04	; 4
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	92 df       	rcall	.-220    	; 0x42c <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
     508:	85 e0       	ldi	r24, 0x05	; 5
     50a:	6a e1       	ldi	r22, 0x1A	; 26
     50c:	8f df       	rcall	.-226    	; 0x42c <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
     50e:	86 e0       	ldi	r24, 0x06	; 6
     510:	6f ef       	ldi	r22, 0xFF	; 255
     512:	8c df       	rcall	.-232    	; 0x42c <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
     514:	87 e0       	ldi	r24, 0x07	; 7
     516:	6f e1       	ldi	r22, 0x1F	; 31
     518:	89 df       	rcall	.-238    	; 0x42c <enc28j60Write>
        // Type     ETH.DST
        // ARP      BROADCAST
        // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
        // in binary these poitions are:11 0000 0011 1111
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
     51a:	88 e3       	ldi	r24, 0x38	; 56
     51c:	60 eb       	ldi	r22, 0xB0	; 176
     51e:	86 df       	rcall	.-244    	; 0x42c <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
     520:	88 e2       	ldi	r24, 0x28	; 40
     522:	6f e3       	ldi	r22, 0x3F	; 63
     524:	83 df       	rcall	.-250    	; 0x42c <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
     526:	89 e2       	ldi	r24, 0x29	; 41
     528:	60 e3       	ldi	r22, 0x30	; 48
     52a:	80 df       	rcall	.-256    	; 0x42c <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
     52c:	80 e3       	ldi	r24, 0x30	; 48
     52e:	69 ef       	ldi	r22, 0xF9	; 249
     530:	7d df       	rcall	.-262    	; 0x42c <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
     532:	81 e3       	ldi	r24, 0x31	; 49
     534:	67 ef       	ldi	r22, 0xF7	; 247
     536:	7a df       	rcall	.-268    	; 0x42c <enc28j60Write>
        //
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     538:	80 ec       	ldi	r24, 0xC0	; 192
     53a:	6d e0       	ldi	r22, 0x0D	; 13
     53c:	77 df       	rcall	.-274    	; 0x42c <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
     53e:	81 ec       	ldi	r24, 0xC1	; 193
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	74 df       	rcall	.-280    	; 0x42c <enc28j60Write>
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     544:	80 e8       	ldi	r24, 0x80	; 128
     546:	62 ec       	ldi	r22, 0xC2	; 194
     548:	42 e3       	ldi	r20, 0x32	; 50
     54a:	09 df       	rcall	.-494    	; 0x35e <enc28j60WriteOp>
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
     54c:	86 ec       	ldi	r24, 0xC6	; 198
     54e:	62 e1       	ldi	r22, 0x12	; 18
     550:	6d df       	rcall	.-294    	; 0x42c <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
     552:	87 ec       	ldi	r24, 0xC7	; 199
     554:	6c e0       	ldi	r22, 0x0C	; 12
     556:	6a df       	rcall	.-300    	; 0x42c <enc28j60Write>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
     558:	84 ec       	ldi	r24, 0xC4	; 196
     55a:	62 e1       	ldi	r22, 0x12	; 18
     55c:	67 df       	rcall	.-306    	; 0x42c <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
     55e:	8a ec       	ldi	r24, 0xCA	; 202
     560:	6c ed       	ldi	r22, 0xDC	; 220
     562:	64 df       	rcall	.-312    	; 0x42c <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
     564:	8b ec       	ldi	r24, 0xCB	; 203
     566:	65 e0       	ldi	r22, 0x05	; 5
     568:	61 df       	rcall	.-318    	; 0x42c <enc28j60Write>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
     56a:	84 ee       	ldi	r24, 0xE4	; 228
     56c:	68 81       	ld	r22, Y
     56e:	5e df       	rcall	.-324    	; 0x42c <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
     570:	85 ee       	ldi	r24, 0xE5	; 229
     572:	69 81       	ldd	r22, Y+1	; 0x01
     574:	5b df       	rcall	.-330    	; 0x42c <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
     576:	82 ee       	ldi	r24, 0xE2	; 226
     578:	6a 81       	ldd	r22, Y+2	; 0x02
     57a:	58 df       	rcall	.-336    	; 0x42c <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
     57c:	83 ee       	ldi	r24, 0xE3	; 227
     57e:	6b 81       	ldd	r22, Y+3	; 0x03
     580:	55 df       	rcall	.-342    	; 0x42c <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
     582:	80 ee       	ldi	r24, 0xE0	; 224
     584:	6c 81       	ldd	r22, Y+4	; 0x04
     586:	52 df       	rcall	.-348    	; 0x42c <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
     588:	81 ee       	ldi	r24, 0xE1	; 225
     58a:	6d 81       	ldd	r22, Y+5	; 0x05
     58c:	4f df       	rcall	.-354    	; 0x42c <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
     58e:	80 e1       	ldi	r24, 0x10	; 16
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	71 e0       	ldi	r23, 0x01	; 1
     594:	6b df       	rcall	.-298    	; 0x46c <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
     596:	8f e1       	ldi	r24, 0x1F	; 31
     598:	1a df       	rcall	.-460    	; 0x3ce <enc28j60SetBank>
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     59a:	80 e8       	ldi	r24, 0x80	; 128
     59c:	6b e1       	ldi	r22, 0x1B	; 27
     59e:	40 ec       	ldi	r20, 0xC0	; 192
     5a0:	de de       	rcall	.-580    	; 0x35e <enc28j60WriteOp>
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     5a2:	80 e8       	ldi	r24, 0x80	; 128
     5a4:	6f e1       	ldi	r22, 0x1F	; 31
     5a6:	44 e0       	ldi	r20, 0x04	; 4
     5a8:	da de       	rcall	.-588    	; 0x35e <enc28j60WriteOp>
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <enc28j60getrev>:

// read the revision of the chip:
uint8_t enc28j60getrev(void)
{
        uint8_t rev;
        rev=enc28j60Read(EREVID);
     5b0:	82 e7       	ldi	r24, 0x72	; 114
     5b2:	34 df       	rcall	.-408    	; 0x41c <enc28j60Read>
        // microchip forgott to step the number on the silcon when they
        // released the revision B7. 6 is now rev B7. We still have
        // to see what they do when they release B8. At the moment
        // there is no B8 out yet
        if (rev>5) rev++;
     5b4:	86 30       	cpi	r24, 0x06	; 6
     5b6:	08 f0       	brcs	.+2      	; 0x5ba <enc28j60getrev+0xa>
     5b8:	8f 5f       	subi	r24, 0xFF	; 255
	return(rev);
}
     5ba:	08 95       	ret

000005bc <enc28j60EnableBroadcast>:

// A number of utility functions to enable/disable broadcast 
void enc28j60EnableBroadcast( void ) {
        uint8_t erxfcon;
        erxfcon=enc28j60Read(ERXFCON);
     5bc:	88 e3       	ldi	r24, 0x38	; 56
     5be:	2e df       	rcall	.-420    	; 0x41c <enc28j60Read>
        erxfcon |= ERXFCON_BCEN;
     5c0:	68 2f       	mov	r22, r24
     5c2:	61 60       	ori	r22, 0x01	; 1
        enc28j60Write(ERXFCON, erxfcon);
     5c4:	88 e3       	ldi	r24, 0x38	; 56
     5c6:	32 df       	rcall	.-412    	; 0x42c <enc28j60Write>
}
     5c8:	08 95       	ret

000005ca <enc28j60DisableBroadcast>:

void enc28j60DisableBroadcast( void ) {
        uint8_t erxfcon;
        erxfcon=enc28j60Read(ERXFCON);
     5ca:	88 e3       	ldi	r24, 0x38	; 56
     5cc:	27 df       	rcall	.-434    	; 0x41c <enc28j60Read>
        erxfcon &= (0xff ^ ERXFCON_BCEN);
     5ce:	68 2f       	mov	r22, r24
     5d0:	6e 7f       	andi	r22, 0xFE	; 254
        enc28j60Write(ERXFCON, erxfcon);
     5d2:	88 e3       	ldi	r24, 0x38	; 56
     5d4:	2b df       	rcall	.-426    	; 0x42c <enc28j60Write>
}
     5d6:	08 95       	ret

000005d8 <enc28j60linkup>:

// link status
uint8_t enc28j60linkup(void)
{
        // bit 10 (= bit 3 in upper reg)
        if (enc28j60PhyReadH(PHSTAT2) && 4){
     5d8:	81 e1       	ldi	r24, 0x11	; 17
     5da:	34 df       	rcall	.-408    	; 0x444 <enc28j60PhyReadH>
                return(1);
     5dc:	21 e0       	ldi	r18, 0x01	; 1
     5de:	00 97       	sbiw	r24, 0x00	; 0
     5e0:	09 f4       	brne	.+2      	; 0x5e4 <enc28j60linkup+0xc>
     5e2:	20 e0       	ldi	r18, 0x00	; 0
        }
        return(0);
}
     5e4:	82 2f       	mov	r24, r18
     5e6:	08 95       	ret

000005e8 <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	ec 01       	movw	r28, r24
     5f2:	8b 01       	movw	r16, r22
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
     5f4:	0c c0       	rjmp	.+24     	; 0x60e <enc28j60PacketSend+0x26>
        {
                // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
                if( (enc28j60Read(EIR) & EIR_TXERIF) ) {
     5f6:	8c e1       	ldi	r24, 0x1C	; 28
     5f8:	11 df       	rcall	.-478    	; 0x41c <enc28j60Read>
     5fa:	81 ff       	sbrs	r24, 1
     5fc:	08 c0       	rjmp	.+16     	; 0x60e <enc28j60PacketSend+0x26>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     5fe:	80 e8       	ldi	r24, 0x80	; 128
     600:	6f e1       	ldi	r22, 0x1F	; 31
     602:	40 e8       	ldi	r20, 0x80	; 128
     604:	ac de       	rcall	.-680    	; 0x35e <enc28j60WriteOp>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     606:	80 ea       	ldi	r24, 0xA0	; 160
     608:	6f e1       	ldi	r22, 0x1F	; 31
     60a:	40 e8       	ldi	r20, 0x80	; 128
     60c:	a8 de       	rcall	.-688    	; 0x35e <enc28j60WriteOp>
}

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	6f e1       	ldi	r22, 0x1F	; 31
     612:	93 de       	rcall	.-730    	; 0x33a <enc28j60ReadOp>
     614:	83 fd       	sbrc	r24, 3
     616:	ef cf       	rjmp	.-34     	; 0x5f6 <enc28j60PacketSend+0xe>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
                }
        }
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
     618:	82 e0       	ldi	r24, 0x02	; 2
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	07 df       	rcall	.-498    	; 0x42c <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	6a e1       	ldi	r22, 0x1A	; 26
     622:	04 df       	rcall	.-504    	; 0x42c <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
     624:	86 e0       	ldi	r24, 0x06	; 6
     626:	6c 2f       	mov	r22, r28
     628:	01 df       	rcall	.-510    	; 0x42c <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
     62a:	ce 01       	movw	r24, r28
     62c:	80 50       	subi	r24, 0x00	; 0
     62e:	96 4e       	sbci	r25, 0xE6	; 230
     630:	87 e0       	ldi	r24, 0x07	; 7
     632:	69 2f       	mov	r22, r25
     634:	fb de       	rcall	.-522    	; 0x42c <enc28j60Write>
	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     636:	8a e7       	ldi	r24, 0x7A	; 122
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	90 de       	rcall	.-736    	; 0x35e <enc28j60WriteOp>
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
     63e:	ce 01       	movw	r24, r28
     640:	b8 01       	movw	r22, r16
     642:	b1 de       	rcall	.-670    	; 0x3a6 <enc28j60WriteBuffer>
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     644:	80 e8       	ldi	r24, 0x80	; 128
     646:	6f e1       	ldi	r22, 0x1F	; 31
     648:	48 e0       	ldi	r20, 0x08	; 8
     64a:	89 de       	rcall	.-750    	; 0x35e <enc28j60WriteOp>
}
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	1f 91       	pop	r17
     652:	0f 91       	pop	r16
     654:	08 95       	ret

00000656 <enc28j60hasRxPkt>:

// just probe if there might be a packet
uint8_t enc28j60hasRxPkt(void)
{
	if( enc28j60Read(EPKTCNT) ==0 ){
     656:	89 e3       	ldi	r24, 0x39	; 57
     658:	e1 de       	rcall	.-574    	; 0x41c <enc28j60Read>
		return(0);
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	88 23       	and	r24, r24
     65e:	09 f4       	brne	.+2      	; 0x662 <enc28j60hasRxPkt+0xc>
     660:	90 e0       	ldi	r25, 0x00	; 0
        }
        return(1);
}
     662:	89 2f       	mov	r24, r25
     664:	08 95       	ret

00000666 <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
     666:	af 92       	push	r10
     668:	bf 92       	push	r11
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	0f 93       	push	r16
     674:	1f 93       	push	r17
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	8c 01       	movw	r16, r24
     67c:	5b 01       	movw	r10, r22
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) )
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
     67e:	89 e3       	ldi	r24, 0x39	; 57
     680:	cd de       	rcall	.-614    	; 0x41c <enc28j60Read>
     682:	88 23       	and	r24, r24
     684:	09 f4       	brne	.+2      	; 0x688 <enc28j60PacketReceive+0x22>
     686:	68 c0       	rjmp	.+208    	; 0x758 <enc28j60PacketReceive+0xf2>
		return(0);
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
     688:	c0 91 ec 02 	lds	r28, 0x02EC
     68c:	d0 91 ed 02 	lds	r29, 0x02ED
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	6c 2f       	mov	r22, r28
     694:	cb de       	rcall	.-618    	; 0x42c <enc28j60Write>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
     696:	6d 2f       	mov	r22, r29
     698:	77 27       	eor	r23, r23
     69a:	67 fd       	sbrc	r22, 7
     69c:	7a 95       	dec	r23
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	c5 de       	rcall	.-630    	; 0x42c <enc28j60Write>
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     6a2:	8a e3       	ldi	r24, 0x3A	; 58
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	49 de       	rcall	.-878    	; 0x33a <enc28j60ReadOp>
     6a8:	c8 2f       	mov	r28, r24
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     6aa:	8a e3       	ldi	r24, 0x3A	; 58
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	45 de       	rcall	.-886    	; 0x33a <enc28j60ReadOp>
     6b0:	38 2f       	mov	r19, r24
     6b2:	20 e0       	ldi	r18, 0x00	; 0

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     6b4:	cc 2e       	mov	r12, r28
     6b6:	dd 24       	eor	r13, r13
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     6b8:	c2 2a       	or	r12, r18
     6ba:	d3 2a       	or	r13, r19
     6bc:	d0 92 ed 02 	sts	0x02ED, r13
     6c0:	c0 92 ec 02 	sts	0x02EC, r12
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     6c4:	8a e3       	ldi	r24, 0x3A	; 58
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	38 de       	rcall	.-912    	; 0x33a <enc28j60ReadOp>
     6ca:	e8 2e       	mov	r14, r24
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     6cc:	8a e3       	ldi	r24, 0x3A	; 58
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	34 de       	rcall	.-920    	; 0x33a <enc28j60ReadOp>
     6d2:	f8 2e       	mov	r15, r24
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     6d4:	8a e3       	ldi	r24, 0x3A	; 58
     6d6:	60 e0       	ldi	r22, 0x00	; 0
     6d8:	30 de       	rcall	.-928    	; 0x33a <enc28j60ReadOp>
     6da:	c8 2f       	mov	r28, r24
     6dc:	d0 e0       	ldi	r29, 0x00	; 0
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
     6de:	8a e3       	ldi	r24, 0x3A	; 58
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	2b de       	rcall	.-938    	; 0x33a <enc28j60ReadOp>
     6e4:	38 2f       	mov	r19, r24
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	2c 2b       	or	r18, r28
     6ea:	3d 2b       	or	r19, r29
                len=maxlen-1;
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
     6ec:	27 ff       	sbrs	r18, 7
     6ee:	13 c0       	rjmp	.+38     	; 0x716 <enc28j60PacketReceive+0xb0>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     6f0:	2e 2d       	mov	r18, r14
     6f2:	30 e0       	ldi	r19, 0x00	; 0
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     6f4:	9f 2d       	mov	r25, r15
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	28 2b       	or	r18, r24
     6fa:	39 2b       	or	r19, r25
        len-=4; //remove the CRC count
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
	// limit retrieve length
        if (len>maxlen-1){
     6fc:	c8 01       	movw	r24, r16
     6fe:	01 97       	sbiw	r24, 0x01	; 1
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
        len-=4; //remove the CRC count
     700:	89 01       	movw	r16, r18
     702:	04 50       	subi	r16, 0x04	; 4
     704:	10 40       	sbci	r17, 0x00	; 0
     706:	80 17       	cp	r24, r16
     708:	91 07       	cpc	r25, r17
     70a:	08 f4       	brcc	.+2      	; 0x70e <enc28j60PacketReceive+0xa8>
     70c:	8c 01       	movw	r16, r24
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
     70e:	c8 01       	movw	r24, r16
     710:	b5 01       	movw	r22, r10
     712:	30 de       	rcall	.-928    	; 0x374 <enc28j60ReadBuffer>
     714:	02 c0       	rjmp	.+4      	; 0x71a <enc28j60PacketReceive+0xb4>
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
                // invalid
                len=0;
     716:	00 e0       	ldi	r16, 0x00	; 0
     718:	10 e0       	ldi	r17, 0x00	; 0
        //
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out. 
        // However, compensate for the errata point 13, rev B4: never write an even address!
        // gNextPacketPtr is always an even address if RXSTOP_INIT is odd.
        if (gNextPacketPtr -1 > RXSTOP_INIT){ // RXSTART_INIT is zero, no test for gNextPacketPtr less than RXSTART_INIT.
     71a:	76 01       	movw	r14, r12
     71c:	08 94       	sec
     71e:	e1 08       	sbc	r14, r1
     720:	f1 08       	sbc	r15, r1
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	e8 16       	cp	r14, r24
     726:	8a e1       	ldi	r24, 0x1A	; 26
     728:	f8 06       	cpc	r15, r24
     72a:	3c f0       	brlt	.+14     	; 0x73a <enc28j60PacketReceive+0xd4>
                enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
     72c:	8c e0       	ldi	r24, 0x0C	; 12
     72e:	6f ef       	ldi	r22, 0xFF	; 255
     730:	7d de       	rcall	.-774    	; 0x42c <enc28j60Write>
                enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
     732:	8d e0       	ldi	r24, 0x0D	; 13
     734:	69 e1       	ldi	r22, 0x19	; 25
     736:	7a de       	rcall	.-780    	; 0x42c <enc28j60Write>
     738:	0a c0       	rjmp	.+20     	; 0x74e <enc28j60PacketReceive+0xe8>
        } else {
                enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
     73a:	6c 2d       	mov	r22, r12
     73c:	61 50       	subi	r22, 0x01	; 1
     73e:	8c e0       	ldi	r24, 0x0C	; 12
     740:	75 de       	rcall	.-790    	; 0x42c <enc28j60Write>
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
     742:	6f 2d       	mov	r22, r15
     744:	77 27       	eor	r23, r23
     746:	67 fd       	sbrc	r22, 7
     748:	7a 95       	dec	r23
     74a:	8d e0       	ldi	r24, 0x0D	; 13
     74c:	6f de       	rcall	.-802    	; 0x42c <enc28j60Write>
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
     74e:	80 e8       	ldi	r24, 0x80	; 128
     750:	6e e1       	ldi	r22, 0x1E	; 30
     752:	40 e4       	ldi	r20, 0x40	; 64
     754:	04 de       	rcall	.-1016   	; 0x35e <enc28j60WriteOp>
	return(len);
     756:	02 c0       	rjmp	.+4      	; 0x75c <enc28j60PacketReceive+0xf6>
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) )
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
		return(0);
     758:	00 e0       	ldi	r16, 0x00	; 0
     75a:	10 e0       	ldi	r17, 0x00	; 0
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
	return(len);
}
     75c:	80 2f       	mov	r24, r16
     75e:	91 2f       	mov	r25, r17
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	ff 90       	pop	r15
     76a:	ef 90       	pop	r14
     76c:	df 90       	pop	r13
     76e:	cf 90       	pop	r12
     770:	bf 90       	pop	r11
     772:	af 90       	pop	r10
     774:	08 95       	ret

00000776 <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
     776:	cf 92       	push	r12
     778:	df 92       	push	r13
     77a:	ef 92       	push	r14
     77c:	ff 92       	push	r15
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	6c 01       	movw	r12, r24
     788:	7b 01       	movw	r14, r22

        //if(type==0){    
        //        // do not add anything, standard IP checksum as described above
        //        // Usable for ICMP and IP header
        //}
        if(type==1){
     78a:	41 30       	cpi	r20, 0x01	; 1
     78c:	51 f4       	brne	.+20     	; 0x7a2 <checksum+0x2c>
                sum+=IP_PROTO_UDP_V; // protocol udp
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real udp len
     78e:	ab 01       	movw	r20, r22
     790:	48 50       	subi	r20, 0x08	; 8
     792:	50 40       	sbci	r21, 0x00	; 0
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	4f 5e       	subi	r20, 0xEF	; 239
     79a:	5f 4f       	sbci	r21, 0xFF	; 255
     79c:	6f 4f       	sbci	r22, 0xFF	; 255
     79e:	7f 4f       	sbci	r23, 0xFF	; 255
     7a0:	0f c0       	rjmp	.+30     	; 0x7c0 <checksum+0x4a>
        }
        if(type==2){
     7a2:	42 30       	cpi	r20, 0x02	; 2
     7a4:	51 f4       	brne	.+20     	; 0x7ba <checksum+0x44>
                sum+=IP_PROTO_TCP_V; 
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
     7a6:	ab 01       	movw	r20, r22
     7a8:	48 50       	subi	r20, 0x08	; 8
     7aa:	50 40       	sbci	r21, 0x00	; 0
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	4a 5f       	subi	r20, 0xFA	; 250
     7b2:	5f 4f       	sbci	r21, 0xFF	; 255
     7b4:	6f 4f       	sbci	r22, 0xFF	; 255
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	03 c0       	rjmp	.+6      	; 0x7c0 <checksum+0x4a>
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
        // type 0=ip , icmp
        //      1=udp
        //      2=tcp
        uint32_t sum = 0;
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	50 e0       	ldi	r21, 0x00	; 0
     7be:	ba 01       	movw	r22, r20
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
     7c0:	82 e0       	ldi	r24, 0x02	; 2
     7c2:	e8 16       	cp	r14, r24
     7c4:	f1 04       	cpc	r15, r1
     7c6:	20 f1       	brcs	.+72     	; 0x810 <checksum+0x9a>
     7c8:	e7 01       	movw	r28, r14
     7ca:	f6 01       	movw	r30, r12
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
     7cc:	80 81       	ld	r24, Z
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	a0 e0       	ldi	r26, 0x00	; 0
     7d2:	b0 e0       	ldi	r27, 0x00	; 0
     7d4:	00 27       	eor	r16, r16
     7d6:	18 2f       	mov	r17, r24
     7d8:	29 2f       	mov	r18, r25
     7da:	3a 2f       	mov	r19, r26
     7dc:	81 81       	ldd	r24, Z+1	; 0x01
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	a0 e0       	ldi	r26, 0x00	; 0
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	80 2b       	or	r24, r16
     7e6:	91 2b       	or	r25, r17
     7e8:	a2 2b       	or	r26, r18
     7ea:	b3 2b       	or	r27, r19
     7ec:	48 0f       	add	r20, r24
     7ee:	59 1f       	adc	r21, r25
     7f0:	6a 1f       	adc	r22, r26
     7f2:	7b 1f       	adc	r23, r27
                buf+=2;
     7f4:	32 96       	adiw	r30, 0x02	; 2
                len-=2;
     7f6:	22 97       	sbiw	r28, 0x02	; 2
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
     7f8:	c2 30       	cpi	r28, 0x02	; 2
     7fa:	d1 05       	cpc	r29, r1
     7fc:	38 f7       	brcc	.-50     	; 0x7cc <checksum+0x56>
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
     7fe:	c7 01       	movw	r24, r14
     800:	02 97       	sbiw	r24, 0x02	; 2
     802:	8e 7f       	andi	r24, 0xFE	; 254
     804:	02 96       	adiw	r24, 0x02	; 2
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
     806:	c8 0e       	add	r12, r24
     808:	d9 1e       	adc	r13, r25
     80a:	e1 e0       	ldi	r30, 0x01	; 1
     80c:	ee 22       	and	r14, r30
     80e:	ff 24       	eor	r15, r15
                sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
                buf+=2;
                len-=2;
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
     810:	e1 14       	cp	r14, r1
     812:	f1 04       	cpc	r15, r1
     814:	69 f0       	breq	.+26     	; 0x830 <checksum+0xba>
                sum += ((uint32_t)(0xFF & *buf))<<8;
     816:	f6 01       	movw	r30, r12
     818:	80 81       	ld	r24, Z
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	a0 e0       	ldi	r26, 0x00	; 0
     81e:	b0 e0       	ldi	r27, 0x00	; 0
     820:	ba 2f       	mov	r27, r26
     822:	a9 2f       	mov	r26, r25
     824:	98 2f       	mov	r25, r24
     826:	88 27       	eor	r24, r24
     828:	48 0f       	add	r20, r24
     82a:	59 1f       	adc	r21, r25
     82c:	6a 1f       	adc	r22, r26
     82e:	7b 1f       	adc	r23, r27
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
     830:	cb 01       	movw	r24, r22
     832:	aa 27       	eor	r26, r26
     834:	bb 27       	eor	r27, r27
     836:	00 97       	sbiw	r24, 0x00	; 0
     838:	a1 05       	cpc	r26, r1
     83a:	b1 05       	cpc	r27, r1
     83c:	69 f0       	breq	.+26     	; 0x858 <checksum+0xe2>
                sum = (sum & 0xFFFF)+(sum >> 16);
     83e:	60 70       	andi	r22, 0x00	; 0
     840:	70 70       	andi	r23, 0x00	; 0
     842:	48 0f       	add	r20, r24
     844:	59 1f       	adc	r21, r25
     846:	6a 1f       	adc	r22, r26
     848:	7b 1f       	adc	r23, r27
        if (len){
                sum += ((uint32_t)(0xFF & *buf))<<8;
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
     84a:	cb 01       	movw	r24, r22
     84c:	aa 27       	eor	r26, r26
     84e:	bb 27       	eor	r27, r27
     850:	00 97       	sbiw	r24, 0x00	; 0
     852:	a1 05       	cpc	r26, r1
     854:	b1 05       	cpc	r27, r1
     856:	99 f7       	brne	.-26     	; 0x83e <checksum+0xc8>
                sum = (sum & 0xFFFF)+(sum >> 16);
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
     858:	ca 01       	movw	r24, r20
     85a:	80 95       	com	r24
     85c:	90 95       	com	r25
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	ff 90       	pop	r15
     868:	ef 90       	pop	r14
     86a:	df 90       	pop	r13
     86c:	cf 90       	pop	r12
     86e:	08 95       	ret

00000870 <init_mac>:

void init_mac(uint8_t *mymac){
        if (mymac){
     870:	00 97       	sbiw	r24, 0x00	; 0
     872:	41 f0       	breq	.+16     	; 0x884 <init_mac+0x14>
                memcpy(macaddr,mymac,6);
     874:	ae ee       	ldi	r26, 0xEE	; 238
     876:	b2 e0       	ldi	r27, 0x02	; 2
     878:	fc 01       	movw	r30, r24
     87a:	86 e0       	ldi	r24, 0x06	; 6
     87c:	01 90       	ld	r0, Z+
     87e:	0d 92       	st	X+, r0
     880:	81 50       	subi	r24, 0x01	; 1
     882:	e1 f7       	brne	.-8      	; 0x87c <init_mac+0xc>
     884:	08 95       	ret

00000886 <check_ip_message_is_from>:
}
#endif


uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
     886:	fb 01       	movw	r30, r22
        uint8_t i=0;
        while(i<4){
                if(buf[IP_SRC_P+i]!=ip[i]){
     888:	dc 01       	movw	r26, r24
     88a:	5a 96       	adiw	r26, 0x1a	; 26
     88c:	3c 91       	ld	r19, X
     88e:	5a 97       	sbiw	r26, 0x1a	; 26
     890:	20 81       	ld	r18, Z
     892:	32 17       	cp	r19, r18
     894:	59 f4       	brne	.+22     	; 0x8ac <check_ip_message_is_from+0x26>
	return(0);
}
#endif


uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
     896:	5b 96       	adiw	r26, 0x1b	; 27
     898:	31 96       	adiw	r30, 0x01	; 1
     89a:	83 e0       	ldi	r24, 0x03	; 3
{
        uint8_t i=0;
        while(i<4){
                if(buf[IP_SRC_P+i]!=ip[i]){
     89c:	2d 91       	ld	r18, X+
     89e:	91 91       	ld	r25, Z+
     8a0:	29 17       	cp	r18, r25
     8a2:	31 f4       	brne	.+12     	; 0x8b0 <check_ip_message_is_from+0x2a>
     8a4:	81 50       	subi	r24, 0x01	; 1


uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
     8a6:	d1 f7       	brne	.-12     	; 0x89c <check_ip_message_is_from+0x16>
                if(buf[IP_SRC_P+i]!=ip[i]){
                        return(0);
                }
                i++;
        }
        return(1);
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	08 95       	ret
uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
{
        uint8_t i=0;
        while(i<4){
                if(buf[IP_SRC_P+i]!=ip[i]){
                        return(0);
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	08 95       	ret
     8b0:	80 e0       	ldi	r24, 0x00	; 0
                }
                i++;
        }
        return(1);
}
     8b2:	08 95       	ret

000008b4 <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
     8b4:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //  
        if (len<41){
     8b6:	69 32       	cpi	r22, 0x29	; 41
     8b8:	71 05       	cpc	r23, r1
     8ba:	e8 f0       	brcs	.+58     	; 0x8f6 <eth_type_is_arp_and_my_ip+0x42>
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
     8bc:	84 85       	ldd	r24, Z+12	; 0x0c
     8be:	88 30       	cpi	r24, 0x08	; 8
     8c0:	e1 f4       	brne	.+56     	; 0x8fa <eth_type_is_arp_and_my_ip+0x46>
     8c2:	85 85       	ldd	r24, Z+13	; 0x0d
     8c4:	86 30       	cpi	r24, 0x06	; 6
     8c6:	d9 f4       	brne	.+54     	; 0x8fe <eth_type_is_arp_and_my_ip+0x4a>
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
     8c8:	96 a1       	lds	r25, 0x46
     8ca:	80 91 f4 02 	lds	r24, 0x02F4
     8ce:	98 17       	cp	r25, r24
     8d0:	c1 f4       	brne	.+48     	; 0x902 <eth_type_is_arp_and_my_ip+0x4e>
     8d2:	97 a1       	lds	r25, 0x47
     8d4:	80 91 f5 02 	lds	r24, 0x02F5
     8d8:	98 17       	cp	r25, r24
     8da:	a9 f4       	brne	.+42     	; 0x906 <eth_type_is_arp_and_my_ip+0x52>
     8dc:	90 a5       	lds	r25, 0x60
     8de:	80 91 f6 02 	lds	r24, 0x02F6
     8e2:	98 17       	cp	r25, r24
     8e4:	91 f4       	brne	.+36     	; 0x90a <eth_type_is_arp_and_my_ip+0x56>
                i++;
        }
        return(1);
}

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	21 a5       	lds	r18, 0x61
     8ea:	90 91 f7 02 	lds	r25, 0x02F7
     8ee:	29 17       	cp	r18, r25
     8f0:	69 f0       	breq	.+26     	; 0x90c <eth_type_is_arp_and_my_ip+0x58>
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	08 95       	ret
        uint8_t i=0;
        //  
        if (len<41){
                return(0);
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	08 95       	ret
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	08 95       	ret
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 95       	ret
        }
        while(i<4){
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
                        return(0);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	08 95       	ret
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	08 95       	ret
     90a:	80 e0       	ldi	r24, 0x00	; 0
                }
                i++;
        }
        return(1);
}
     90c:	08 95       	ret

0000090e <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
     90e:	fc 01       	movw	r30, r24
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
     910:	6a 32       	cpi	r22, 0x2A	; 42
     912:	71 05       	cpc	r23, r1
     914:	00 f1       	brcs	.+64     	; 0x956 <eth_type_is_ip_and_my_ip+0x48>
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
     916:	84 85       	ldd	r24, Z+12	; 0x0c
     918:	88 30       	cpi	r24, 0x08	; 8
     91a:	f9 f4       	brne	.+62     	; 0x95a <eth_type_is_ip_and_my_ip+0x4c>
     91c:	85 85       	ldd	r24, Z+13	; 0x0d
     91e:	88 23       	and	r24, r24
     920:	f1 f4       	brne	.+60     	; 0x95e <eth_type_is_ip_and_my_ip+0x50>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
     922:	86 85       	ldd	r24, Z+14	; 0x0e
     924:	85 34       	cpi	r24, 0x45	; 69
     926:	e9 f4       	brne	.+58     	; 0x962 <eth_type_is_ip_and_my_ip+0x54>
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
     928:	96 8d       	ldd	r25, Z+30	; 0x1e
     92a:	80 91 f4 02 	lds	r24, 0x02F4
     92e:	98 17       	cp	r25, r24
     930:	d1 f4       	brne	.+52     	; 0x966 <eth_type_is_ip_and_my_ip+0x58>
     932:	97 8d       	ldd	r25, Z+31	; 0x1f
     934:	80 91 f5 02 	lds	r24, 0x02F5
     938:	98 17       	cp	r25, r24
     93a:	b9 f4       	brne	.+46     	; 0x96a <eth_type_is_ip_and_my_ip+0x5c>
     93c:	90 a1       	lds	r25, 0x40
     93e:	80 91 f6 02 	lds	r24, 0x02F6
     942:	98 17       	cp	r25, r24
     944:	a1 f4       	brne	.+40     	; 0x96e <eth_type_is_ip_and_my_ip+0x60>
                i++;
        }
        return(1);
}

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	21 a1       	lds	r18, 0x41
     94a:	90 91 f7 02 	lds	r25, 0x02F7
     94e:	29 17       	cp	r18, r25
     950:	79 f0       	breq	.+30     	; 0x970 <eth_type_is_ip_and_my_ip+0x62>
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	08 95       	ret
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
                return(0);
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	08 95       	ret
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	08 95       	ret
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	08 95       	ret
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
                // must be IP V4 and 20 byte header
                return(0);
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	08 95       	ret
        }
        while(i<4){
                if(buf[IP_DST_P+i]!=ipaddr[i]){
                        return(0);
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	08 95       	ret
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	08 95       	ret
     96e:	80 e0       	ldi	r24, 0x00	; 0
                }
                i++;
        }
        return(1);
}
     970:	08 95       	ret

00000972 <make_eth>:

// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	ec 01       	movw	r28, r24
     978:	ee ee       	ldi	r30, 0xEE	; 238
     97a:	f2 e0       	ldi	r31, 0x02	; 2
        }
        return(1);
}

// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
     97c:	dc 01       	movw	r26, r24
     97e:	16 96       	adiw	r26, 0x06	; 6
     980:	cf 01       	movw	r24, r30
     982:	06 96       	adiw	r24, 0x06	; 6
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
     984:	2c 91       	ld	r18, X
     986:	29 93       	st	Y+, r18
                buf[ETH_SRC_MAC +i]=macaddr[i];
     988:	21 91       	ld	r18, Z+
     98a:	2d 93       	st	X+, r18
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
     98c:	e8 17       	cp	r30, r24
     98e:	f9 07       	cpc	r31, r25
     990:	c9 f7       	brne	.-14     	; 0x984 <make_eth+0x12>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
}
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <fill_ip_hdr_checksum>:
void fill_ip_hdr_checksum(uint8_t *buf)
{
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	ec 01       	movw	r28, r24
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
     99e:	18 8e       	std	Y+24, r1	; 0x18
        buf[IP_CHECKSUM_P+1]=0;
     9a0:	19 8e       	std	Y+25, r1	; 0x19
        buf[IP_FLAGS_P]=0x40; // don't fragment
     9a2:	80 e4       	ldi	r24, 0x40	; 64
     9a4:	8c 8b       	std	Y+20, r24	; 0x14
        buf[IP_FLAGS_P+1]=0;  // fragement offset
     9a6:	1d 8a       	std	Y+21, r1	; 0x15
        buf[IP_TTL_P]=64; // ttl
     9a8:	8e 8b       	std	Y+22, r24	; 0x16
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
     9aa:	ce 01       	movw	r24, r28
     9ac:	0e 96       	adiw	r24, 0x0e	; 14
     9ae:	64 e1       	ldi	r22, 0x14	; 20
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	e0 de       	rcall	.-576    	; 0x776 <checksum>
        buf[IP_CHECKSUM_P]=ck>>8;
     9b6:	98 8f       	std	Y+24, r25	; 0x18
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
     9b8:	89 8f       	std	Y+25, r24	; 0x19
}
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <make_ip>:

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
        buf[IP_CHECKSUM_P]=ck>>8;
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
}

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
     9c4:	ec 01       	movw	r28, r24
     9c6:	6e 96       	adiw	r28, 0x1e	; 30
{
     9c8:	e4 ef       	ldi	r30, 0xF4	; 244
     9ca:	f2 e0       	ldi	r31, 0x02	; 2
        buf[IP_CHECKSUM_P]=ck>>8;
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
}

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
     9cc:	dc 01       	movw	r26, r24
     9ce:	5a 96       	adiw	r26, 0x1a	; 26
     9d0:	9f 01       	movw	r18, r30
     9d2:	2c 5f       	subi	r18, 0xFC	; 252
     9d4:	3f 4f       	sbci	r19, 0xFF	; 255
{
        uint8_t i=0;
        while(i<4){
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
     9d6:	4c 91       	ld	r20, X
     9d8:	49 93       	st	Y+, r20
                buf[IP_SRC_P+i]=ipaddr[i];
     9da:	41 91       	ld	r20, Z+
     9dc:	4d 93       	st	X+, r20

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
     9de:	e2 17       	cp	r30, r18
     9e0:	f3 07       	cpc	r31, r19
     9e2:	c9 f7       	brne	.-14     	; 0x9d6 <make_ip+0x16>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
     9e4:	d9 df       	rcall	.-78     	; 0x998 <fill_ip_hdr_checksum>
}
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <step_seq>:

// swap seq and ack number and count ack number up
void step_seq(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
     9ec:	fc 01       	movw	r30, r24
     9ee:	ba 96       	adiw	r30, 0x2a	; 42
     9f0:	dc 01       	movw	r26, r24
     9f2:	9e 96       	adiw	r26, 0x2e	; 46
{
        uint8_t i;
        uint8_t tseq;
        i=4;
     9f4:	84 e0       	ldi	r24, 0x04	; 4
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
     9f6:	92 91       	ld	r25, -Z
     9f8:	69 0f       	add	r22, r25
     9fa:	71 1d       	adc	r23, r1
                tseq=buf[TCP_SEQACK_H_P+i-1];
     9fc:	9e 91       	ld	r25, -X
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
     9fe:	6c 93       	st	X, r22
                if (cp_seq){
     a00:	44 23       	and	r20, r20
     a02:	11 f0       	breq	.+4      	; 0xa08 <step_seq+0x1c>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
     a04:	90 83       	st	Z, r25
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <step_seq+0x1e>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset value
     a08:	10 82       	st	Z, r1
                }
                rel_ack_num=rel_ack_num>>8;
     a0a:	67 2f       	mov	r22, r23
     a0c:	77 27       	eor	r23, r23
                i--;
     a0e:	81 50       	subi	r24, 0x01	; 1
        uint8_t i;
        uint8_t tseq;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
     a10:	91 f7       	brne	.-28     	; 0x9f6 <step_seq+0xa>
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset value
                }
                rel_ack_num=rel_ack_num>>8;
                i--;
        }
}
     a12:	08 95       	ret

00000a14 <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
{
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	ec 01       	movw	r28, r24
        uint8_t i;
        // copy ports:
        i=buf[TCP_DST_PORT_H_P];
     a1a:	8c a1       	lds	r24, 0x4c
        buf[TCP_DST_PORT_H_P]=buf[TCP_SRC_PORT_H_P];
     a1c:	9a a1       	lds	r25, 0x4a
     a1e:	9c a3       	lds	r25, 0x5c
        buf[TCP_SRC_PORT_H_P]=i;
     a20:	8a a3       	lds	r24, 0x5a
        //
        i=buf[TCP_DST_PORT_L_P];
     a22:	8d a1       	lds	r24, 0x4d
        buf[TCP_DST_PORT_L_P]=buf[TCP_SRC_PORT_L_P];
     a24:	9b a1       	lds	r25, 0x4b
     a26:	9d a3       	lds	r25, 0x5d
        buf[TCP_SRC_PORT_L_P]=i;
     a28:	8b a3       	lds	r24, 0x5b
        step_seq(buf,rel_ack_num,cp_seq);
     a2a:	ce 01       	movw	r24, r28
     a2c:	df df       	rcall	.-66     	; 0x9ec <step_seq>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     a2e:	1a aa       	sts	0x9a, r17
        buf[TCP_CHECKSUM_L_P]=0;
     a30:	1b aa       	sts	0x9b, r17
        // no options:
        // 20 bytes:
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 20 bytes: 20/4=6 => 0x50=header len field
        buf[TCP_HEADER_LEN_P]=0x50;
     a32:	80 e5       	ldi	r24, 0x50	; 80
     a34:	8e a7       	lds	r24, 0x7e
}
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	08 95       	ret

00000a3c <make_arp_answer_from_request>:

void make_arp_answer_from_request(uint8_t *buf)
{
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	cf 93       	push	r28
     a42:	df 93       	push	r29
     a44:	8c 01       	movw	r16, r24
        uint8_t i=0;
        //
        make_eth(buf);
     a46:	95 df       	rcall	.-214    	; 0x972 <make_eth>
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
     a48:	f8 01       	movw	r30, r16
     a4a:	14 8a       	std	Z+20, r1	; 0x14
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	85 8b       	std	Z+21, r24	; 0x15
        // It is calculated in units of 4 bytes.
        // E.g 20 bytes: 20/4=6 => 0x50=header len field
        buf[TCP_HEADER_LEN_P]=0x50;
}

void make_arp_answer_from_request(uint8_t *buf)
     a50:	e8 01       	movw	r28, r16
     a52:	a0 96       	adiw	r28, 0x20	; 32
{
        uint8_t i=0;
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
     a54:	ee ee       	ldi	r30, 0xEE	; 238
     a56:	f2 e0       	ldi	r31, 0x02	; 2
        // It is calculated in units of 4 bytes.
        // E.g 20 bytes: 20/4=6 => 0x50=header len field
        buf[TCP_HEADER_LEN_P]=0x50;
}

void make_arp_answer_from_request(uint8_t *buf)
     a58:	d8 01       	movw	r26, r16
     a5a:	56 96       	adiw	r26, 0x16	; 22
     a5c:	cf 01       	movw	r24, r30
     a5e:	06 96       	adiw	r24, 0x06	; 6
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
     a60:	2c 91       	ld	r18, X
     a62:	29 93       	st	Y+, r18
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
     a64:	21 91       	ld	r18, Z+
     a66:	2d 93       	st	X+, r18
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
     a68:	e8 17       	cp	r30, r24
     a6a:	f9 07       	cpc	r31, r25
     a6c:	c9 f7       	brne	.-14     	; 0xa60 <make_arp_answer_from_request+0x24>
        // It is calculated in units of 4 bytes.
        // E.g 20 bytes: 20/4=6 => 0x50=header len field
        buf[TCP_HEADER_LEN_P]=0x50;
}

void make_arp_answer_from_request(uint8_t *buf)
     a6e:	e8 01       	movw	r28, r16
     a70:	a6 96       	adiw	r28, 0x26	; 38
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
     a72:	e4 ef       	ldi	r30, 0xF4	; 244
     a74:	f2 e0       	ldi	r31, 0x02	; 2
        // It is calculated in units of 4 bytes.
        // E.g 20 bytes: 20/4=6 => 0x50=header len field
        buf[TCP_HEADER_LEN_P]=0x50;
}

void make_arp_answer_from_request(uint8_t *buf)
     a76:	d8 01       	movw	r26, r16
     a78:	5c 96       	adiw	r26, 0x1c	; 28
     a7a:	cf 01       	movw	r24, r30
     a7c:	04 96       	adiw	r24, 0x04	; 4
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
     a7e:	2c 91       	ld	r18, X
     a80:	29 93       	st	Y+, r18
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
     a82:	21 91       	ld	r18, Z+
     a84:	2d 93       	st	X+, r18
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
     a86:	e8 17       	cp	r30, r24
     a88:	f9 07       	cpc	r31, r25
     a8a:	c9 f7       	brne	.-14     	; 0xa7e <make_arp_answer_from_request+0x42>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
     a8c:	8a e2       	ldi	r24, 0x2A	; 42
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	b8 01       	movw	r22, r16
     a92:	aa dd       	rcall	.-1196   	; 0x5e8 <enc28j60PacketSend>
}
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	08 95       	ret

00000a9e <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	ec 01       	movw	r28, r24
     aa8:	8b 01       	movw	r16, r22
        make_eth(buf);
     aaa:	63 df       	rcall	.-314    	; 0x972 <make_eth>
        make_ip(buf);
     aac:	ce 01       	movw	r24, r28
     aae:	88 df       	rcall	.-240    	; 0x9c0 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
     ab0:	1a a2       	lds	r17, 0x9a
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
     ab2:	8c a1       	lds	r24, 0x4c
     ab4:	88 3f       	cpi	r24, 0xF8	; 248
     ab6:	18 f0       	brcs	.+6      	; 0xabe <make_echo_reply_from_request+0x20>
                buf[ICMP_CHECKSUM_P+1]++;
     ab8:	9d a1       	lds	r25, 0x4d
     aba:	9f 5f       	subi	r25, 0xFF	; 255
     abc:	9d a3       	lds	r25, 0x5d
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
     abe:	88 5f       	subi	r24, 0xF8	; 248
     ac0:	8c a3       	lds	r24, 0x5c
        //
        enc28j60PacketSend(len,buf);
     ac2:	c8 01       	movw	r24, r16
     ac4:	be 01       	movw	r22, r28
     ac6:	90 dd       	rcall	.-1248   	; 0x5e8 <enc28j60PacketSend>
}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	08 95       	ret

00000ad2 <get_tcp_data_len>:

// do some basic length calculations 
uint16_t get_tcp_data_len(uint8_t *buf)
{
     ad2:	fc 01       	movw	r30, r24
        int16_t i;
        i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
     ad4:	81 89       	ldd	r24, Z+17	; 0x11
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	30 89       	ldd	r19, Z+16	; 0x10
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	82 2b       	or	r24, r18
     ade:	93 2b       	or	r25, r19
        i-=IP_HEADER_LEN;
     ae0:	44 97       	sbiw	r24, 0x14	; 20
        i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
     ae2:	26 a5       	lds	r18, 0x66
     ae4:	22 95       	swap	r18
     ae6:	2f 70       	andi	r18, 0x0F	; 15
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	22 0f       	add	r18, r18
     aec:	33 1f       	adc	r19, r19
     aee:	22 0f       	add	r18, r18
     af0:	33 1f       	adc	r19, r19
     af2:	82 1b       	sub	r24, r18
     af4:	93 0b       	sbc	r25, r19
        if (i<=0){
                i=0;
        }
        return((uint16_t)i);
     af6:	12 f4       	brpl	.+4      	; 0xafc <get_tcp_data_len+0x2a>
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	90 e0       	ldi	r25, 0x00	; 0
}
     afc:	08 95       	ret

00000afe <fill_tcp_data_p>:
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     afe:	24 2f       	mov	r18, r20
     b00:	35 2f       	mov	r19, r21
     b02:	f9 01       	movw	r30, r18
     b04:	44 91       	lpm	r20, Z
     b06:	44 23       	and	r20, r20
     b08:	81 f0       	breq	.+32     	; 0xb2a <fill_tcp_data_p+0x2c>


// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data_p(uint8_t *buf,uint16_t pos, const prog_char *progmem_s)
     b0a:	db 01       	movw	r26, r22
     b0c:	d6 96       	adiw	r26, 0x36	; 54
     b0e:	a8 0f       	add	r26, r24
     b10:	b9 1f       	adc	r27, r25
     b12:	cb 01       	movw	r24, r22
     b14:	26 1b       	sub	r18, r22
     b16:	37 0b       	sbc	r19, r23
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
     b18:	4d 93       	st	X+, r20
                pos++;
     b1a:	01 96       	adiw	r24, 0x01	; 1


// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data_p(uint8_t *buf,uint16_t pos, const prog_char *progmem_s)
     b1c:	f9 01       	movw	r30, r18
     b1e:	e8 0f       	add	r30, r24
     b20:	f9 1f       	adc	r31, r25
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
     b22:	44 91       	lpm	r20, Z
     b24:	44 23       	and	r20, r20
     b26:	c1 f7       	brne	.-16     	; 0xb18 <fill_tcp_data_p+0x1a>
     b28:	08 95       	ret
     b2a:	cb 01       	movw	r24, r22
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
                pos++;
        }
        return(pos);
}
     b2c:	08 95       	ret

00000b2e <fill_tcp_data_len>:

// fill a binary string of len data into the tcp packet
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint8_t len)
{
     b2e:	dc 01       	movw	r26, r24
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
     b30:	22 23       	and	r18, r18
     b32:	81 f0       	breq	.+32     	; 0xb54 <fill_tcp_data_len+0x26>
     b34:	e4 2f       	mov	r30, r20
     b36:	f5 2f       	mov	r31, r21
        }
        return(pos);
}

// fill a binary string of len data into the tcp packet
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint8_t len)
     b38:	cb 01       	movw	r24, r22
     b3a:	c6 96       	adiw	r24, 0x36	; 54
     b3c:	a8 0f       	add	r26, r24
     b3e:	b9 1f       	adc	r27, r25
     b40:	82 2f       	mov	r24, r18
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
     b42:	91 91       	ld	r25, Z+
     b44:	9d 93       	st	X+, r25
                pos++;
                s++;
                len--;
     b46:	81 50       	subi	r24, 0x01	; 1
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint8_t len)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (len) {
     b48:	e1 f7       	brne	.-8      	; 0xb42 <fill_tcp_data_len+0x14>
        }
        return(pos);
}

// fill a binary string of len data into the tcp packet
uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint8_t len)
     b4a:	6f 5f       	subi	r22, 0xFF	; 255
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	21 50       	subi	r18, 0x01	; 1
     b50:	62 0f       	add	r22, r18
     b52:	71 1d       	adc	r23, r1
                pos++;
                s++;
                len--;
        }
        return(pos);
}
     b54:	86 2f       	mov	r24, r22
     b56:	97 2f       	mov	r25, r23
     b58:	08 95       	ret

00000b5a <fill_tcp_data>:
// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        return(fill_tcp_data_len(buf,pos,(uint8_t*)s,strlen(s)));
     b5a:	e4 2f       	mov	r30, r20
     b5c:	f5 2f       	mov	r31, r21
     b5e:	df 01       	movw	r26, r30
     b60:	0d 90       	ld	r0, X+
     b62:	00 20       	and	r0, r0
     b64:	e9 f7       	brne	.-6      	; 0xb60 <fill_tcp_data+0x6>
     b66:	9d 01       	movw	r18, r26
     b68:	21 50       	subi	r18, 0x01	; 1
     b6a:	30 40       	sbci	r19, 0x00	; 0
     b6c:	2e 1b       	sub	r18, r30
     b6e:	3f 0b       	sbc	r19, r31
     b70:	de df       	rcall	.-68     	; 0xb2e <fill_tcp_data_len>
}
     b72:	08 95       	ret

00000b74 <make_tcp_ack_from_any>:

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf,int16_t datlentoack,uint8_t addflags)
{
     b74:	ef 92       	push	r14
     b76:	ff 92       	push	r15
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	7c 01       	movw	r14, r24
     b80:	eb 01       	movw	r28, r22
     b82:	14 2f       	mov	r17, r20
        uint16_t j;
        make_eth(buf);
     b84:	f6 de       	rcall	.-532    	; 0x972 <make_eth>
        // fill the header:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|addflags;
     b86:	81 2f       	mov	r24, r17
     b88:	80 61       	ori	r24, 0x10	; 16
     b8a:	f7 01       	movw	r30, r14
     b8c:	87 a7       	lds	r24, 0x77
        if (addflags==TCP_FLAGS_RST_V){
     b8e:	14 30       	cpi	r17, 0x04	; 4
     b90:	29 f4       	brne	.+10     	; 0xb9c <make_tcp_ack_from_any+0x28>
                make_tcphead(buf,datlentoack,1); 
     b92:	c7 01       	movw	r24, r14
     b94:	be 01       	movw	r22, r28
     b96:	41 e0       	ldi	r20, 0x01	; 1
     b98:	3d df       	rcall	.-390    	; 0xa14 <make_tcphead>
     b9a:	08 c0       	rjmp	.+16     	; 0xbac <make_tcp_ack_from_any+0x38>
        }else{
                if (datlentoack==0){
     b9c:	20 97       	sbiw	r28, 0x00	; 0
     b9e:	11 f4       	brne	.+4      	; 0xba4 <make_tcp_ack_from_any+0x30>
                        // if there is no data then we must still acknoledge one packet
                        datlentoack=1;
     ba0:	c1 e0       	ldi	r28, 0x01	; 1
     ba2:	d0 e0       	ldi	r29, 0x00	; 0
                }
                // normal case, ack the data:
                make_tcphead(buf,datlentoack,1); // no options
     ba4:	c7 01       	movw	r24, r14
     ba6:	be 01       	movw	r22, r28
     ba8:	41 e0       	ldi	r20, 0x01	; 1
     baa:	34 df       	rcall	.-408    	; 0xa14 <make_tcphead>
        }
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) 
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
        buf[IP_TOTLEN_H_P]=j>>8;
     bac:	f7 01       	movw	r30, r14
     bae:	10 8a       	std	Z+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     bb0:	88 e2       	ldi	r24, 0x28	; 40
     bb2:	81 8b       	std	Z+17, r24	; 0x11
        make_ip(buf);
     bb4:	c7 01       	movw	r24, r14
     bb6:	04 df       	rcall	.-504    	; 0x9c0 <make_ip>
        // use a low window size otherwise we have to have
        // timers and can not just react on every packet.
        buf[TCP_WIN_SIZE]=0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	f7 01       	movw	r30, r14
     bbc:	80 ab       	sts	0x50, r24
        buf[TCP_WIN_SIZE+1]=0;
     bbe:	11 aa       	sts	0x91, r17
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
     bc0:	c7 01       	movw	r24, r14
     bc2:	4a 96       	adiw	r24, 0x1a	; 26
     bc4:	6c e1       	ldi	r22, 0x1C	; 28
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	42 e0       	ldi	r20, 0x02	; 2
     bca:	d5 dd       	rcall	.-1110   	; 0x776 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     bcc:	f7 01       	movw	r30, r14
     bce:	92 ab       	sts	0x52, r25
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     bd0:	83 ab       	sts	0x53, r24
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
     bd2:	86 e3       	ldi	r24, 0x36	; 54
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	b7 01       	movw	r22, r14
     bd8:	07 dd       	rcall	.-1522   	; 0x5e8 <enc28j60PacketSend>
}
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	08 95       	ret

00000be6 <make_tcp_ack_with_data_noflags>:
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
// You must set TCP_FLAGS before calling this
void make_tcp_ack_with_data_noflags(uint8_t *buf,uint16_t dlen)
{
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	ec 01       	movw	r28, r24
     bf0:	8b 01       	movw	r16, r22
        uint16_t j;
        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
     bf2:	cb 01       	movw	r24, r22
     bf4:	88 96       	adiw	r24, 0x28	; 40
        buf[IP_TOTLEN_H_P]=j>>8;
     bf6:	98 8b       	std	Y+16, r25	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     bf8:	89 8b       	std	Y+17, r24	; 0x11
        fill_ip_hdr_checksum(buf);
     bfa:	ce 01       	movw	r24, r28
     bfc:	cd de       	rcall	.-614    	; 0x998 <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
     bfe:	1a aa       	sts	0x9a, r17
        buf[TCP_CHECKSUM_L_P]=0;
     c00:	1b aa       	sts	0x9b, r17
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
     c02:	b8 01       	movw	r22, r16
     c04:	64 5e       	subi	r22, 0xE4	; 228
     c06:	7f 4f       	sbci	r23, 0xFF	; 255
     c08:	ce 01       	movw	r24, r28
     c0a:	4a 96       	adiw	r24, 0x1a	; 26
     c0c:	42 e0       	ldi	r20, 0x02	; 2
     c0e:	b3 dd       	rcall	.-1178   	; 0x776 <checksum>
        buf[TCP_CHECKSUM_H_P]=j>>8;
     c10:	9a ab       	sts	0x5a, r25
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
     c12:	8b ab       	sts	0x5b, r24
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
     c14:	c8 01       	movw	r24, r16
     c16:	c6 96       	adiw	r24, 0x36	; 54
     c18:	be 01       	movw	r22, r28
     c1a:	e6 dc       	rcall	.-1588   	; 0x5e8 <enc28j60PacketSend>
}
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <make_udp_reply_from_request_udpdat_ready>:

#if defined (UDP_server)
// a udp server
void make_udp_reply_from_request_udpdat_ready(uint8_t *buf,uint16_t datalen,uint16_t port)
{
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	ec 01       	movw	r28, r24
     c38:	f6 2e       	mov	r15, r22
     c3a:	e7 2e       	mov	r14, r23
     c3c:	c4 2e       	mov	r12, r20
     c3e:	d5 2e       	mov	r13, r21
        uint16_t j;
        make_eth(buf);
     c40:	98 de       	rcall	.-720    	; 0x972 <make_eth>
     c42:	0f 2d       	mov	r16, r15
     c44:	1e 2d       	mov	r17, r14
     c46:	0d 3d       	cpi	r16, 0xDD	; 221
     c48:	11 05       	cpc	r17, r1
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <make_udp_reply_from_request_udpdat_ready+0x2a>
     c4c:	0c ed       	ldi	r16, 0xDC	; 220
     c4e:	10 e0       	ldi	r17, 0x00	; 0
        if (datalen>220){
                datalen=220;
        }
        // total length field in the IP header must be set:
        j=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
     c50:	c8 01       	movw	r24, r16
     c52:	4c 96       	adiw	r24, 0x1c	; 28
        buf[IP_TOTLEN_H_P]=j>>8;
     c54:	98 8b       	std	Y+16, r25	; 0x10
        buf[IP_TOTLEN_L_P]=j& 0xff;
     c56:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     c58:	ce 01       	movw	r24, r28
     c5a:	b2 de       	rcall	.-668    	; 0x9c0 <make_ip>
        // send to port:
        //buf[UDP_DST_PORT_H_P]=port>>8;
        //buf[UDP_DST_PORT_L_P]=port & 0xff;
        // sent to port of sender and use "port" as own source:
        buf[UDP_DST_PORT_H_P]=buf[UDP_SRC_PORT_H_P];
     c5c:	8a a1       	lds	r24, 0x4a
     c5e:	8c a3       	lds	r24, 0x5c
        buf[UDP_DST_PORT_L_P]= buf[UDP_SRC_PORT_L_P];
     c60:	8b a1       	lds	r24, 0x4b
     c62:	8d a3       	lds	r24, 0x5d
        buf[UDP_SRC_PORT_H_P]=port>>8;
     c64:	da a2       	lds	r29, 0x9a
        buf[UDP_SRC_PORT_L_P]=port & 0xff;
     c66:	cb a2       	lds	r28, 0x9b
        // calculte the udp length:
        j=UDP_HEADER_LEN+datalen;
     c68:	c8 01       	movw	r24, r16
     c6a:	08 96       	adiw	r24, 0x08	; 8
        buf[UDP_LEN_H_P]=j>>8;
     c6c:	9e a3       	lds	r25, 0x5e
        buf[UDP_LEN_L_P]=j& 0xff;
     c6e:	8f a3       	lds	r24, 0x5f
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
     c70:	18 a6       	lds	r17, 0xb8
        buf[UDP_CHECKSUM_L_P]=0;
     c72:	19 a6       	lds	r17, 0xb9
        j=checksum(&buf[IP_SRC_P], 16 + datalen,1);
     c74:	b8 01       	movw	r22, r16
     c76:	60 5f       	subi	r22, 0xF0	; 240
     c78:	7f 4f       	sbci	r23, 0xFF	; 255
     c7a:	ce 01       	movw	r24, r28
     c7c:	4a 96       	adiw	r24, 0x1a	; 26
     c7e:	41 e0       	ldi	r20, 0x01	; 1
     c80:	7a dd       	rcall	.-1292   	; 0x776 <checksum>
        buf[UDP_CHECKSUM_H_P]=j>>8;
     c82:	98 a7       	lds	r25, 0x78
        buf[UDP_CHECKSUM_L_P]=j& 0xff;
     c84:	89 a7       	lds	r24, 0x79
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
     c86:	c8 01       	movw	r24, r16
     c88:	8a 96       	adiw	r24, 0x2a	; 42
     c8a:	be 01       	movw	r22, r28
     c8c:	ad dc       	rcall	.-1702   	; 0x5e8 <enc28j60PacketSend>
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	df 90       	pop	r13
     c9c:	cf 90       	pop	r12
     c9e:	08 95       	ret

00000ca0 <make_udp_reply_from_request>:
// byte for the data but udp messages are normally small.
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
{
        uint8_t i=0;
        // copy the data:
        while(i<datalen){
     ca0:	44 23       	and	r20, r20
     ca2:	51 f0       	breq	.+20     	; 0xcb8 <make_udp_reply_from_request+0x18>
     ca4:	e6 2f       	mov	r30, r22
     ca6:	f7 2f       	mov	r31, r23
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
}

// you can send a max of 220 bytes of data because we use only one
// byte for the data but udp messages are normally small.
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
     ca8:	dc 01       	movw	r26, r24
     caa:	9a 96       	adiw	r26, 0x2a	; 42
{
        uint8_t i=0;
     cac:	50 e0       	ldi	r21, 0x00	; 0
        // copy the data:
        while(i<datalen){
                buf[UDP_DATA_P+i]=data[i];
     cae:	61 91       	ld	r22, Z+
     cb0:	6d 93       	st	X+, r22
                i++;
     cb2:	5f 5f       	subi	r21, 0xFF	; 255
// byte for the data but udp messages are normally small.
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
{
        uint8_t i=0;
        // copy the data:
        while(i<datalen){
     cb4:	54 17       	cp	r21, r20
     cb6:	d9 f7       	brne	.-10     	; 0xcae <make_udp_reply_from_request+0xe>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        make_udp_reply_from_request_udpdat_ready(buf,datalen,port);
     cb8:	64 2f       	mov	r22, r20
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	a9 01       	movw	r20, r18
     cbe:	b3 df       	rcall	.-154    	; 0xc26 <make_udp_reply_from_request_udpdat_ready>
}
     cc0:	08 95       	ret

00000cc2 <init_udp_or_www_server>:

#if defined (UDP_server) || defined (WWW_server)
// This initializes server
// you must call this function once before you use any of the other functions:
// mymac may be NULL and can be used if you did already call init_mac
void init_udp_or_www_server(uint8_t *mymac,uint8_t *myip){
     cc2:	9c 01       	movw	r18, r24
        uint8_t i=0;
        if (myip){
     cc4:	61 15       	cp	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	51 f0       	breq	.+20     	; 0xcde <init_udp_or_www_server+0x1c>
     cca:	db 01       	movw	r26, r22
     ccc:	e4 ef       	ldi	r30, 0xF4	; 244
     cce:	f2 e0       	ldi	r31, 0x02	; 2

#if defined (UDP_server) || defined (WWW_server)
// This initializes server
// you must call this function once before you use any of the other functions:
// mymac may be NULL and can be used if you did already call init_mac
void init_udp_or_www_server(uint8_t *mymac,uint8_t *myip){
     cd0:	cf 01       	movw	r24, r30
     cd2:	04 96       	adiw	r24, 0x04	; 4
        uint8_t i=0;
        if (myip){
                while(i<4){
                        ipaddr[i]=myip[i];
     cd4:	4d 91       	ld	r20, X+
     cd6:	41 93       	st	Z+, r20
// you must call this function once before you use any of the other functions:
// mymac may be NULL and can be used if you did already call init_mac
void init_udp_or_www_server(uint8_t *mymac,uint8_t *myip){
        uint8_t i=0;
        if (myip){
                while(i<4){
     cd8:	e8 17       	cp	r30, r24
     cda:	f9 07       	cpc	r31, r25
     cdc:	d9 f7       	brne	.-10     	; 0xcd4 <init_udp_or_www_server+0x12>
                        ipaddr[i]=myip[i];
                        i++;
                }
        }
        if (mymac) init_mac(mymac);
     cde:	21 15       	cp	r18, r1
     ce0:	31 05       	cpc	r19, r1
     ce2:	11 f0       	breq	.+4      	; 0xce8 <init_udp_or_www_server+0x26>
     ce4:	c9 01       	movw	r24, r18
     ce6:	c4 dd       	rcall	.-1144   	; 0x870 <init_mac>
     ce8:	08 95       	ret

00000cea <www_server_port>:
#endif // UDP_server || WWW_server

#ifdef WWW_server
// not needed if you want port 80 (the default is port 80):
void www_server_port(uint16_t port){
        wwwport_h=(port>>8)&0xff;
     cea:	90 93 f8 02 	sts	0x02F8, r25
        wwwport_l=(port&0xff);
     cee:	80 93 ee 00 	sts	0x00EE, r24
}
     cf2:	08 95       	ret

00000cf4 <make_tcp_synack_from_syn>:

// this is for the server not the client:
void make_tcp_synack_from_syn(uint8_t *buf)
{
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
        uint16_t ck;
        make_eth(buf);
     cfa:	3b de       	rcall	.-906    	; 0x972 <make_eth>
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
     cfc:	18 8a       	std	Y+16, r1	; 0x10
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
     cfe:	8c e2       	ldi	r24, 0x2C	; 44
     d00:	89 8b       	std	Y+17, r24	; 0x11
        make_ip(buf);
     d02:	ce 01       	movw	r24, r28
     d04:	5d de       	rcall	.-838    	; 0x9c0 <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
     d06:	82 e1       	ldi	r24, 0x12	; 18
     d08:	8f a7       	lds	r24, 0x7f
        make_tcphead(buf,1,0);
     d0a:	ce 01       	movw	r24, r28
     d0c:	61 e0       	ldi	r22, 0x01	; 1
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	80 de       	rcall	.-768    	; 0xa14 <make_tcphead>
        // put an inital seq number
        buf[TCP_SEQ_H_P+0]= 0;
     d14:	1e a2       	lds	r17, 0x9e
        buf[TCP_SEQ_H_P+1]= 0;
     d16:	1f a2       	lds	r17, 0x9f
        // we step only the second byte, this allows us to send packts 
        // with 255 bytes, 512  or 765 (step by 3) without generating
        // overlapping numbers.
        buf[TCP_SEQ_H_P+2]= seqnum; 
     d18:	80 91 ef 00 	lds	r24, 0x00EF
     d1c:	88 a7       	lds	r24, 0x78
        buf[TCP_SEQ_H_P+3]= 0;
     d1e:	19 a6       	lds	r17, 0xb9
        // step the inititial seq num by something we will not use
        // during this tcp session:
        seqnum+=3;
     d20:	8d 5f       	subi	r24, 0xFD	; 253
     d22:	80 93 ef 00 	sts	0x00EF, r24
        // add an mss options field with MSS to 1280:
        // 1280 in hex is 0x500
        buf[TCP_OPTIONS_P]=2;
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	8e ab       	sts	0x5e, r24
        buf[TCP_OPTIONS_P+1]=4;
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8f ab       	sts	0x5f, r24
        buf[TCP_OPTIONS_P+2]=0x05;
     d2e:	85 e0       	ldi	r24, 0x05	; 5
     d30:	88 af       	sts	0x78, r24
        buf[TCP_OPTIONS_P+3]=0x0;
     d32:	19 ae       	sts	0xb9, r17
        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes.
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        buf[TCP_HEADER_LEN_P]=0x60;
     d34:	80 e6       	ldi	r24, 0x60	; 96
     d36:	8e a7       	lds	r24, 0x7e
        // here we must just be sure that the web browser contacting us
        // will send only one get packet
        buf[TCP_WIN_SIZE]=0x0a; // was 1400=0x578, 2560=0xa00 suggested by Andras Tucsni to be able to receive bigger packets
     d38:	8a e0       	ldi	r24, 0x0A	; 10
     d3a:	88 ab       	sts	0x58, r24
        buf[TCP_WIN_SIZE+1]=0; //
     d3c:	19 aa       	sts	0x99, r17
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
     d3e:	ce 01       	movw	r24, r28
     d40:	4a 96       	adiw	r24, 0x1a	; 26
     d42:	60 e2       	ldi	r22, 0x20	; 32
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	42 e0       	ldi	r20, 0x02	; 2
     d48:	16 dd       	rcall	.-1492   	; 0x776 <checksum>
        buf[TCP_CHECKSUM_H_P]=ck>>8;
     d4a:	9a ab       	sts	0x5a, r25
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
     d4c:	8b ab       	sts	0x5b, r24
        // add 4 for option mss:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
     d4e:	8a e3       	ldi	r24, 0x3A	; 58
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	be 01       	movw	r22, r28
     d54:	49 dc       	rcall	.-1902   	; 0x5e8 <enc28j60PacketSend>
}
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	08 95       	ret

00000d5c <www_server_reply>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void www_server_reply(uint8_t *buf,uint16_t dlen)
{
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ec 01       	movw	r28, r24
     d66:	8b 01       	movw	r16, r22
        make_tcp_ack_from_any(buf,info_data_len,0); // send ack for http get
     d68:	60 91 f9 02 	lds	r22, 0x02F9
     d6c:	70 91 fa 02 	lds	r23, 0x02FA
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	00 df       	rcall	.-512    	; 0xb74 <make_tcp_ack_from_any>
        // fill the header:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
     d74:	89 e1       	ldi	r24, 0x19	; 25
     d76:	8f a7       	lds	r24, 0x7f
        make_tcp_ack_with_data_noflags(buf,dlen); // send data
     d78:	ce 01       	movw	r24, r28
     d7a:	b8 01       	movw	r22, r16
     d7c:	34 df       	rcall	.-408    	; 0xbe6 <make_tcp_ack_with_data_noflags>
}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	08 95       	ret

00000d88 <register_ping_rec_callback>:
}
#endif // WWW_client

void register_ping_rec_callback(void (*callback)(uint8_t *srcip))
{
        icmp_callback=callback;
     d88:	90 93 fc 02 	sts	0x02FC, r25
     d8c:	80 93 fb 02 	sts	0x02FB, r24
}
     d90:	08 95       	ret

00000d92 <packetloop_arp_icmp_tcp>:


// return 0 to just continue in the packet loop and return the position 
// of the tcp data if there is tcp data part
uint16_t packetloop_arp_icmp_tcp(uint8_t *buf,uint16_t plen)
{
     d92:	ff 92       	push	r15
     d94:	0f 93       	push	r16
     d96:	1f 93       	push	r17
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ec 01       	movw	r28, r24
     d9e:	8b 01       	movw	r16, r22
        }
#endif // ARP_MAC_resolver_client
        // arp is broadcast if unknown but a host may also
        // verify the mac address by sending it to 
        // a unicast address.
        if(eth_type_is_arp_and_my_ip(buf,plen)){
     da0:	89 dd       	rcall	.-1262   	; 0x8b4 <eth_type_is_arp_and_my_ip>
     da2:	88 23       	and	r24, r24
     da4:	49 f0       	breq	.+18     	; 0xdb8 <packetloop_arp_icmp_tcp+0x26>
                if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
     da6:	8d 89       	ldd	r24, Y+21	; 0x15
     da8:	81 30       	cpi	r24, 0x01	; 1
     daa:	09 f0       	breq	.+2      	; 0xdae <packetloop_arp_icmp_tcp+0x1c>
     dac:	61 c0       	rjmp	.+194    	; 0xe70 <packetloop_arp_icmp_tcp+0xde>
                        // is it an arp request 
                        make_arp_answer_from_request(buf);
     dae:	ce 01       	movw	r24, r28
     db0:	45 de       	rcall	.-886    	; 0xa3c <make_arp_answer_from_request>
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
                        arpip_state=WGW_HAVE_MAC;
                }
#endif // ARP_MAC_resolver_client
                return(0);
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	73 c0       	rjmp	.+230    	; 0xe9e <packetloop_arp_icmp_tcp+0x10c>

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
     db8:	ce 01       	movw	r24, r28
     dba:	b8 01       	movw	r22, r16
     dbc:	a8 dd       	rcall	.-1200   	; 0x90e <eth_type_is_ip_and_my_ip>
     dbe:	88 23       	and	r24, r24
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <packetloop_arp_icmp_tcp+0x32>
     dc2:	59 c0       	rjmp	.+178    	; 0xe76 <packetloop_arp_icmp_tcp+0xe4>
                return(0);
        }
        if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
     dc4:	8f 89       	ldd	r24, Y+23	; 0x17
     dc6:	81 30       	cpi	r24, 0x01	; 1
     dc8:	91 f4       	brne	.+36     	; 0xdee <packetloop_arp_icmp_tcp+0x5c>
     dca:	9a a1       	lds	r25, 0x4a
     dcc:	98 30       	cpi	r25, 0x08	; 8
     dce:	79 f4       	brne	.+30     	; 0xdee <packetloop_arp_icmp_tcp+0x5c>
                if (icmp_callback){
     dd0:	e0 91 fb 02 	lds	r30, 0x02FB
     dd4:	f0 91 fc 02 	lds	r31, 0x02FC
     dd8:	30 97       	sbiw	r30, 0x00	; 0
     dda:	19 f0       	breq	.+6      	; 0xde2 <packetloop_arp_icmp_tcp+0x50>
                        (*icmp_callback)(&(buf[IP_SRC_P]));
     ddc:	ce 01       	movw	r24, r28
     dde:	4a 96       	adiw	r24, 0x1a	; 26
     de0:	09 95       	icall
                }
                // a ping packet, let's send pong
                make_echo_reply_from_request(buf,plen);
     de2:	ce 01       	movw	r24, r28
     de4:	b8 01       	movw	r22, r16
     de6:	5b de       	rcall	.-842    	; 0xa9e <make_echo_reply_from_request>
                return(0);
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	58 c0       	rjmp	.+176    	; 0xe9e <packetloop_arp_icmp_tcp+0x10c>
        }
        if (plen<54 && buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
     dee:	06 33       	cpi	r16, 0x36	; 54
     df0:	11 05       	cpc	r17, r1
     df2:	20 f4       	brcc	.+8      	; 0xdfc <packetloop_arp_icmp_tcp+0x6a>
     df4:	86 30       	cpi	r24, 0x06	; 6
     df6:	09 f0       	breq	.+2      	; 0xdfa <packetloop_arp_icmp_tcp+0x68>
     df8:	41 c0       	rjmp	.+130    	; 0xe7c <packetloop_arp_icmp_tcp+0xea>
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <packetloop_arp_icmp_tcp+0x70>
        }
#endif // TCP_client
        //
#ifdef WWW_server
        // tcp port web server start
        if (buf[IP_PROTO_P]==IP_PROTO_TCP_V && buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT_L_P]==wwwport_l){
     dfc:	86 30       	cpi	r24, 0x06	; 6
     dfe:	09 f0       	breq	.+2      	; 0xe02 <packetloop_arp_icmp_tcp+0x70>
     e00:	40 c0       	rjmp	.+128    	; 0xe82 <packetloop_arp_icmp_tcp+0xf0>
     e02:	9c a1       	lds	r25, 0x4c
     e04:	80 91 f8 02 	lds	r24, 0x02F8
     e08:	98 17       	cp	r25, r24
     e0a:	f1 f5       	brne	.+124    	; 0xe88 <packetloop_arp_icmp_tcp+0xf6>
     e0c:	9d a1       	lds	r25, 0x4d
     e0e:	80 91 ee 00 	lds	r24, 0x00EE
     e12:	98 17       	cp	r25, r24
     e14:	e1 f5       	brne	.+120    	; 0xe8e <packetloop_arp_icmp_tcp+0xfc>
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
     e16:	ff a4       	lds	r31, 0xaf
     e18:	f1 fe       	sbrs	r15, 1
     e1a:	05 c0       	rjmp	.+10     	; 0xe26 <packetloop_arp_icmp_tcp+0x94>
                        make_tcp_synack_from_syn(buf);
     e1c:	ce 01       	movw	r24, r28
     e1e:	6a df       	rcall	.-300    	; 0xcf4 <make_tcp_synack_from_syn>
                        // make_tcp_synack_from_syn does already send the syn,ack
                        return(0);
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	3c c0       	rjmp	.+120    	; 0xe9e <packetloop_arp_icmp_tcp+0x10c>
                }
                if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
     e26:	f4 fe       	sbrs	r15, 4
     e28:	35 c0       	rjmp	.+106    	; 0xe94 <packetloop_arp_icmp_tcp+0x102>
                        info_data_len=get_tcp_data_len(buf);
     e2a:	ce 01       	movw	r24, r28
     e2c:	52 de       	rcall	.-860    	; 0xad2 <get_tcp_data_len>
     e2e:	90 93 fa 02 	sts	0x02FA, r25
     e32:	80 93 f9 02 	sts	0x02F9, r24
                        // we can possibly have no data, just ack:
                        // Here we misuse plen for something else to save a variable.
                        // plen is now the position of start of the tcp user data.
                        if (info_data_len==0){
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	51 f4       	brne	.+20     	; 0xe4e <packetloop_arp_icmp_tcp+0xbc>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
     e3a:	f0 fe       	sbrs	r15, 0
     e3c:	2e c0       	rjmp	.+92     	; 0xe9a <packetloop_arp_icmp_tcp+0x108>
                                        // finack, answer with ack
                                        make_tcp_ack_from_any(buf,0,0);
     e3e:	ce 01       	movw	r24, r28
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	96 de       	rcall	.-724    	; 0xb74 <make_tcp_ack_from_any>
                                }
                                // just an ack with no data, wait for next packet
                                return(0);
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	28 c0       	rjmp	.+80     	; 0xe9e <packetloop_arp_icmp_tcp+0x10c>
                        }
                        // Here we misuse len for something else to save a variable
                        len=TCP_DATA_START; // TCP_DATA_START is a formula
     e4e:	8e a5       	lds	r24, 0x6e
     e50:	82 95       	swap	r24
     e52:	8f 70       	andi	r24, 0x0F	; 15
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	82 96       	adiw	r24, 0x22	; 34
                        // check for data corruption
                        if (len>plen-8){
     e60:	08 50       	subi	r16, 0x08	; 8
     e62:	10 40       	sbci	r17, 0x00	; 0
     e64:	08 17       	cp	r16, r24
     e66:	19 07       	cpc	r17, r25
     e68:	d0 f4       	brcc	.+52     	; 0xe9e <packetloop_arp_icmp_tcp+0x10c>
                                return(0);
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	17 c0       	rjmp	.+46     	; 0xe9e <packetloop_arp_icmp_tcp+0x10c>
                        if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp reply for the IP we were searching           
                        (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MAC_P);
                        arpip_state=WGW_HAVE_MAC;
                }
#endif // ARP_MAC_resolver_client
                return(0);
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	14 c0       	rjmp	.+40     	; 0xe9e <packetloop_arp_icmp_tcp+0x10c>

        }
        // check if ip packets are for us:
        if(eth_type_is_ip_and_my_ip(buf,plen)==0){
                return(0);
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	11 c0       	rjmp	.+34     	; 0xe9e <packetloop_arp_icmp_tcp+0x10c>
                make_echo_reply_from_request(buf,plen);
                return(0);
        }
        if (plen<54 && buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
                // smaller than the smallest TCP packet and not tcp port
                return(0);
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	0e c0       	rjmp	.+28     	; 0xe9e <packetloop_arp_icmp_tcp+0x10c>
                        }
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0b c0       	rjmp	.+22     	; 0xe9e <packetloop_arp_icmp_tcp+0x10c>
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	08 c0       	rjmp	.+16     	; 0xe9e <packetloop_arp_icmp_tcp+0x10c>
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	05 c0       	rjmp	.+10     	; 0xe9e <packetloop_arp_icmp_tcp+0x10c>
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <packetloop_arp_icmp_tcp+0x10c>
                                if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
                                        // finack, answer with ack
                                        make_tcp_ack_from_any(buf,0,0);
                                }
                                // just an ack with no data, wait for next packet
                                return(0);
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	90 e0       	ldi	r25, 0x00	; 0
                        return(len);
                }
        }
#endif // WWW_server
        return(0);
}
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	08 95       	ret

00000eaa <micros>:
/************************************************************************
 * Returns the number of microseconds since the uC board began 
 * running the current program. This number will overflow (go back to zero), 
 * after approximately 70 minutes. 
 ************************************************************************/
unsigned long micros() {
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
	unsigned long m, t;
	uint8_t oldSREG = SREG;
     eae:	4f b7       	in	r20, 0x3f	; 63
	cli();
     eb0:	f8 94       	cli
	t = TCNT0;
     eb2:	82 b7       	in	r24, 0x32	; 50
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	a0 e0       	ldi	r26, 0x00	; 0
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
	if ((TIFR & _BV(TOV0)) && (t == 0)) t = 256;
     eba:	08 b6       	in	r0, 0x38	; 56
     ebc:	00 fe       	sbrs	r0, 0
     ebe:	08 c0       	rjmp	.+16     	; 0xed0 <micros+0x26>
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	a1 05       	cpc	r26, r1
     ec4:	b1 05       	cpc	r27, r1
     ec6:	21 f4       	brne	.+8      	; 0xed0 <micros+0x26>
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	a0 e0       	ldi	r26, 0x00	; 0
     ece:	b0 e0       	ldi	r27, 0x00	; 0
	m = timer0_overflow_count;
     ed0:	00 91 fd 02 	lds	r16, 0x02FD
     ed4:	10 91 fe 02 	lds	r17, 0x02FE
     ed8:	20 91 ff 02 	lds	r18, 0x02FF
     edc:	30 91 00 03 	lds	r19, 0x0300
	SREG = oldSREG;	
     ee0:	4f bf       	out	0x3f, r20	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     ee2:	32 2f       	mov	r19, r18
     ee4:	21 2f       	mov	r18, r17
     ee6:	10 2f       	mov	r17, r16
     ee8:	00 27       	eor	r16, r16
     eea:	80 0f       	add	r24, r16
     eec:	91 1f       	adc	r25, r17
     eee:	a2 1f       	adc	r26, r18
     ef0:	b3 1f       	adc	r27, r19
     ef2:	8c 01       	movw	r16, r24
     ef4:	9d 01       	movw	r18, r26
     ef6:	00 0f       	add	r16, r16
     ef8:	11 1f       	adc	r17, r17
     efa:	22 1f       	adc	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	00 0f       	add	r16, r16
     f00:	11 1f       	adc	r17, r17
     f02:	22 1f       	adc	r18, r18
     f04:	33 1f       	adc	r19, r19
}
     f06:	60 2f       	mov	r22, r16
     f08:	71 2f       	mov	r23, r17
     f0a:	82 2f       	mov	r24, r18
     f0c:	93 2f       	mov	r25, r19
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	08 95       	ret

00000f14 <DHT11_read>:

// Based on Arduino code: http://arduino.cc/playground/Main/DHT11Lib
int DHT11_read(int *temp, int *humidity)
{
     f14:	2f 92       	push	r2
     f16:	3f 92       	push	r3
     f18:	5f 92       	push	r5
     f1a:	6f 92       	push	r6
     f1c:	7f 92       	push	r7
     f1e:	8f 92       	push	r8
     f20:	9f 92       	push	r9
     f22:	af 92       	push	r10
     f24:	bf 92       	push	r11
     f26:	cf 92       	push	r12
     f28:	df 92       	push	r13
     f2a:	ef 92       	push	r14
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	27 97       	sbiw	r28, 0x07	; 7
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	9f 83       	std	Y+7, r25	; 0x07
     f48:	8e 83       	std	Y+6, r24	; 0x06
     f4a:	1b 01       	movw	r2, r22
	uint8_t bits[5];
	uint8_t cnt = 7;
	uint8_t idx = 0;

	// EMPTY BUFFER
	for (int i=0; i< 5; i++) bits[i] = 0;
     f4c:	19 82       	std	Y+1, r1	; 0x01
     f4e:	1a 82       	std	Y+2, r1	; 0x02
     f50:	1b 82       	std	Y+3, r1	; 0x03
     f52:	1c 82       	std	Y+4, r1	; 0x04
     f54:	1d 82       	std	Y+5, r1	; 0x05

	// REQUEST SAMPLE
	DHT11_OUTPUT_MODE();
     f56:	a1 9a       	sbi	0x14, 1	; 20
	DHT11_LOW();
     f58:	a9 98       	cbi	0x15, 1	; 21
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	90 ee       	ldi	r25, 0xE0	; 224
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	81 50       	subi	r24, 0x01	; 1
     f62:	90 40       	sbci	r25, 0x00	; 0
     f64:	a0 40       	sbci	r26, 0x00	; 0
     f66:	e1 f7       	brne	.-8      	; 0xf60 <DHT11_read+0x4c>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <DHT11_read+0x56>
     f6a:	00 00       	nop
	_delay_ms(18);
	DHT11_HIGH();
     f6c:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f6e:	95 ed       	ldi	r25, 0xD5	; 213
     f70:	9a 95       	dec	r25
     f72:	f1 f7       	brne	.-4      	; 0xf70 <DHT11_read+0x5c>
     f74:	00 00       	nop
	_delay_us(40);
	DHT11_INPUT_MODE();
     f76:	a1 98       	cbi	0x14, 1	; 20

	// ACKNOWLEDGE or TIMEOUT
	unsigned int loopCnt = 10000;
	
	while(!(DHT11_PIN&(1<<DHT11_DQ))) //pin is low
     f78:	81 e1       	ldi	r24, 0x11	; 17
     f7a:	97 e2       	ldi	r25, 0x27	; 39
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <DHT11_read+0x70>
     f7e:	01 97       	sbiw	r24, 0x01	; 1
		if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;
     f80:	09 f4       	brne	.+2      	; 0xf84 <DHT11_read+0x70>
     f82:	69 c0       	rjmp	.+210    	; 0x1056 <DHT11_read+0x142>
	DHT11_INPUT_MODE();

	// ACKNOWLEDGE or TIMEOUT
	unsigned int loopCnt = 10000;
	
	while(!(DHT11_PIN&(1<<DHT11_DQ))) //pin is low
     f84:	99 9b       	sbis	0x13, 1	; 19
     f86:	fb cf       	rjmp	.-10     	; 0xf7e <DHT11_read+0x6a>
     f88:	81 e1       	ldi	r24, 0x11	; 17
     f8a:	97 e2       	ldi	r25, 0x27	; 39
     f8c:	03 c0       	rjmp	.+6      	; 0xf94 <DHT11_read+0x80>
     f8e:	01 97       	sbiw	r24, 0x01	; 1
		if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;

	loopCnt = 10000;
	while((DHT11_PIN&(1<<DHT11_DQ))) // pin is high
	if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;
     f90:	09 f4       	brne	.+2      	; 0xf94 <DHT11_read+0x80>
     f92:	64 c0       	rjmp	.+200    	; 0x105c <DHT11_read+0x148>
	
	while(!(DHT11_PIN&(1<<DHT11_DQ))) //pin is low
		if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;

	loopCnt = 10000;
	while((DHT11_PIN&(1<<DHT11_DQ))) // pin is high
     f94:	99 99       	sbic	0x13, 1	; 19
     f96:	fb cf       	rjmp	.-10     	; 0xf8e <DHT11_read+0x7a>
     f98:	0f 2e       	mov	r0, r31
     f9a:	f8 e2       	ldi	r31, 0x28	; 40
     f9c:	af 2e       	mov	r10, r31
     f9e:	bb 24       	eor	r11, r11
     fa0:	f0 2d       	mov	r31, r0
     fa2:	00 e0       	ldi	r16, 0x00	; 0
     fa4:	17 e0       	ldi	r17, 0x07	; 7
     fa6:	0f 2e       	mov	r0, r31
     fa8:	f1 e1       	ldi	r31, 0x11	; 17
     faa:	8f 2e       	mov	r8, r31
     fac:	f7 e2       	ldi	r31, 0x27	; 39
     fae:	9f 2e       	mov	r9, r31
     fb0:	f0 2d       	mov	r31, r0

		loopCnt = 10000;
		while((DHT11_PIN&(1<<DHT11_DQ))) //high
			if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;

		if ((micros() - t) > 40) bits[idx] |= (1 << cnt);
     fb2:	66 24       	eor	r6, r6
     fb4:	77 24       	eor	r7, r7
     fb6:	63 94       	inc	r6
		if (cnt == 0)   // next byte?
		{
			cnt = 7;    // restart at MSB
     fb8:	0f 2e       	mov	r0, r31
     fba:	f7 e0       	ldi	r31, 0x07	; 7
     fbc:	5f 2e       	mov	r5, r31
     fbe:	f0 2d       	mov	r31, r0
     fc0:	03 c0       	rjmp	.+6      	; 0xfc8 <DHT11_read+0xb4>
	
	while(!(DHT11_PIN&(1<<DHT11_DQ))) //pin is low
		if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;

	loopCnt = 10000;
	while((DHT11_PIN&(1<<DHT11_DQ))) // pin is high
     fc2:	01 97       	sbiw	r24, 0x01	; 1
	// READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
	for (int i=0; i<40; i++)
	{
		loopCnt = 10000;
		while(!(DHT11_PIN&(1<<DHT11_DQ)))
			if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;
     fc4:	11 f4       	brne	.+4      	; 0xfca <DHT11_read+0xb6>
     fc6:	4d c0       	rjmp	.+154    	; 0x1062 <DHT11_read+0x14e>
	
	while(!(DHT11_PIN&(1<<DHT11_DQ))) //pin is low
		if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;

	loopCnt = 10000;
	while((DHT11_PIN&(1<<DHT11_DQ))) // pin is high
     fc8:	c4 01       	movw	r24, r8

	// READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
	for (int i=0; i<40; i++)
	{
		loopCnt = 10000;
		while(!(DHT11_PIN&(1<<DHT11_DQ)))
     fca:	99 9b       	sbis	0x13, 1	; 19
     fcc:	fa cf       	rjmp	.-12     	; 0xfc2 <DHT11_read+0xae>
			if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;

		unsigned long t = micros();
     fce:	6d df       	rcall	.-294    	; 0xeaa <micros>
     fd0:	6b 01       	movw	r12, r22
     fd2:	7c 01       	movw	r14, r24

		loopCnt = 10000;
		while((DHT11_PIN&(1<<DHT11_DQ))) //high
     fd4:	c4 01       	movw	r24, r8
     fd6:	03 c0       	rjmp	.+6      	; 0xfde <DHT11_read+0xca>
     fd8:	01 97       	sbiw	r24, 0x01	; 1
			if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;
     fda:	09 f4       	brne	.+2      	; 0xfde <DHT11_read+0xca>
     fdc:	45 c0       	rjmp	.+138    	; 0x1068 <DHT11_read+0x154>
			if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;

		unsigned long t = micros();

		loopCnt = 10000;
		while((DHT11_PIN&(1<<DHT11_DQ))) //high
     fde:	99 99       	sbic	0x13, 1	; 19
     fe0:	fb cf       	rjmp	.-10     	; 0xfd8 <DHT11_read+0xc4>
			if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;

		if ((micros() - t) > 40) bits[idx] |= (1 << cnt);
     fe2:	63 df       	rcall	.-314    	; 0xeaa <micros>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	8c 19       	sub	r24, r12
     fea:	9d 09       	sbc	r25, r13
     fec:	ae 09       	sbc	r26, r14
     fee:	bf 09       	sbc	r27, r15
     ff0:	89 32       	cpi	r24, 0x29	; 41
     ff2:	91 05       	cpc	r25, r1
     ff4:	a1 05       	cpc	r26, r1
     ff6:	b1 05       	cpc	r27, r1
     ff8:	80 f0       	brcs	.+32     	; 0x101a <DHT11_read+0x106>
     ffa:	e1 e0       	ldi	r30, 0x01	; 1
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	ec 0f       	add	r30, r28
    1000:	fd 1f       	adc	r31, r29
    1002:	e0 0f       	add	r30, r16
    1004:	f1 1d       	adc	r31, r1
    1006:	c3 01       	movw	r24, r6
    1008:	01 2e       	mov	r0, r17
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DHT11_read+0xfc>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DHT11_read+0xf8>
    1014:	90 81       	ld	r25, Z
    1016:	89 2b       	or	r24, r25
    1018:	80 83       	st	Z, r24
		if (cnt == 0)   // next byte?
    101a:	11 23       	and	r17, r17
    101c:	19 f4       	brne	.+6      	; 0x1024 <DHT11_read+0x110>
		{
			cnt = 7;    // restart at MSB
			idx++;      // next byte!
    101e:	0f 5f       	subi	r16, 0xFF	; 255
			if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;

		if ((micros() - t) > 40) bits[idx] |= (1 << cnt);
		if (cnt == 0)   // next byte?
		{
			cnt = 7;    // restart at MSB
    1020:	15 2d       	mov	r17, r5
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <DHT11_read+0x112>
			idx++;      // next byte!
		}
		else cnt--;
    1024:	11 50       	subi	r17, 0x01	; 1
    1026:	08 94       	sec
    1028:	a1 08       	sbc	r10, r1
    102a:	b1 08       	sbc	r11, r1
	loopCnt = 10000;
	while((DHT11_PIN&(1<<DHT11_DQ))) // pin is high
	if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;

	// READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
	for (int i=0; i<40; i++)
    102c:	a1 14       	cp	r10, r1
    102e:	b1 04       	cpc	r11, r1
    1030:	59 f6       	brne	.-106    	; 0xfc8 <DHT11_read+0xb4>
		else cnt--;
	}

	// WRITE TO RIGHT VARS
	// as bits[1] and bits[3] are always zero they are omitted 
	*humidity    = bits[0];
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	d1 01       	movw	r26, r2
    1036:	8c 93       	st	X, r24
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	1c 92       	st	X, r1
    103c:	11 97       	sbiw	r26, 0x01	; 1
	*temp = bits[2];
    103e:	9b 81       	ldd	r25, Y+3	; 0x03
    1040:	ee 81       	ldd	r30, Y+6	; 0x06
    1042:	ff 81       	ldd	r31, Y+7	; 0x07
    1044:	90 83       	st	Z, r25
    1046:	11 82       	std	Z+1, r1	; 0x01

	uint8_t sum = bits[0] + bits[2];
    1048:	89 0f       	add	r24, r25

	if (bits[4] != sum) return DHTLIB_ERROR_CHECKSUM;
    104a:	9d 81       	ldd	r25, Y+5	; 0x05
    104c:	98 17       	cp	r25, r24
    104e:	79 f0       	breq	.+30     	; 0x106e <DHT11_read+0x15a>
    1050:	8f ef       	ldi	r24, 0xFF	; 255
    1052:	9f ef       	ldi	r25, 0xFF	; 255
    1054:	0e c0       	rjmp	.+28     	; 0x1072 <DHT11_read+0x15e>

	// ACKNOWLEDGE or TIMEOUT
	unsigned int loopCnt = 10000;
	
	while(!(DHT11_PIN&(1<<DHT11_DQ))) //pin is low
		if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;
    1056:	8e ef       	ldi	r24, 0xFE	; 254
    1058:	9f ef       	ldi	r25, 0xFF	; 255
    105a:	0b c0       	rjmp	.+22     	; 0x1072 <DHT11_read+0x15e>

	loopCnt = 10000;
	while((DHT11_PIN&(1<<DHT11_DQ))) // pin is high
	if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;
    105c:	8e ef       	ldi	r24, 0xFE	; 254
    105e:	9f ef       	ldi	r25, 0xFF	; 255
    1060:	08 c0       	rjmp	.+16     	; 0x1072 <DHT11_read+0x15e>
	// READ OUTPUT - 40 BITS => 5 BYTES or TIMEOUT
	for (int i=0; i<40; i++)
	{
		loopCnt = 10000;
		while(!(DHT11_PIN&(1<<DHT11_DQ)))
			if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;
    1062:	8e ef       	ldi	r24, 0xFE	; 254
    1064:	9f ef       	ldi	r25, 0xFF	; 255
    1066:	05 c0       	rjmp	.+10     	; 0x1072 <DHT11_read+0x15e>

		unsigned long t = micros();

		loopCnt = 10000;
		while((DHT11_PIN&(1<<DHT11_DQ))) //high
			if (loopCnt-- == 0) return DHTLIB_ERROR_TIMEOUT;
    1068:	8e ef       	ldi	r24, 0xFE	; 254
    106a:	9f ef       	ldi	r25, 0xFF	; 255
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <DHT11_read+0x15e>
	*temp = bits[2];

	uint8_t sum = bits[0] + bits[2];

	if (bits[4] != sum) return DHTLIB_ERROR_CHECKSUM;
	return DHTLIB_OK;
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
}
    1072:	27 96       	adiw	r28, 0x07	; 7
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	1f 91       	pop	r17
    1084:	0f 91       	pop	r16
    1086:	ff 90       	pop	r15
    1088:	ef 90       	pop	r14
    108a:	df 90       	pop	r13
    108c:	cf 90       	pop	r12
    108e:	bf 90       	pop	r11
    1090:	af 90       	pop	r10
    1092:	9f 90       	pop	r9
    1094:	8f 90       	pop	r8
    1096:	7f 90       	pop	r7
    1098:	6f 90       	pop	r6
    109a:	5f 90       	pop	r5
    109c:	3f 90       	pop	r3
    109e:	2f 90       	pop	r2
    10a0:	08 95       	ret

000010a2 <therm_ds1820_reset>:

uint8_t therm_ds1820_reset()
{
	uint8_t i;
	//Pull line low and wait for 480uS
	THERM_DS1820_LOW();
    10a2:	aa 98       	cbi	0x15, 2	; 21
	THERM_DS1820_OUTPUT_MODE();
    10a4:	a2 9a       	sbi	0x14, 2	; 20
    10a6:	87 eb       	ldi	r24, 0xB7	; 183
    10a8:	96 e0       	ldi	r25, 0x06	; 6
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	f1 f7       	brne	.-4      	; 0x10aa <therm_ds1820_reset+0x8>
    10ae:	00 c0       	rjmp	.+0      	; 0x10b0 <therm_ds1820_reset+0xe>
    10b0:	00 00       	nop
	//fcpu_delay_us(430);	//480 //this must be smaller when moving delay func to other .c file
	_delay_us(430);
	//Release line and wait for 60uS
	THERM_DS1820_INPUT_MODE();
    10b2:	a2 98       	cbi	0x14, 2	; 20
    10b4:	ef ee       	ldi	r30, 0xEF	; 239
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	31 97       	sbiw	r30, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <therm_ds1820_reset+0x16>
    10bc:	00 c0       	rjmp	.+0      	; 0x10be <therm_ds1820_reset+0x1c>
    10be:	00 00       	nop
	_delay_us(60);
	//Store line value and wait until the completion of 480uS period
	i=(THERM_DS1820_PIN & (1<<THERM_DS1820_DQ));
    10c0:	83 b3       	in	r24, 0x13	; 19
    10c2:	ef e8       	ldi	r30, 0x8F	; 143
    10c4:	f6 e0       	ldi	r31, 0x06	; 6
    10c6:	31 97       	sbiw	r30, 0x01	; 1
    10c8:	f1 f7       	brne	.-4      	; 0x10c6 <therm_ds1820_reset+0x24>
    10ca:	00 c0       	rjmp	.+0      	; 0x10cc <therm_ds1820_reset+0x2a>
    10cc:	00 00       	nop
	_delay_us(420);
	//Return the value read from the presence pulse (0=OK, 1=WRONG)
	return i;
}
    10ce:	84 70       	andi	r24, 0x04	; 4
    10d0:	08 95       	ret

000010d2 <therm_ds1820_write_bit>:

void therm_ds1820_write_bit(uint8_t bit)
{
	//Pull line low for 1uS
	THERM_DS1820_LOW();
    10d2:	aa 98       	cbi	0x15, 2	; 21
	THERM_DS1820_OUTPUT_MODE();
    10d4:	a2 9a       	sbi	0x14, 2	; 20
    10d6:	95 e0       	ldi	r25, 0x05	; 5
    10d8:	9a 95       	dec	r25
    10da:	f1 f7       	brne	.-4      	; 0x10d8 <therm_ds1820_write_bit+0x6>
    10dc:	00 00       	nop
	_delay_us(1);
	//If we want to write 1, release the line (if not will keep low)
	if(bit) THERM_DS1820_INPUT_MODE();
    10de:	81 11       	cpse	r24, r1
    10e0:	a2 98       	cbi	0x14, 2	; 20
    10e2:	87 ec       	ldi	r24, 0xC7	; 199
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <therm_ds1820_write_bit+0x14>
    10ea:	00 c0       	rjmp	.+0      	; 0x10ec <therm_ds1820_write_bit+0x1a>
    10ec:	00 00       	nop
	//Wait for 60uS and release the line
	_delay_us(50);
	THERM_DS1820_INPUT_MODE();
    10ee:	a2 98       	cbi	0x14, 2	; 20
}
    10f0:	08 95       	ret

000010f2 <therm_ds1820_read_bit>:

uint8_t therm_ds1820_read_bit(void)
{
	uint8_t bit=0;
	//Pull line low for 1uS
	THERM_DS1820_LOW();
    10f2:	aa 98       	cbi	0x15, 2	; 21
	THERM_DS1820_OUTPUT_MODE();
    10f4:	a2 9a       	sbi	0x14, 2	; 20
    10f6:	80 e1       	ldi	r24, 0x10	; 16
    10f8:	8a 95       	dec	r24
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <therm_ds1820_read_bit+0x6>
	_delay_us(3);
	//Release line and wait for 14uS
	THERM_DS1820_INPUT_MODE();
    10fc:	a2 98       	cbi	0x14, 2	; 20
    10fe:	e5 e3       	ldi	r30, 0x35	; 53
    1100:	ea 95       	dec	r30
    1102:	f1 f7       	brne	.-4      	; 0x1100 <therm_ds1820_read_bit+0xe>
    1104:	00 00       	nop
	_delay_us(10);
	//Read line value
	if(THERM_DS1820_PIN&(1<<THERM_DS1820_DQ)) bit=1;
    1106:	93 b3       	in	r25, 0x13	; 19
    1108:	e3 ed       	ldi	r30, 0xD3	; 211
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	31 97       	sbiw	r30, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <therm_ds1820_read_bit+0x1a>
    1110:	00 c0       	rjmp	.+0      	; 0x1112 <therm_ds1820_read_bit+0x20>
    1112:	00 00       	nop
	THERM_DS1820_INPUT_MODE();
}

uint8_t therm_ds1820_read_bit(void)
{
	uint8_t bit=0;
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	92 ff       	sbrs	r25, 2
    1118:	80 e0       	ldi	r24, 0x00	; 0
	//Read line value
	if(THERM_DS1820_PIN&(1<<THERM_DS1820_DQ)) bit=1;
	//Wait for 45uS to end and return read value
	_delay_us(53);
	return bit;
}
    111a:	08 95       	ret

0000111c <therm_ds1820_read_byte>:

uint8_t therm_ds1820_read_byte(void)
{
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
    1120:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t i=8, n=0;
    1122:	d0 e0       	ldi	r29, 0x00	; 0
	while(i--) {
		//Shift one position right and store read value
		n>>=1;
		n|=(therm_ds1820_read_bit()<<7);
    1124:	e6 df       	rcall	.-52     	; 0x10f2 <therm_ds1820_read_bit>
    1126:	87 95       	ror	r24
    1128:	88 27       	eor	r24, r24
    112a:	87 95       	ror	r24
uint8_t therm_ds1820_read_byte(void)
{
	uint8_t i=8, n=0;
	while(i--) {
		//Shift one position right and store read value
		n>>=1;
    112c:	d6 95       	lsr	r29
		n|=(therm_ds1820_read_bit()<<7);
    112e:	d8 2b       	or	r29, r24
    1130:	c1 50       	subi	r28, 0x01	; 1
}

uint8_t therm_ds1820_read_byte(void)
{
	uint8_t i=8, n=0;
	while(i--) {
    1132:	c1 f7       	brne	.-16     	; 0x1124 <therm_ds1820_read_byte+0x8>
		//Shift one position right and store read value
		n>>=1;
		n|=(therm_ds1820_read_bit()<<7);
	}
	return n;
}
    1134:	8d 2f       	mov	r24, r29
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	08 95       	ret

0000113c <therm_ds1820_read_word>:

uint16_t therm_ds1820_read_word(void)
{
    113c:	ef 92       	push	r14
    113e:	ff 92       	push	r15
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	00 e1       	ldi	r16, 0x10	; 16
    114a:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t i=16, n=0;
    114c:	c0 e0       	ldi	r28, 0x00	; 0
    114e:	d0 e0       	ldi	r29, 0x00	; 0
	while(i--) {
		//Shift one position right and store read value
		n>>=1;
    1150:	d6 95       	lsr	r29
    1152:	c7 95       	ror	r28
		n|=(therm_ds1820_read_bit()<<15);
    1154:	ce df       	rcall	.-100    	; 0x10f2 <therm_ds1820_read_bit>
    1156:	f8 2e       	mov	r15, r24
    1158:	f7 94       	ror	r15
    115a:	ff 24       	eor	r15, r15
    115c:	f7 94       	ror	r15
    115e:	ee 24       	eor	r14, r14
    1160:	ce 29       	or	r28, r14
    1162:	df 29       	or	r29, r15
    1164:	01 50       	subi	r16, 0x01	; 1
    1166:	10 40       	sbci	r17, 0x00	; 0
}

uint16_t therm_ds1820_read_word(void)
{
	uint16_t i=16, n=0;
	while(i--) {
    1168:	99 f7       	brne	.-26     	; 0x1150 <therm_ds1820_read_word+0x14>
		//Shift one position right and store read value
		n>>=1;
		n|=(therm_ds1820_read_bit()<<15);
	}
	return n;
}
    116a:	8c 2f       	mov	r24, r28
    116c:	9d 2f       	mov	r25, r29
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	ff 90       	pop	r15
    1178:	ef 90       	pop	r14
    117a:	08 95       	ret

0000117c <therm_ds1820_write_byte>:

void therm_ds1820_write_byte(uint8_t byte)
{
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	d8 2f       	mov	r29, r24
    1182:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t i=8;
	while(i--) {
		//Write actual bit and shift one position right to make the next bit ready
		therm_ds1820_write_bit(byte&1);
    1184:	8d 2f       	mov	r24, r29
    1186:	81 70       	andi	r24, 0x01	; 1
    1188:	a4 df       	rcall	.-184    	; 0x10d2 <therm_ds1820_write_bit>
		byte>>=1;
    118a:	d6 95       	lsr	r29
    118c:	c1 50       	subi	r28, 0x01	; 1
}

void therm_ds1820_write_byte(uint8_t byte)
{
	uint8_t i=8;
	while(i--) {
    118e:	d1 f7       	brne	.-12     	; 0x1184 <therm_ds1820_write_byte+0x8>
		//Write actual bit and shift one position right to make the next bit ready
		therm_ds1820_write_bit(byte&1);
		byte>>=1;
	}
}
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	08 95       	ret

00001196 <therm_ds1820_read_temperature>:


int therm_ds1820_read_temperature()
{
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
	//Reset, skip ROM and start temperature conversion
	therm_ds1820_reset();
    119a:	83 df       	rcall	.-250    	; 0x10a2 <therm_ds1820_reset>
	therm_ds1820_write_byte(THERM_DS1820_CMD_SKIPROM);
    119c:	8c ec       	ldi	r24, 0xCC	; 204
    119e:	ee df       	rcall	.-36     	; 0x117c <therm_ds1820_write_byte>
	therm_ds1820_write_byte(THERM_DS1820_CMD_CONVERTTEMP);
    11a0:	84 e4       	ldi	r24, 0x44	; 68
    11a2:	ec df       	rcall	.-40     	; 0x117c <therm_ds1820_write_byte>
	
	//Wait until conversion is complete
	while(!therm_ds1820_read_bit());
    11a4:	a6 df       	rcall	.-180    	; 0x10f2 <therm_ds1820_read_bit>
    11a6:	88 23       	and	r24, r24
    11a8:	e9 f3       	breq	.-6      	; 0x11a4 <therm_ds1820_read_temperature+0xe>
	
	//Reset, skip ROM and send command to read Scratchpad
	therm_ds1820_reset();
    11aa:	7b df       	rcall	.-266    	; 0x10a2 <therm_ds1820_reset>
	therm_ds1820_write_byte(THERM_DS1820_CMD_SKIPROM);
    11ac:	8c ec       	ldi	r24, 0xCC	; 204
    11ae:	e6 df       	rcall	.-52     	; 0x117c <therm_ds1820_write_byte>
	therm_ds1820_write_byte(THERM_DS1820_CMD_RSCRATCHPAD);
    11b0:	8e eb       	ldi	r24, 0xBE	; 190
    11b2:	e4 df       	rcall	.-56     	; 0x117c <therm_ds1820_write_byte>
	uint8_t l = therm_ds1820_read_byte();
    11b4:	b3 df       	rcall	.-154    	; 0x111c <therm_ds1820_read_byte>
    11b6:	c8 2f       	mov	r28, r24
	uint8_t h = therm_ds1820_read_byte();
    11b8:	b1 df       	rcall	.-158    	; 0x111c <therm_ds1820_read_byte>
    11ba:	d8 2f       	mov	r29, r24
	therm_ds1820_reset();
    11bc:	72 df       	rcall	.-284    	; 0x10a2 <therm_ds1820_reset>
	float temp = ( (h << 8) + l ) * 0.5;
    11be:	7d 2f       	mov	r23, r29
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	6c 0f       	add	r22, r28
    11c4:	71 1d       	adc	r23, r1
    11c6:	88 27       	eor	r24, r24
    11c8:	77 fd       	sbrc	r23, 7
    11ca:	80 95       	com	r24
    11cc:	98 2f       	mov	r25, r24
    11ce:	3e d0       	rcall	.+124    	; 0x124c <__floatsisf>
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e0       	ldi	r20, 0x00	; 0
    11d6:	5f e3       	ldi	r21, 0x3F	; 63
    11d8:	9d d0       	rcall	.+314    	; 0x1314 <__mulsf3>
	return (int)temp;
    11da:	05 d0       	rcall	.+10     	; 0x11e6 <__fixsfsi>
	  return (float)(rawTemperature >> 2) * 0.25;
	  break;
	  case TEMP_9_BIT:
	  return (float)(rawTemperature >> 3) * 0.5;
*/
    11dc:	86 2f       	mov	r24, r22
    11de:	97 2f       	mov	r25, r23
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <__fixsfsi>:
    11e6:	04 d0       	rcall	.+8      	; 0x11f0 <__fixunssfsi>
    11e8:	68 94       	set
    11ea:	b1 11       	cpse	r27, r1
    11ec:	8d c0       	rjmp	.+282    	; 0x1308 <__fp_szero>
    11ee:	08 95       	ret

000011f0 <__fixunssfsi>:
    11f0:	70 d0       	rcall	.+224    	; 0x12d2 <__fp_splitA>
    11f2:	88 f0       	brcs	.+34     	; 0x1216 <__fixunssfsi+0x26>
    11f4:	9f 57       	subi	r25, 0x7F	; 127
    11f6:	90 f0       	brcs	.+36     	; 0x121c <__fixunssfsi+0x2c>
    11f8:	b9 2f       	mov	r27, r25
    11fa:	99 27       	eor	r25, r25
    11fc:	b7 51       	subi	r27, 0x17	; 23
    11fe:	a0 f0       	brcs	.+40     	; 0x1228 <__fixunssfsi+0x38>
    1200:	d1 f0       	breq	.+52     	; 0x1236 <__fixunssfsi+0x46>
    1202:	66 0f       	add	r22, r22
    1204:	77 1f       	adc	r23, r23
    1206:	88 1f       	adc	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	1a f0       	brmi	.+6      	; 0x1212 <__fixunssfsi+0x22>
    120c:	ba 95       	dec	r27
    120e:	c9 f7       	brne	.-14     	; 0x1202 <__fixunssfsi+0x12>
    1210:	12 c0       	rjmp	.+36     	; 0x1236 <__fixunssfsi+0x46>
    1212:	b1 30       	cpi	r27, 0x01	; 1
    1214:	81 f0       	breq	.+32     	; 0x1236 <__fixunssfsi+0x46>
    1216:	77 d0       	rcall	.+238    	; 0x1306 <__fp_zero>
    1218:	b1 e0       	ldi	r27, 0x01	; 1
    121a:	08 95       	ret
    121c:	74 c0       	rjmp	.+232    	; 0x1306 <__fp_zero>
    121e:	67 2f       	mov	r22, r23
    1220:	78 2f       	mov	r23, r24
    1222:	88 27       	eor	r24, r24
    1224:	b8 5f       	subi	r27, 0xF8	; 248
    1226:	39 f0       	breq	.+14     	; 0x1236 <__fixunssfsi+0x46>
    1228:	b9 3f       	cpi	r27, 0xF9	; 249
    122a:	cc f3       	brlt	.-14     	; 0x121e <__fixunssfsi+0x2e>
    122c:	86 95       	lsr	r24
    122e:	77 95       	ror	r23
    1230:	67 95       	ror	r22
    1232:	b3 95       	inc	r27
    1234:	d9 f7       	brne	.-10     	; 0x122c <__fixunssfsi+0x3c>
    1236:	3e f4       	brtc	.+14     	; 0x1246 <__fixunssfsi+0x56>
    1238:	90 95       	com	r25
    123a:	80 95       	com	r24
    123c:	70 95       	com	r23
    123e:	61 95       	neg	r22
    1240:	7f 4f       	sbci	r23, 0xFF	; 255
    1242:	8f 4f       	sbci	r24, 0xFF	; 255
    1244:	9f 4f       	sbci	r25, 0xFF	; 255
    1246:	08 95       	ret

00001248 <__floatunsisf>:
    1248:	e8 94       	clt
    124a:	09 c0       	rjmp	.+18     	; 0x125e <__floatsisf+0x12>

0000124c <__floatsisf>:
    124c:	97 fb       	bst	r25, 7
    124e:	3e f4       	brtc	.+14     	; 0x125e <__floatsisf+0x12>
    1250:	90 95       	com	r25
    1252:	80 95       	com	r24
    1254:	70 95       	com	r23
    1256:	61 95       	neg	r22
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	8f 4f       	sbci	r24, 0xFF	; 255
    125c:	9f 4f       	sbci	r25, 0xFF	; 255
    125e:	99 23       	and	r25, r25
    1260:	a9 f0       	breq	.+42     	; 0x128c <__floatsisf+0x40>
    1262:	f9 2f       	mov	r31, r25
    1264:	96 e9       	ldi	r25, 0x96	; 150
    1266:	bb 27       	eor	r27, r27
    1268:	93 95       	inc	r25
    126a:	f6 95       	lsr	r31
    126c:	87 95       	ror	r24
    126e:	77 95       	ror	r23
    1270:	67 95       	ror	r22
    1272:	b7 95       	ror	r27
    1274:	f1 11       	cpse	r31, r1
    1276:	f8 cf       	rjmp	.-16     	; 0x1268 <__floatsisf+0x1c>
    1278:	fa f4       	brpl	.+62     	; 0x12b8 <__floatsisf+0x6c>
    127a:	bb 0f       	add	r27, r27
    127c:	11 f4       	brne	.+4      	; 0x1282 <__floatsisf+0x36>
    127e:	60 ff       	sbrs	r22, 0
    1280:	1b c0       	rjmp	.+54     	; 0x12b8 <__floatsisf+0x6c>
    1282:	6f 5f       	subi	r22, 0xFF	; 255
    1284:	7f 4f       	sbci	r23, 0xFF	; 255
    1286:	8f 4f       	sbci	r24, 0xFF	; 255
    1288:	9f 4f       	sbci	r25, 0xFF	; 255
    128a:	16 c0       	rjmp	.+44     	; 0x12b8 <__floatsisf+0x6c>
    128c:	88 23       	and	r24, r24
    128e:	11 f0       	breq	.+4      	; 0x1294 <__floatsisf+0x48>
    1290:	96 e9       	ldi	r25, 0x96	; 150
    1292:	11 c0       	rjmp	.+34     	; 0x12b6 <__floatsisf+0x6a>
    1294:	77 23       	and	r23, r23
    1296:	21 f0       	breq	.+8      	; 0x12a0 <__floatsisf+0x54>
    1298:	9e e8       	ldi	r25, 0x8E	; 142
    129a:	87 2f       	mov	r24, r23
    129c:	76 2f       	mov	r23, r22
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <__floatsisf+0x5e>
    12a0:	66 23       	and	r22, r22
    12a2:	71 f0       	breq	.+28     	; 0x12c0 <__floatsisf+0x74>
    12a4:	96 e8       	ldi	r25, 0x86	; 134
    12a6:	86 2f       	mov	r24, r22
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	2a f0       	brmi	.+10     	; 0x12b8 <__floatsisf+0x6c>
    12ae:	9a 95       	dec	r25
    12b0:	66 0f       	add	r22, r22
    12b2:	77 1f       	adc	r23, r23
    12b4:	88 1f       	adc	r24, r24
    12b6:	da f7       	brpl	.-10     	; 0x12ae <__floatsisf+0x62>
    12b8:	88 0f       	add	r24, r24
    12ba:	96 95       	lsr	r25
    12bc:	87 95       	ror	r24
    12be:	97 f9       	bld	r25, 7
    12c0:	08 95       	ret

000012c2 <__fp_split3>:
    12c2:	57 fd       	sbrc	r21, 7
    12c4:	90 58       	subi	r25, 0x80	; 128
    12c6:	44 0f       	add	r20, r20
    12c8:	55 1f       	adc	r21, r21
    12ca:	59 f0       	breq	.+22     	; 0x12e2 <__fp_splitA+0x10>
    12cc:	5f 3f       	cpi	r21, 0xFF	; 255
    12ce:	71 f0       	breq	.+28     	; 0x12ec <__fp_splitA+0x1a>
    12d0:	47 95       	ror	r20

000012d2 <__fp_splitA>:
    12d2:	88 0f       	add	r24, r24
    12d4:	97 fb       	bst	r25, 7
    12d6:	99 1f       	adc	r25, r25
    12d8:	61 f0       	breq	.+24     	; 0x12f2 <__fp_splitA+0x20>
    12da:	9f 3f       	cpi	r25, 0xFF	; 255
    12dc:	79 f0       	breq	.+30     	; 0x12fc <__fp_splitA+0x2a>
    12de:	87 95       	ror	r24
    12e0:	08 95       	ret
    12e2:	12 16       	cp	r1, r18
    12e4:	13 06       	cpc	r1, r19
    12e6:	14 06       	cpc	r1, r20
    12e8:	55 1f       	adc	r21, r21
    12ea:	f2 cf       	rjmp	.-28     	; 0x12d0 <__fp_split3+0xe>
    12ec:	46 95       	lsr	r20
    12ee:	f1 df       	rcall	.-30     	; 0x12d2 <__fp_splitA>
    12f0:	08 c0       	rjmp	.+16     	; 0x1302 <__fp_splitA+0x30>
    12f2:	16 16       	cp	r1, r22
    12f4:	17 06       	cpc	r1, r23
    12f6:	18 06       	cpc	r1, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	f1 cf       	rjmp	.-30     	; 0x12de <__fp_splitA+0xc>
    12fc:	86 95       	lsr	r24
    12fe:	71 05       	cpc	r23, r1
    1300:	61 05       	cpc	r22, r1
    1302:	08 94       	sec
    1304:	08 95       	ret

00001306 <__fp_zero>:
    1306:	e8 94       	clt

00001308 <__fp_szero>:
    1308:	bb 27       	eor	r27, r27
    130a:	66 27       	eor	r22, r22
    130c:	77 27       	eor	r23, r23
    130e:	cb 01       	movw	r24, r22
    1310:	97 f9       	bld	r25, 7
    1312:	08 95       	ret

00001314 <__mulsf3>:
    1314:	0b d0       	rcall	.+22     	; 0x132c <__mulsf3x>
    1316:	78 c0       	rjmp	.+240    	; 0x1408 <__fp_round>
    1318:	69 d0       	rcall	.+210    	; 0x13ec <__fp_pscA>
    131a:	28 f0       	brcs	.+10     	; 0x1326 <__mulsf3+0x12>
    131c:	6e d0       	rcall	.+220    	; 0x13fa <__fp_pscB>
    131e:	18 f0       	brcs	.+6      	; 0x1326 <__mulsf3+0x12>
    1320:	95 23       	and	r25, r21
    1322:	09 f0       	breq	.+2      	; 0x1326 <__mulsf3+0x12>
    1324:	5a c0       	rjmp	.+180    	; 0x13da <__fp_inf>
    1326:	5f c0       	rjmp	.+190    	; 0x13e6 <__fp_nan>
    1328:	11 24       	eor	r1, r1
    132a:	ee cf       	rjmp	.-36     	; 0x1308 <__fp_szero>

0000132c <__mulsf3x>:
    132c:	ca df       	rcall	.-108    	; 0x12c2 <__fp_split3>
    132e:	a0 f3       	brcs	.-24     	; 0x1318 <__mulsf3+0x4>

00001330 <__mulsf3_pse>:
    1330:	95 9f       	mul	r25, r21
    1332:	d1 f3       	breq	.-12     	; 0x1328 <__mulsf3+0x14>
    1334:	95 0f       	add	r25, r21
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	55 1f       	adc	r21, r21
    133a:	62 9f       	mul	r22, r18
    133c:	f0 01       	movw	r30, r0
    133e:	72 9f       	mul	r23, r18
    1340:	bb 27       	eor	r27, r27
    1342:	f0 0d       	add	r31, r0
    1344:	b1 1d       	adc	r27, r1
    1346:	63 9f       	mul	r22, r19
    1348:	aa 27       	eor	r26, r26
    134a:	f0 0d       	add	r31, r0
    134c:	b1 1d       	adc	r27, r1
    134e:	aa 1f       	adc	r26, r26
    1350:	64 9f       	mul	r22, r20
    1352:	66 27       	eor	r22, r22
    1354:	b0 0d       	add	r27, r0
    1356:	a1 1d       	adc	r26, r1
    1358:	66 1f       	adc	r22, r22
    135a:	82 9f       	mul	r24, r18
    135c:	22 27       	eor	r18, r18
    135e:	b0 0d       	add	r27, r0
    1360:	a1 1d       	adc	r26, r1
    1362:	62 1f       	adc	r22, r18
    1364:	73 9f       	mul	r23, r19
    1366:	b0 0d       	add	r27, r0
    1368:	a1 1d       	adc	r26, r1
    136a:	62 1f       	adc	r22, r18
    136c:	83 9f       	mul	r24, r19
    136e:	a0 0d       	add	r26, r0
    1370:	61 1d       	adc	r22, r1
    1372:	22 1f       	adc	r18, r18
    1374:	74 9f       	mul	r23, r20
    1376:	33 27       	eor	r19, r19
    1378:	a0 0d       	add	r26, r0
    137a:	61 1d       	adc	r22, r1
    137c:	23 1f       	adc	r18, r19
    137e:	84 9f       	mul	r24, r20
    1380:	60 0d       	add	r22, r0
    1382:	21 1d       	adc	r18, r1
    1384:	82 2f       	mov	r24, r18
    1386:	76 2f       	mov	r23, r22
    1388:	6a 2f       	mov	r22, r26
    138a:	11 24       	eor	r1, r1
    138c:	9f 57       	subi	r25, 0x7F	; 127
    138e:	50 40       	sbci	r21, 0x00	; 0
    1390:	8a f0       	brmi	.+34     	; 0x13b4 <__mulsf3_pse+0x84>
    1392:	e1 f0       	breq	.+56     	; 0x13cc <__mulsf3_pse+0x9c>
    1394:	88 23       	and	r24, r24
    1396:	4a f0       	brmi	.+18     	; 0x13aa <__mulsf3_pse+0x7a>
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	bb 1f       	adc	r27, r27
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	88 1f       	adc	r24, r24
    13a4:	91 50       	subi	r25, 0x01	; 1
    13a6:	50 40       	sbci	r21, 0x00	; 0
    13a8:	a9 f7       	brne	.-22     	; 0x1394 <__mulsf3_pse+0x64>
    13aa:	9e 3f       	cpi	r25, 0xFE	; 254
    13ac:	51 05       	cpc	r21, r1
    13ae:	70 f0       	brcs	.+28     	; 0x13cc <__mulsf3_pse+0x9c>
    13b0:	14 c0       	rjmp	.+40     	; 0x13da <__fp_inf>
    13b2:	aa cf       	rjmp	.-172    	; 0x1308 <__fp_szero>
    13b4:	5f 3f       	cpi	r21, 0xFF	; 255
    13b6:	ec f3       	brlt	.-6      	; 0x13b2 <__mulsf3_pse+0x82>
    13b8:	98 3e       	cpi	r25, 0xE8	; 232
    13ba:	dc f3       	brlt	.-10     	; 0x13b2 <__mulsf3_pse+0x82>
    13bc:	86 95       	lsr	r24
    13be:	77 95       	ror	r23
    13c0:	67 95       	ror	r22
    13c2:	b7 95       	ror	r27
    13c4:	f7 95       	ror	r31
    13c6:	e7 95       	ror	r30
    13c8:	9f 5f       	subi	r25, 0xFF	; 255
    13ca:	c1 f7       	brne	.-16     	; 0x13bc <__mulsf3_pse+0x8c>
    13cc:	fe 2b       	or	r31, r30
    13ce:	88 0f       	add	r24, r24
    13d0:	91 1d       	adc	r25, r1
    13d2:	96 95       	lsr	r25
    13d4:	87 95       	ror	r24
    13d6:	97 f9       	bld	r25, 7
    13d8:	08 95       	ret

000013da <__fp_inf>:
    13da:	97 f9       	bld	r25, 7
    13dc:	9f 67       	ori	r25, 0x7F	; 127
    13de:	80 e8       	ldi	r24, 0x80	; 128
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	08 95       	ret

000013e6 <__fp_nan>:
    13e6:	9f ef       	ldi	r25, 0xFF	; 255
    13e8:	80 ec       	ldi	r24, 0xC0	; 192
    13ea:	08 95       	ret

000013ec <__fp_pscA>:
    13ec:	00 24       	eor	r0, r0
    13ee:	0a 94       	dec	r0
    13f0:	16 16       	cp	r1, r22
    13f2:	17 06       	cpc	r1, r23
    13f4:	18 06       	cpc	r1, r24
    13f6:	09 06       	cpc	r0, r25
    13f8:	08 95       	ret

000013fa <__fp_pscB>:
    13fa:	00 24       	eor	r0, r0
    13fc:	0a 94       	dec	r0
    13fe:	12 16       	cp	r1, r18
    1400:	13 06       	cpc	r1, r19
    1402:	14 06       	cpc	r1, r20
    1404:	05 06       	cpc	r0, r21
    1406:	08 95       	ret

00001408 <__fp_round>:
    1408:	09 2e       	mov	r0, r25
    140a:	03 94       	inc	r0
    140c:	00 0c       	add	r0, r0
    140e:	11 f4       	brne	.+4      	; 0x1414 <__fp_round+0xc>
    1410:	88 23       	and	r24, r24
    1412:	52 f0       	brmi	.+20     	; 0x1428 <__fp_round+0x20>
    1414:	bb 0f       	add	r27, r27
    1416:	40 f4       	brcc	.+16     	; 0x1428 <__fp_round+0x20>
    1418:	bf 2b       	or	r27, r31
    141a:	11 f4       	brne	.+4      	; 0x1420 <__fp_round+0x18>
    141c:	60 ff       	sbrs	r22, 0
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <__fp_round+0x20>
    1420:	6f 5f       	subi	r22, 0xFF	; 255
    1422:	7f 4f       	sbci	r23, 0xFF	; 255
    1424:	8f 4f       	sbci	r24, 0xFF	; 255
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	08 95       	ret

0000142a <strncmp>:
    142a:	fb 01       	movw	r30, r22
    142c:	dc 01       	movw	r26, r24
    142e:	41 50       	subi	r20, 0x01	; 1
    1430:	50 40       	sbci	r21, 0x00	; 0
    1432:	30 f0       	brcs	.+12     	; 0x1440 <strncmp+0x16>
    1434:	8d 91       	ld	r24, X+
    1436:	01 90       	ld	r0, Z+
    1438:	80 19       	sub	r24, r0
    143a:	19 f4       	brne	.+6      	; 0x1442 <strncmp+0x18>
    143c:	00 20       	and	r0, r0
    143e:	b9 f7       	brne	.-18     	; 0x142e <strncmp+0x4>
    1440:	88 1b       	sub	r24, r24
    1442:	99 0b       	sbc	r25, r25
    1444:	08 95       	ret

00001446 <sprintf>:
    1446:	ae e0       	ldi	r26, 0x0E	; 14
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e8 e2       	ldi	r30, 0x28	; 40
    144c:	fa e0       	ldi	r31, 0x0A	; 10
    144e:	97 c2       	rjmp	.+1326   	; 0x197e <__prologue_saves__+0x1c>
    1450:	0d 89       	ldd	r16, Y+21	; 0x15
    1452:	1e 89       	ldd	r17, Y+22	; 0x16
    1454:	86 e0       	ldi	r24, 0x06	; 6
    1456:	8c 83       	std	Y+4, r24	; 0x04
    1458:	1a 83       	std	Y+2, r17	; 0x02
    145a:	09 83       	std	Y+1, r16	; 0x01
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	9f e7       	ldi	r25, 0x7F	; 127
    1460:	9e 83       	std	Y+6, r25	; 0x06
    1462:	8d 83       	std	Y+5, r24	; 0x05
    1464:	ae 01       	movw	r20, r28
    1466:	47 5e       	subi	r20, 0xE7	; 231
    1468:	5f 4f       	sbci	r21, 0xFF	; 255
    146a:	ce 01       	movw	r24, r28
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	6f 89       	ldd	r22, Y+23	; 0x17
    1470:	78 8d       	ldd	r23, Y+24	; 0x18
    1472:	08 d0       	rcall	.+16     	; 0x1484 <vfprintf>
    1474:	ef 81       	ldd	r30, Y+7	; 0x07
    1476:	f8 85       	ldd	r31, Y+8	; 0x08
    1478:	e0 0f       	add	r30, r16
    147a:	f1 1f       	adc	r31, r17
    147c:	10 82       	st	Z, r1
    147e:	2e 96       	adiw	r28, 0x0e	; 14
    1480:	e4 e0       	ldi	r30, 0x04	; 4
    1482:	99 c2       	rjmp	.+1330   	; 0x19b6 <__epilogue_restores__+0x1c>

00001484 <vfprintf>:
    1484:	ad e0       	ldi	r26, 0x0D	; 13
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e7 e4       	ldi	r30, 0x47	; 71
    148a:	fa e0       	ldi	r31, 0x0A	; 10
    148c:	6a c2       	rjmp	.+1236   	; 0x1962 <__prologue_saves__>
    148e:	3c 01       	movw	r6, r24
    1490:	7d 87       	std	Y+13, r23	; 0x0d
    1492:	6c 87       	std	Y+12, r22	; 0x0c
    1494:	5a 01       	movw	r10, r20
    1496:	fc 01       	movw	r30, r24
    1498:	17 82       	std	Z+7, r1	; 0x07
    149a:	16 82       	std	Z+6, r1	; 0x06
    149c:	83 81       	ldd	r24, Z+3	; 0x03
    149e:	81 ff       	sbrs	r24, 1
    14a0:	bb c1       	rjmp	.+886    	; 0x1818 <vfprintf+0x394>
    14a2:	2e 01       	movw	r4, r28
    14a4:	08 94       	sec
    14a6:	41 1c       	adc	r4, r1
    14a8:	51 1c       	adc	r5, r1
    14aa:	f3 01       	movw	r30, r6
    14ac:	93 81       	ldd	r25, Z+3	; 0x03
    14ae:	ec 85       	ldd	r30, Y+12	; 0x0c
    14b0:	fd 85       	ldd	r31, Y+13	; 0x0d
    14b2:	93 fd       	sbrc	r25, 3
    14b4:	85 91       	lpm	r24, Z+
    14b6:	93 ff       	sbrs	r25, 3
    14b8:	81 91       	ld	r24, Z+
    14ba:	fd 87       	std	Y+13, r31	; 0x0d
    14bc:	ec 87       	std	Y+12, r30	; 0x0c
    14be:	88 23       	and	r24, r24
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <vfprintf+0x40>
    14c2:	a6 c1       	rjmp	.+844    	; 0x1810 <vfprintf+0x38c>
    14c4:	85 32       	cpi	r24, 0x25	; 37
    14c6:	41 f4       	brne	.+16     	; 0x14d8 <vfprintf+0x54>
    14c8:	93 fd       	sbrc	r25, 3
    14ca:	85 91       	lpm	r24, Z+
    14cc:	93 ff       	sbrs	r25, 3
    14ce:	81 91       	ld	r24, Z+
    14d0:	fd 87       	std	Y+13, r31	; 0x0d
    14d2:	ec 87       	std	Y+12, r30	; 0x0c
    14d4:	85 32       	cpi	r24, 0x25	; 37
    14d6:	21 f4       	brne	.+8      	; 0x14e0 <vfprintf+0x5c>
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	b3 01       	movw	r22, r6
    14dc:	b8 d1       	rcall	.+880    	; 0x184e <fputc>
    14de:	e5 cf       	rjmp	.-54     	; 0x14aa <vfprintf+0x26>
    14e0:	ff 24       	eor	r15, r15
    14e2:	ee 24       	eor	r14, r14
    14e4:	10 e0       	ldi	r17, 0x00	; 0
    14e6:	10 32       	cpi	r17, 0x20	; 32
    14e8:	b0 f4       	brcc	.+44     	; 0x1516 <vfprintf+0x92>
    14ea:	8b 32       	cpi	r24, 0x2B	; 43
    14ec:	69 f0       	breq	.+26     	; 0x1508 <vfprintf+0x84>
    14ee:	8c 32       	cpi	r24, 0x2C	; 44
    14f0:	28 f4       	brcc	.+10     	; 0x14fc <vfprintf+0x78>
    14f2:	80 32       	cpi	r24, 0x20	; 32
    14f4:	51 f0       	breq	.+20     	; 0x150a <vfprintf+0x86>
    14f6:	83 32       	cpi	r24, 0x23	; 35
    14f8:	71 f4       	brne	.+28     	; 0x1516 <vfprintf+0x92>
    14fa:	0b c0       	rjmp	.+22     	; 0x1512 <vfprintf+0x8e>
    14fc:	8d 32       	cpi	r24, 0x2D	; 45
    14fe:	39 f0       	breq	.+14     	; 0x150e <vfprintf+0x8a>
    1500:	80 33       	cpi	r24, 0x30	; 48
    1502:	49 f4       	brne	.+18     	; 0x1516 <vfprintf+0x92>
    1504:	11 60       	ori	r17, 0x01	; 1
    1506:	2c c0       	rjmp	.+88     	; 0x1560 <vfprintf+0xdc>
    1508:	12 60       	ori	r17, 0x02	; 2
    150a:	14 60       	ori	r17, 0x04	; 4
    150c:	29 c0       	rjmp	.+82     	; 0x1560 <vfprintf+0xdc>
    150e:	18 60       	ori	r17, 0x08	; 8
    1510:	27 c0       	rjmp	.+78     	; 0x1560 <vfprintf+0xdc>
    1512:	10 61       	ori	r17, 0x10	; 16
    1514:	25 c0       	rjmp	.+74     	; 0x1560 <vfprintf+0xdc>
    1516:	17 fd       	sbrc	r17, 7
    1518:	2e c0       	rjmp	.+92     	; 0x1576 <vfprintf+0xf2>
    151a:	28 2f       	mov	r18, r24
    151c:	20 53       	subi	r18, 0x30	; 48
    151e:	2a 30       	cpi	r18, 0x0A	; 10
    1520:	98 f4       	brcc	.+38     	; 0x1548 <vfprintf+0xc4>
    1522:	16 ff       	sbrs	r17, 6
    1524:	08 c0       	rjmp	.+16     	; 0x1536 <vfprintf+0xb2>
    1526:	8f 2d       	mov	r24, r15
    1528:	88 0f       	add	r24, r24
    152a:	f8 2e       	mov	r15, r24
    152c:	ff 0c       	add	r15, r15
    152e:	ff 0c       	add	r15, r15
    1530:	f8 0e       	add	r15, r24
    1532:	f2 0e       	add	r15, r18
    1534:	15 c0       	rjmp	.+42     	; 0x1560 <vfprintf+0xdc>
    1536:	8e 2d       	mov	r24, r14
    1538:	88 0f       	add	r24, r24
    153a:	e8 2e       	mov	r14, r24
    153c:	ee 0c       	add	r14, r14
    153e:	ee 0c       	add	r14, r14
    1540:	e8 0e       	add	r14, r24
    1542:	e2 0e       	add	r14, r18
    1544:	10 62       	ori	r17, 0x20	; 32
    1546:	0c c0       	rjmp	.+24     	; 0x1560 <vfprintf+0xdc>
    1548:	8e 32       	cpi	r24, 0x2E	; 46
    154a:	21 f4       	brne	.+8      	; 0x1554 <vfprintf+0xd0>
    154c:	16 fd       	sbrc	r17, 6
    154e:	60 c1       	rjmp	.+704    	; 0x1810 <vfprintf+0x38c>
    1550:	10 64       	ori	r17, 0x40	; 64
    1552:	06 c0       	rjmp	.+12     	; 0x1560 <vfprintf+0xdc>
    1554:	8c 36       	cpi	r24, 0x6C	; 108
    1556:	11 f4       	brne	.+4      	; 0x155c <vfprintf+0xd8>
    1558:	10 68       	ori	r17, 0x80	; 128
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <vfprintf+0xdc>
    155c:	88 36       	cpi	r24, 0x68	; 104
    155e:	59 f4       	brne	.+22     	; 0x1576 <vfprintf+0xf2>
    1560:	ec 85       	ldd	r30, Y+12	; 0x0c
    1562:	fd 85       	ldd	r31, Y+13	; 0x0d
    1564:	93 fd       	sbrc	r25, 3
    1566:	85 91       	lpm	r24, Z+
    1568:	93 ff       	sbrs	r25, 3
    156a:	81 91       	ld	r24, Z+
    156c:	fd 87       	std	Y+13, r31	; 0x0d
    156e:	ec 87       	std	Y+12, r30	; 0x0c
    1570:	88 23       	and	r24, r24
    1572:	09 f0       	breq	.+2      	; 0x1576 <vfprintf+0xf2>
    1574:	b8 cf       	rjmp	.-144    	; 0x14e6 <vfprintf+0x62>
    1576:	98 2f       	mov	r25, r24
    1578:	95 54       	subi	r25, 0x45	; 69
    157a:	93 30       	cpi	r25, 0x03	; 3
    157c:	18 f0       	brcs	.+6      	; 0x1584 <vfprintf+0x100>
    157e:	90 52       	subi	r25, 0x20	; 32
    1580:	93 30       	cpi	r25, 0x03	; 3
    1582:	38 f4       	brcc	.+14     	; 0x1592 <vfprintf+0x10e>
    1584:	24 e0       	ldi	r18, 0x04	; 4
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	a2 0e       	add	r10, r18
    158a:	b3 1e       	adc	r11, r19
    158c:	3f e3       	ldi	r19, 0x3F	; 63
    158e:	39 83       	std	Y+1, r19	; 0x01
    1590:	0f c0       	rjmp	.+30     	; 0x15b0 <vfprintf+0x12c>
    1592:	83 36       	cpi	r24, 0x63	; 99
    1594:	31 f0       	breq	.+12     	; 0x15a2 <vfprintf+0x11e>
    1596:	83 37       	cpi	r24, 0x73	; 115
    1598:	81 f0       	breq	.+32     	; 0x15ba <vfprintf+0x136>
    159a:	83 35       	cpi	r24, 0x53	; 83
    159c:	09 f0       	breq	.+2      	; 0x15a0 <vfprintf+0x11c>
    159e:	56 c0       	rjmp	.+172    	; 0x164c <vfprintf+0x1c8>
    15a0:	21 c0       	rjmp	.+66     	; 0x15e4 <vfprintf+0x160>
    15a2:	f5 01       	movw	r30, r10
    15a4:	80 81       	ld	r24, Z
    15a6:	89 83       	std	Y+1, r24	; 0x01
    15a8:	22 e0       	ldi	r18, 0x02	; 2
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	a2 0e       	add	r10, r18
    15ae:	b3 1e       	adc	r11, r19
    15b0:	21 e0       	ldi	r18, 0x01	; 1
    15b2:	c2 2e       	mov	r12, r18
    15b4:	d1 2c       	mov	r13, r1
    15b6:	42 01       	movw	r8, r4
    15b8:	13 c0       	rjmp	.+38     	; 0x15e0 <vfprintf+0x15c>
    15ba:	92 e0       	ldi	r25, 0x02	; 2
    15bc:	29 2e       	mov	r2, r25
    15be:	31 2c       	mov	r3, r1
    15c0:	2a 0c       	add	r2, r10
    15c2:	3b 1c       	adc	r3, r11
    15c4:	f5 01       	movw	r30, r10
    15c6:	80 80       	ld	r8, Z
    15c8:	91 80       	ldd	r9, Z+1	; 0x01
    15ca:	16 ff       	sbrs	r17, 6
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <vfprintf+0x150>
    15ce:	6f 2d       	mov	r22, r15
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <vfprintf+0x154>
    15d4:	6f ef       	ldi	r22, 0xFF	; 255
    15d6:	7f ef       	ldi	r23, 0xFF	; 255
    15d8:	c4 01       	movw	r24, r8
    15da:	2e d1       	rcall	.+604    	; 0x1838 <strnlen>
    15dc:	6c 01       	movw	r12, r24
    15de:	51 01       	movw	r10, r2
    15e0:	1f 77       	andi	r17, 0x7F	; 127
    15e2:	14 c0       	rjmp	.+40     	; 0x160c <vfprintf+0x188>
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	28 2e       	mov	r2, r24
    15e8:	31 2c       	mov	r3, r1
    15ea:	2a 0c       	add	r2, r10
    15ec:	3b 1c       	adc	r3, r11
    15ee:	f5 01       	movw	r30, r10
    15f0:	80 80       	ld	r8, Z
    15f2:	91 80       	ldd	r9, Z+1	; 0x01
    15f4:	16 ff       	sbrs	r17, 6
    15f6:	03 c0       	rjmp	.+6      	; 0x15fe <vfprintf+0x17a>
    15f8:	6f 2d       	mov	r22, r15
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <vfprintf+0x17e>
    15fe:	6f ef       	ldi	r22, 0xFF	; 255
    1600:	7f ef       	ldi	r23, 0xFF	; 255
    1602:	c4 01       	movw	r24, r8
    1604:	0e d1       	rcall	.+540    	; 0x1822 <strnlen_P>
    1606:	6c 01       	movw	r12, r24
    1608:	10 68       	ori	r17, 0x80	; 128
    160a:	51 01       	movw	r10, r2
    160c:	13 fd       	sbrc	r17, 3
    160e:	1a c0       	rjmp	.+52     	; 0x1644 <vfprintf+0x1c0>
    1610:	05 c0       	rjmp	.+10     	; 0x161c <vfprintf+0x198>
    1612:	80 e2       	ldi	r24, 0x20	; 32
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	b3 01       	movw	r22, r6
    1618:	1a d1       	rcall	.+564    	; 0x184e <fputc>
    161a:	ea 94       	dec	r14
    161c:	8e 2d       	mov	r24, r14
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	c8 16       	cp	r12, r24
    1622:	d9 06       	cpc	r13, r25
    1624:	b0 f3       	brcs	.-20     	; 0x1612 <vfprintf+0x18e>
    1626:	0e c0       	rjmp	.+28     	; 0x1644 <vfprintf+0x1c0>
    1628:	f4 01       	movw	r30, r8
    162a:	17 fd       	sbrc	r17, 7
    162c:	85 91       	lpm	r24, Z+
    162e:	17 ff       	sbrs	r17, 7
    1630:	81 91       	ld	r24, Z+
    1632:	4f 01       	movw	r8, r30
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	b3 01       	movw	r22, r6
    1638:	0a d1       	rcall	.+532    	; 0x184e <fputc>
    163a:	e1 10       	cpse	r14, r1
    163c:	ea 94       	dec	r14
    163e:	08 94       	sec
    1640:	c1 08       	sbc	r12, r1
    1642:	d1 08       	sbc	r13, r1
    1644:	c1 14       	cp	r12, r1
    1646:	d1 04       	cpc	r13, r1
    1648:	79 f7       	brne	.-34     	; 0x1628 <vfprintf+0x1a4>
    164a:	df c0       	rjmp	.+446    	; 0x180a <vfprintf+0x386>
    164c:	84 36       	cpi	r24, 0x64	; 100
    164e:	11 f0       	breq	.+4      	; 0x1654 <vfprintf+0x1d0>
    1650:	89 36       	cpi	r24, 0x69	; 105
    1652:	49 f5       	brne	.+82     	; 0x16a6 <vfprintf+0x222>
    1654:	f5 01       	movw	r30, r10
    1656:	17 ff       	sbrs	r17, 7
    1658:	07 c0       	rjmp	.+14     	; 0x1668 <vfprintf+0x1e4>
    165a:	80 81       	ld	r24, Z
    165c:	91 81       	ldd	r25, Z+1	; 0x01
    165e:	a2 81       	ldd	r26, Z+2	; 0x02
    1660:	b3 81       	ldd	r27, Z+3	; 0x03
    1662:	24 e0       	ldi	r18, 0x04	; 4
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	08 c0       	rjmp	.+16     	; 0x1678 <vfprintf+0x1f4>
    1668:	80 81       	ld	r24, Z
    166a:	91 81       	ldd	r25, Z+1	; 0x01
    166c:	aa 27       	eor	r26, r26
    166e:	97 fd       	sbrc	r25, 7
    1670:	a0 95       	com	r26
    1672:	ba 2f       	mov	r27, r26
    1674:	22 e0       	ldi	r18, 0x02	; 2
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	a2 0e       	add	r10, r18
    167a:	b3 1e       	adc	r11, r19
    167c:	01 2f       	mov	r16, r17
    167e:	0f 76       	andi	r16, 0x6F	; 111
    1680:	b7 ff       	sbrs	r27, 7
    1682:	08 c0       	rjmp	.+16     	; 0x1694 <vfprintf+0x210>
    1684:	b0 95       	com	r27
    1686:	a0 95       	com	r26
    1688:	90 95       	com	r25
    168a:	81 95       	neg	r24
    168c:	9f 4f       	sbci	r25, 0xFF	; 255
    168e:	af 4f       	sbci	r26, 0xFF	; 255
    1690:	bf 4f       	sbci	r27, 0xFF	; 255
    1692:	00 68       	ori	r16, 0x80	; 128
    1694:	bc 01       	movw	r22, r24
    1696:	cd 01       	movw	r24, r26
    1698:	a2 01       	movw	r20, r4
    169a:	2a e0       	ldi	r18, 0x0A	; 10
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	03 d1       	rcall	.+518    	; 0x18a6 <__ultoa_invert>
    16a0:	d8 2e       	mov	r13, r24
    16a2:	d4 18       	sub	r13, r4
    16a4:	3e c0       	rjmp	.+124    	; 0x1722 <vfprintf+0x29e>
    16a6:	85 37       	cpi	r24, 0x75	; 117
    16a8:	21 f4       	brne	.+8      	; 0x16b2 <vfprintf+0x22e>
    16aa:	1f 7e       	andi	r17, 0xEF	; 239
    16ac:	2a e0       	ldi	r18, 0x0A	; 10
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	20 c0       	rjmp	.+64     	; 0x16f2 <vfprintf+0x26e>
    16b2:	19 7f       	andi	r17, 0xF9	; 249
    16b4:	8f 36       	cpi	r24, 0x6F	; 111
    16b6:	a9 f0       	breq	.+42     	; 0x16e2 <vfprintf+0x25e>
    16b8:	80 37       	cpi	r24, 0x70	; 112
    16ba:	20 f4       	brcc	.+8      	; 0x16c4 <vfprintf+0x240>
    16bc:	88 35       	cpi	r24, 0x58	; 88
    16be:	09 f0       	breq	.+2      	; 0x16c2 <vfprintf+0x23e>
    16c0:	a7 c0       	rjmp	.+334    	; 0x1810 <vfprintf+0x38c>
    16c2:	0b c0       	rjmp	.+22     	; 0x16da <vfprintf+0x256>
    16c4:	80 37       	cpi	r24, 0x70	; 112
    16c6:	21 f0       	breq	.+8      	; 0x16d0 <vfprintf+0x24c>
    16c8:	88 37       	cpi	r24, 0x78	; 120
    16ca:	09 f0       	breq	.+2      	; 0x16ce <vfprintf+0x24a>
    16cc:	a1 c0       	rjmp	.+322    	; 0x1810 <vfprintf+0x38c>
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <vfprintf+0x24e>
    16d0:	10 61       	ori	r17, 0x10	; 16
    16d2:	14 ff       	sbrs	r17, 4
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <vfprintf+0x264>
    16d6:	14 60       	ori	r17, 0x04	; 4
    16d8:	07 c0       	rjmp	.+14     	; 0x16e8 <vfprintf+0x264>
    16da:	14 ff       	sbrs	r17, 4
    16dc:	08 c0       	rjmp	.+16     	; 0x16ee <vfprintf+0x26a>
    16de:	16 60       	ori	r17, 0x06	; 6
    16e0:	06 c0       	rjmp	.+12     	; 0x16ee <vfprintf+0x26a>
    16e2:	28 e0       	ldi	r18, 0x08	; 8
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	05 c0       	rjmp	.+10     	; 0x16f2 <vfprintf+0x26e>
    16e8:	20 e1       	ldi	r18, 0x10	; 16
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <vfprintf+0x26e>
    16ee:	20 e1       	ldi	r18, 0x10	; 16
    16f0:	32 e0       	ldi	r19, 0x02	; 2
    16f2:	f5 01       	movw	r30, r10
    16f4:	17 ff       	sbrs	r17, 7
    16f6:	07 c0       	rjmp	.+14     	; 0x1706 <vfprintf+0x282>
    16f8:	60 81       	ld	r22, Z
    16fa:	71 81       	ldd	r23, Z+1	; 0x01
    16fc:	82 81       	ldd	r24, Z+2	; 0x02
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	44 e0       	ldi	r20, 0x04	; 4
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	06 c0       	rjmp	.+12     	; 0x1712 <vfprintf+0x28e>
    1706:	60 81       	ld	r22, Z
    1708:	71 81       	ldd	r23, Z+1	; 0x01
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	42 e0       	ldi	r20, 0x02	; 2
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	a4 0e       	add	r10, r20
    1714:	b5 1e       	adc	r11, r21
    1716:	a2 01       	movw	r20, r4
    1718:	c6 d0       	rcall	.+396    	; 0x18a6 <__ultoa_invert>
    171a:	d8 2e       	mov	r13, r24
    171c:	d4 18       	sub	r13, r4
    171e:	01 2f       	mov	r16, r17
    1720:	0f 77       	andi	r16, 0x7F	; 127
    1722:	06 ff       	sbrs	r16, 6
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <vfprintf+0x2b4>
    1726:	0e 7f       	andi	r16, 0xFE	; 254
    1728:	df 14       	cp	r13, r15
    172a:	30 f4       	brcc	.+12     	; 0x1738 <vfprintf+0x2b4>
    172c:	04 ff       	sbrs	r16, 4
    172e:	06 c0       	rjmp	.+12     	; 0x173c <vfprintf+0x2b8>
    1730:	02 fd       	sbrc	r16, 2
    1732:	04 c0       	rjmp	.+8      	; 0x173c <vfprintf+0x2b8>
    1734:	0f 7e       	andi	r16, 0xEF	; 239
    1736:	02 c0       	rjmp	.+4      	; 0x173c <vfprintf+0x2b8>
    1738:	1d 2d       	mov	r17, r13
    173a:	01 c0       	rjmp	.+2      	; 0x173e <vfprintf+0x2ba>
    173c:	1f 2d       	mov	r17, r15
    173e:	80 2f       	mov	r24, r16
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	04 ff       	sbrs	r16, 4
    1744:	0c c0       	rjmp	.+24     	; 0x175e <vfprintf+0x2da>
    1746:	fe 01       	movw	r30, r28
    1748:	ed 0d       	add	r30, r13
    174a:	f1 1d       	adc	r31, r1
    174c:	20 81       	ld	r18, Z
    174e:	20 33       	cpi	r18, 0x30	; 48
    1750:	11 f4       	brne	.+4      	; 0x1756 <vfprintf+0x2d2>
    1752:	09 7e       	andi	r16, 0xE9	; 233
    1754:	09 c0       	rjmp	.+18     	; 0x1768 <vfprintf+0x2e4>
    1756:	02 ff       	sbrs	r16, 2
    1758:	06 c0       	rjmp	.+12     	; 0x1766 <vfprintf+0x2e2>
    175a:	1e 5f       	subi	r17, 0xFE	; 254
    175c:	05 c0       	rjmp	.+10     	; 0x1768 <vfprintf+0x2e4>
    175e:	86 78       	andi	r24, 0x86	; 134
    1760:	90 70       	andi	r25, 0x00	; 0
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	09 f0       	breq	.+2      	; 0x1768 <vfprintf+0x2e4>
    1766:	1f 5f       	subi	r17, 0xFF	; 255
    1768:	80 2e       	mov	r8, r16
    176a:	99 24       	eor	r9, r9
    176c:	03 fd       	sbrc	r16, 3
    176e:	11 c0       	rjmp	.+34     	; 0x1792 <vfprintf+0x30e>
    1770:	00 ff       	sbrs	r16, 0
    1772:	0c c0       	rjmp	.+24     	; 0x178c <vfprintf+0x308>
    1774:	fd 2c       	mov	r15, r13
    1776:	1e 15       	cp	r17, r14
    1778:	48 f4       	brcc	.+18     	; 0x178c <vfprintf+0x308>
    177a:	fe 0c       	add	r15, r14
    177c:	f1 1a       	sub	r15, r17
    177e:	1e 2d       	mov	r17, r14
    1780:	05 c0       	rjmp	.+10     	; 0x178c <vfprintf+0x308>
    1782:	80 e2       	ldi	r24, 0x20	; 32
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	b3 01       	movw	r22, r6
    1788:	62 d0       	rcall	.+196    	; 0x184e <fputc>
    178a:	1f 5f       	subi	r17, 0xFF	; 255
    178c:	1e 15       	cp	r17, r14
    178e:	c8 f3       	brcs	.-14     	; 0x1782 <vfprintf+0x2fe>
    1790:	04 c0       	rjmp	.+8      	; 0x179a <vfprintf+0x316>
    1792:	1e 15       	cp	r17, r14
    1794:	10 f4       	brcc	.+4      	; 0x179a <vfprintf+0x316>
    1796:	e1 1a       	sub	r14, r17
    1798:	01 c0       	rjmp	.+2      	; 0x179c <vfprintf+0x318>
    179a:	ee 24       	eor	r14, r14
    179c:	84 fe       	sbrs	r8, 4
    179e:	0e c0       	rjmp	.+28     	; 0x17bc <vfprintf+0x338>
    17a0:	80 e3       	ldi	r24, 0x30	; 48
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	b3 01       	movw	r22, r6
    17a6:	53 d0       	rcall	.+166    	; 0x184e <fputc>
    17a8:	82 fe       	sbrs	r8, 2
    17aa:	1d c0       	rjmp	.+58     	; 0x17e6 <vfprintf+0x362>
    17ac:	81 fe       	sbrs	r8, 1
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6 <vfprintf+0x332>
    17b0:	88 e5       	ldi	r24, 0x58	; 88
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	10 c0       	rjmp	.+32     	; 0x17d6 <vfprintf+0x352>
    17b6:	88 e7       	ldi	r24, 0x78	; 120
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0d c0       	rjmp	.+26     	; 0x17d6 <vfprintf+0x352>
    17bc:	c4 01       	movw	r24, r8
    17be:	86 78       	andi	r24, 0x86	; 134
    17c0:	90 70       	andi	r25, 0x00	; 0
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	81 f0       	breq	.+32     	; 0x17e6 <vfprintf+0x362>
    17c6:	81 fc       	sbrc	r8, 1
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <vfprintf+0x34a>
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <vfprintf+0x34c>
    17ce:	8b e2       	ldi	r24, 0x2B	; 43
    17d0:	07 fd       	sbrc	r16, 7
    17d2:	8d e2       	ldi	r24, 0x2D	; 45
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	b3 01       	movw	r22, r6
    17d8:	3a d0       	rcall	.+116    	; 0x184e <fputc>
    17da:	05 c0       	rjmp	.+10     	; 0x17e6 <vfprintf+0x362>
    17dc:	80 e3       	ldi	r24, 0x30	; 48
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	b3 01       	movw	r22, r6
    17e2:	35 d0       	rcall	.+106    	; 0x184e <fputc>
    17e4:	fa 94       	dec	r15
    17e6:	df 14       	cp	r13, r15
    17e8:	c8 f3       	brcs	.-14     	; 0x17dc <vfprintf+0x358>
    17ea:	da 94       	dec	r13
    17ec:	f2 01       	movw	r30, r4
    17ee:	ed 0d       	add	r30, r13
    17f0:	f1 1d       	adc	r31, r1
    17f2:	80 81       	ld	r24, Z
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	b3 01       	movw	r22, r6
    17f8:	2a d0       	rcall	.+84     	; 0x184e <fputc>
    17fa:	dd 20       	and	r13, r13
    17fc:	b1 f7       	brne	.-20     	; 0x17ea <vfprintf+0x366>
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <vfprintf+0x386>
    1800:	80 e2       	ldi	r24, 0x20	; 32
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	b3 01       	movw	r22, r6
    1806:	23 d0       	rcall	.+70     	; 0x184e <fputc>
    1808:	ea 94       	dec	r14
    180a:	ee 20       	and	r14, r14
    180c:	c9 f7       	brne	.-14     	; 0x1800 <vfprintf+0x37c>
    180e:	4d ce       	rjmp	.-870    	; 0x14aa <vfprintf+0x26>
    1810:	f3 01       	movw	r30, r6
    1812:	86 81       	ldd	r24, Z+6	; 0x06
    1814:	97 81       	ldd	r25, Z+7	; 0x07
    1816:	02 c0       	rjmp	.+4      	; 0x181c <vfprintf+0x398>
    1818:	8f ef       	ldi	r24, 0xFF	; 255
    181a:	9f ef       	ldi	r25, 0xFF	; 255
    181c:	2d 96       	adiw	r28, 0x0d	; 13
    181e:	e2 e1       	ldi	r30, 0x12	; 18
    1820:	bc c0       	rjmp	.+376    	; 0x199a <__epilogue_restores__>

00001822 <strnlen_P>:
    1822:	fc 01       	movw	r30, r24
    1824:	05 90       	lpm	r0, Z+
    1826:	61 50       	subi	r22, 0x01	; 1
    1828:	70 40       	sbci	r23, 0x00	; 0
    182a:	01 10       	cpse	r0, r1
    182c:	d8 f7       	brcc	.-10     	; 0x1824 <strnlen_P+0x2>
    182e:	80 95       	com	r24
    1830:	90 95       	com	r25
    1832:	8e 0f       	add	r24, r30
    1834:	9f 1f       	adc	r25, r31
    1836:	08 95       	ret

00001838 <strnlen>:
    1838:	fc 01       	movw	r30, r24
    183a:	61 50       	subi	r22, 0x01	; 1
    183c:	70 40       	sbci	r23, 0x00	; 0
    183e:	01 90       	ld	r0, Z+
    1840:	01 10       	cpse	r0, r1
    1842:	d8 f7       	brcc	.-10     	; 0x183a <strnlen+0x2>
    1844:	80 95       	com	r24
    1846:	90 95       	com	r25
    1848:	8e 0f       	add	r24, r30
    184a:	9f 1f       	adc	r25, r31
    184c:	08 95       	ret

0000184e <fputc>:
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	8c 01       	movw	r16, r24
    1858:	eb 01       	movw	r28, r22
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	81 ff       	sbrs	r24, 1
    185e:	1b c0       	rjmp	.+54     	; 0x1896 <fputc+0x48>
    1860:	82 ff       	sbrs	r24, 2
    1862:	0d c0       	rjmp	.+26     	; 0x187e <fputc+0x30>
    1864:	2e 81       	ldd	r18, Y+6	; 0x06
    1866:	3f 81       	ldd	r19, Y+7	; 0x07
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	9d 81       	ldd	r25, Y+5	; 0x05
    186c:	28 17       	cp	r18, r24
    186e:	39 07       	cpc	r19, r25
    1870:	64 f4       	brge	.+24     	; 0x188a <fputc+0x3c>
    1872:	e8 81       	ld	r30, Y
    1874:	f9 81       	ldd	r31, Y+1	; 0x01
    1876:	01 93       	st	Z+, r16
    1878:	f9 83       	std	Y+1, r31	; 0x01
    187a:	e8 83       	st	Y, r30
    187c:	06 c0       	rjmp	.+12     	; 0x188a <fputc+0x3c>
    187e:	e8 85       	ldd	r30, Y+8	; 0x08
    1880:	f9 85       	ldd	r31, Y+9	; 0x09
    1882:	80 2f       	mov	r24, r16
    1884:	09 95       	icall
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	31 f4       	brne	.+12     	; 0x1896 <fputc+0x48>
    188a:	8e 81       	ldd	r24, Y+6	; 0x06
    188c:	9f 81       	ldd	r25, Y+7	; 0x07
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	9f 83       	std	Y+7, r25	; 0x07
    1892:	8e 83       	std	Y+6, r24	; 0x06
    1894:	02 c0       	rjmp	.+4      	; 0x189a <fputc+0x4c>
    1896:	0f ef       	ldi	r16, 0xFF	; 255
    1898:	1f ef       	ldi	r17, 0xFF	; 255
    189a:	c8 01       	movw	r24, r16
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	08 95       	ret

000018a6 <__ultoa_invert>:
    18a6:	fa 01       	movw	r30, r20
    18a8:	aa 27       	eor	r26, r26
    18aa:	28 30       	cpi	r18, 0x08	; 8
    18ac:	51 f1       	breq	.+84     	; 0x1902 <__ultoa_invert+0x5c>
    18ae:	20 31       	cpi	r18, 0x10	; 16
    18b0:	81 f1       	breq	.+96     	; 0x1912 <__ultoa_invert+0x6c>
    18b2:	e8 94       	clt
    18b4:	6f 93       	push	r22
    18b6:	6e 7f       	andi	r22, 0xFE	; 254
    18b8:	6e 5f       	subi	r22, 0xFE	; 254
    18ba:	7f 4f       	sbci	r23, 0xFF	; 255
    18bc:	8f 4f       	sbci	r24, 0xFF	; 255
    18be:	9f 4f       	sbci	r25, 0xFF	; 255
    18c0:	af 4f       	sbci	r26, 0xFF	; 255
    18c2:	b1 e0       	ldi	r27, 0x01	; 1
    18c4:	3e d0       	rcall	.+124    	; 0x1942 <__ultoa_invert+0x9c>
    18c6:	b4 e0       	ldi	r27, 0x04	; 4
    18c8:	3c d0       	rcall	.+120    	; 0x1942 <__ultoa_invert+0x9c>
    18ca:	67 0f       	add	r22, r23
    18cc:	78 1f       	adc	r23, r24
    18ce:	89 1f       	adc	r24, r25
    18d0:	9a 1f       	adc	r25, r26
    18d2:	a1 1d       	adc	r26, r1
    18d4:	68 0f       	add	r22, r24
    18d6:	79 1f       	adc	r23, r25
    18d8:	8a 1f       	adc	r24, r26
    18da:	91 1d       	adc	r25, r1
    18dc:	a1 1d       	adc	r26, r1
    18de:	6a 0f       	add	r22, r26
    18e0:	71 1d       	adc	r23, r1
    18e2:	81 1d       	adc	r24, r1
    18e4:	91 1d       	adc	r25, r1
    18e6:	a1 1d       	adc	r26, r1
    18e8:	20 d0       	rcall	.+64     	; 0x192a <__ultoa_invert+0x84>
    18ea:	09 f4       	brne	.+2      	; 0x18ee <__ultoa_invert+0x48>
    18ec:	68 94       	set
    18ee:	3f 91       	pop	r19
    18f0:	2a e0       	ldi	r18, 0x0A	; 10
    18f2:	26 9f       	mul	r18, r22
    18f4:	11 24       	eor	r1, r1
    18f6:	30 19       	sub	r19, r0
    18f8:	30 5d       	subi	r19, 0xD0	; 208
    18fa:	31 93       	st	Z+, r19
    18fc:	de f6       	brtc	.-74     	; 0x18b4 <__ultoa_invert+0xe>
    18fe:	cf 01       	movw	r24, r30
    1900:	08 95       	ret
    1902:	46 2f       	mov	r20, r22
    1904:	47 70       	andi	r20, 0x07	; 7
    1906:	40 5d       	subi	r20, 0xD0	; 208
    1908:	41 93       	st	Z+, r20
    190a:	b3 e0       	ldi	r27, 0x03	; 3
    190c:	0f d0       	rcall	.+30     	; 0x192c <__ultoa_invert+0x86>
    190e:	c9 f7       	brne	.-14     	; 0x1902 <__ultoa_invert+0x5c>
    1910:	f6 cf       	rjmp	.-20     	; 0x18fe <__ultoa_invert+0x58>
    1912:	46 2f       	mov	r20, r22
    1914:	4f 70       	andi	r20, 0x0F	; 15
    1916:	40 5d       	subi	r20, 0xD0	; 208
    1918:	4a 33       	cpi	r20, 0x3A	; 58
    191a:	18 f0       	brcs	.+6      	; 0x1922 <__ultoa_invert+0x7c>
    191c:	49 5d       	subi	r20, 0xD9	; 217
    191e:	31 fd       	sbrc	r19, 1
    1920:	40 52       	subi	r20, 0x20	; 32
    1922:	41 93       	st	Z+, r20
    1924:	02 d0       	rcall	.+4      	; 0x192a <__ultoa_invert+0x84>
    1926:	a9 f7       	brne	.-22     	; 0x1912 <__ultoa_invert+0x6c>
    1928:	ea cf       	rjmp	.-44     	; 0x18fe <__ultoa_invert+0x58>
    192a:	b4 e0       	ldi	r27, 0x04	; 4
    192c:	a6 95       	lsr	r26
    192e:	97 95       	ror	r25
    1930:	87 95       	ror	r24
    1932:	77 95       	ror	r23
    1934:	67 95       	ror	r22
    1936:	ba 95       	dec	r27
    1938:	c9 f7       	brne	.-14     	; 0x192c <__ultoa_invert+0x86>
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	61 05       	cpc	r22, r1
    193e:	71 05       	cpc	r23, r1
    1940:	08 95       	ret
    1942:	9b 01       	movw	r18, r22
    1944:	ac 01       	movw	r20, r24
    1946:	0a 2e       	mov	r0, r26
    1948:	06 94       	lsr	r0
    194a:	57 95       	ror	r21
    194c:	47 95       	ror	r20
    194e:	37 95       	ror	r19
    1950:	27 95       	ror	r18
    1952:	ba 95       	dec	r27
    1954:	c9 f7       	brne	.-14     	; 0x1948 <__ultoa_invert+0xa2>
    1956:	62 0f       	add	r22, r18
    1958:	73 1f       	adc	r23, r19
    195a:	84 1f       	adc	r24, r20
    195c:	95 1f       	adc	r25, r21
    195e:	a0 1d       	adc	r26, r0
    1960:	08 95       	ret

00001962 <__prologue_saves__>:
    1962:	2f 92       	push	r2
    1964:	3f 92       	push	r3
    1966:	4f 92       	push	r4
    1968:	5f 92       	push	r5
    196a:	6f 92       	push	r6
    196c:	7f 92       	push	r7
    196e:	8f 92       	push	r8
    1970:	9f 92       	push	r9
    1972:	af 92       	push	r10
    1974:	bf 92       	push	r11
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	ca 1b       	sub	r28, r26
    198c:	db 0b       	sbc	r29, r27
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	09 94       	ijmp

0000199a <__epilogue_restores__>:
    199a:	2a 88       	ldd	r2, Y+18	; 0x12
    199c:	39 88       	ldd	r3, Y+17	; 0x11
    199e:	48 88       	ldd	r4, Y+16	; 0x10
    19a0:	5f 84       	ldd	r5, Y+15	; 0x0f
    19a2:	6e 84       	ldd	r6, Y+14	; 0x0e
    19a4:	7d 84       	ldd	r7, Y+13	; 0x0d
    19a6:	8c 84       	ldd	r8, Y+12	; 0x0c
    19a8:	9b 84       	ldd	r9, Y+11	; 0x0b
    19aa:	aa 84       	ldd	r10, Y+10	; 0x0a
    19ac:	b9 84       	ldd	r11, Y+9	; 0x09
    19ae:	c8 84       	ldd	r12, Y+8	; 0x08
    19b0:	df 80       	ldd	r13, Y+7	; 0x07
    19b2:	ee 80       	ldd	r14, Y+6	; 0x06
    19b4:	fd 80       	ldd	r15, Y+5	; 0x05
    19b6:	0c 81       	ldd	r16, Y+4	; 0x04
    19b8:	1b 81       	ldd	r17, Y+3	; 0x03
    19ba:	aa 81       	ldd	r26, Y+2	; 0x02
    19bc:	b9 81       	ldd	r27, Y+1	; 0x01
    19be:	ce 0f       	add	r28, r30
    19c0:	d1 1d       	adc	r29, r1
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	ed 01       	movw	r28, r26
    19ce:	08 95       	ret

000019d0 <_exit>:
    19d0:	f8 94       	cli

000019d2 <__stop_program>:
    19d2:	ff cf       	rjmp	.-2      	; 0x19d2 <__stop_program>
