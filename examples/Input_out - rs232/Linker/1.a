;char data1;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#include <rs232.c>
;#define RXB8 1
;#define TXB8 0
;#define UPE 2
;#define OVR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<OVR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0005 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;char status,data;
;status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0){
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;   rx_buffer[rx_wr_index]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;   if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;   if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;      {
;      rx_counter=0;
;PCODE: $00000025 VOL: 0
;      rx_buffer_overflow=1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;      };
;PCODE: $00000029 VOL: 0
;      putchar(data);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;      data1=data;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;      };
;PCODE: $0000002E VOL: 0
;}
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
;{
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;char data;
;while (rx_counter==0);
;PCODE: $00000035 VOL: 0
;	data -> R17
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;data=rx_buffer[rx_rd_index];
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;#asm("cli")
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
	cli
;PCODE: $00000046 VOL: 0
;--rx_counter;
;PCODE: $00000047 VOL: 0
;#asm("sei")
;PCODE: $00000048 VOL: 0
	sei
;PCODE: $00000049 VOL: 0
;return data;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;}
;PCODE: $0000004D VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0008 {
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0009 
; 0000 000A //PORTD^=0xFF;
; 0000 000B }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;
;void main(void)
; 0000 000E {
;PCODE: $00000053 VOL: 0
; 0000 000F PORTB=0x00;         //вкл. подтягивающие резисторы
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0010 DDRB=0xFF;           // весь порт как вход
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0011 PORTC=0x00; //Выставляем все выходы порта D на 0, то есть, выключаем весь порт D
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0012 DDRC=0xFF;  //Делаем порт D, как выход, чтобы на выходах порта было напряжение 5В
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0013 PORTD=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0014 DDRD=0xFF;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0015 
; 0000 0016 // USART initialization
; 0000 0017 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0018 // USART Receiver: On
; 0000 0019 // USART Transmitter: On
; 0000 001A // USART Mode: Asynchronous
; 0000 001B // USART Baud rate: 19200
; 0000 001C UCSRA=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 001D UCSRB=0xD8;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 001E UCSRC=0x86;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 001F UBRRH=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0020 UBRRL=0x33;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0021 
; 0000 0022 TCCR0=0x02;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0023 TIMSK=0x01;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0024 
; 0000 0025 ACSR=0x80;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0026 SFIOR=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0027 
; 0000 0028 
; 0000 0029 #asm("sei")
;PCODE: $00000072 VOL: 0
	sei
;PCODE: $00000073 VOL: 0
; 0000 002A 
; 0000 002B while (1)
;PCODE: $00000074 VOL: 0
; 0000 002C {
; 0000 002D  if ((data1 == 49)){PORTD|=0b11111111;printf("ON\n");data1=0; }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 002E  if ((data1 == 50)) {PORTD|=~255;printf("OFF\n");data1=0; }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 002F 
; 0000 0030 /*
; 0000 0031 prin=getchar();
; 0000 0032 switch (prin)
; 0000 0033 {
; 0000 0034 case 49:
; 0000 0035 {
; 0000 0036 PORTC.0=1;
; 0000 0037 break;
; 0000 0038 }
; 0000 0039 case 50:
; 0000 003A {
; 0000 003B PORTC.0=0;
; 0000 003C break;
; 0000 003D }
; 0000 003E */
; 0000 003F };
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0040 };
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
