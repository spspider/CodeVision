;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.4 Standard
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 26.11.2013
;Author  :
;Company :
;Comments:
;
;
;Chip type           : ATmega8
;Program type        : Application
;Clock frequency     : 8,000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 256
;*****************************************************/
;
;
;#include <stdio.h>
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x18 ;PORTB
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001F #endasm
;#include <lcd.h>
;
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x00
;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0029 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002A ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002B // Delay needed for the stabilization of the ADC input voltage
; 0000 002C delay_us(10);
;PCODE: $00000015 VOL: 0
; 0000 002D // Start the AD conversion
; 0000 002E ADCSRA|=0x40;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002F // Wait for the AD conversion to complete
; 0000 0030 while ((ADCSRA & 0x10)==0);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0031 ADCSRA|=0x10;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0032 return ADCW;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0033 }
;PCODE: $00000028 VOL: 0
;unsigned char on[6],off[6],PWM[6],n,nowPORT[6],PWMmax=40;
;
;#include <allPWM.c>
;void allPWM(){
; 0000 0036 void allPWM(){
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;///////////////////////////////////////
;//PWM
;nowPORT[2] = 0b00000100;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;nowPORT[3] = 0b00001000;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;nowPORT[4] = 0b00010000;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;nowPORT[5] = 0b00100000;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;
;on[2]=4;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;on[3]=4;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;on[4]=4;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;on[5]=4;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;
;
;for (n=2;n<6;n++) {
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;off[n]=on[n]+1;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;if (PWM[n]==on[n]){PORTD|=nowPORT[n];}
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;if (PWM[n]==off[n]){PORTD&=~nowPORT[n] ;}
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;if (PWM[n]>=PWMmax){PORTD|=nowPORT[n];PWM[n]=0;}
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PWM[n]++;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;
;};
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;
;///////////////////////////////////////
;}
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;#include <interrupt.c>
;//unsigned char Dig[20],DisOther,Num3,Num2,Disp6,Disp7,Timer_3;
;// Timer 0 overflow interrupt service routine
;unsigned char Timer_read_adc_1,Timer_read_adc_2,Timer_buzzer_active,Timer_buzzer_signal,Timer_buzzer_silence,Timer_buzzer_silence_1,Timer_buzzer_active_1,Timer_buzzer_active,LCD_switch,LCD_switch1;
;unsigned int adc[6],Time_sec;
;
;float Voltage2,Temp,SetVoltage,VoltPower,VoltBat1,VoltBat2,VoltBat3,VoltBat4;
;float Voltage2_old,Time;
;char Voltage2_str[20],Temp_str[20],SetVoltage_str[20],VoltPower_str[20],Time_str[20],VoltBat1_str[20],VoltBat2_str[20],VoltBat3_str[20],VoltBat4_str[20];
;
;unsigned char now_is_charge,now_is_discharge;
;float Time;
;unsigned char Timer_allPWM;
;
;char *_off;
;char *_charPIN;
;unsigned char pressed_PIND_0,pressed_PIND_1;
;
;#include <buzzer.c>
;void buzzer(unsigned char time,unsigned char freq,unsigned char repeat){
; 0000 0037 void buzzer(unsigned char time,unsigned char freq,unsigned char repeat){
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;if (time>0){
;	time -> Y+2
;	freq -> Y+1
;	repeat -> Y+0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;Timer_buzzer_active_1++;
;PCODE: $000000A9 VOL: 0
;if (Timer_buzzer_active_1>250){//длинна бузера
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;Timer_buzzer_active++;
;PCODE: $000000AD VOL: 0
;Timer_buzzer_active_1=0;
;PCODE: $000000AE VOL: 0
;}
;
;if(Timer_buzzer_active<time){
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;    Timer_buzzer_signal++;
;PCODE: $000000B3 VOL: 0
;    if (Timer_buzzer_signal==freq){//частота бузера
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;    PORTD^=0b10000000;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;    Timer_buzzer_signal=0;
;PCODE: $000000BC VOL: 0
;    }
;Timer_buzzer_silence=0;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;}
;if(Timer_buzzer_active>time){
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;    Timer_buzzer_silence_1++;
;PCODE: $000000C3 VOL: 0
;    if(Timer_buzzer_silence_1>250){
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;    Timer_buzzer_silence_1=0;
;PCODE: $000000C7 VOL: 0
;    Timer_buzzer_silence++;
;PCODE: $000000C8 VOL: 0
;    }
;    PORTD&=~0b10000000;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;        if(Timer_buzzer_silence>time){
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;            if (repeat>0){
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;            Timer_buzzer_active=0;
;PCODE: $000000D4 VOL: 0
;            }
;            repeat--;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;            if (repeat==0){
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;            time=0;freq=0;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;            }
;        }
;PCODE: $000000E0 VOL: 0
;    }
;PCODE: $000000E1 VOL: 0
;}
;PCODE: $000000E2 VOL: 0
;}
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
;{
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;//LCD_switch1++;
;//if (LCD_switch1==5){
;//LCD_switch++;
;//LCD_switch1=0;
;
;//if (LCD_switch>=2){LCD_switch=0;}
;//}
;
;
;// Place your code here
;Time_sec++;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PORTD^=0b01000000;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;
;}
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
;{
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;//allPWM();
;
;
;
;
;if (PIND.6==0){buzzer(10,10,3);};
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;
;
;Timer_read_adc_1++;
;PCODE: $00000102 VOL: 0
;if(Timer_read_adc_1==100){
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;Timer_read_adc_2++;
;PCODE: $00000106 VOL: 0
;Timer_read_adc_1=0;
;PCODE: $00000107 VOL: 0
;}
;
;//берем параметры
;if(Timer_read_adc_2==5){
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;adc[0]=read_adc(0);//чтение температуры
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;}if(Timer_read_adc_2==10){
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;adc[1]=read_adc(1);//чтение батареи
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;}if(Timer_read_adc_2==15){
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;adc[2]=read_adc(2);//чтение батареи
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;}if(Timer_read_adc_2==20){
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;adc[3]=read_adc(3);//чтение батареи
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;}if(Timer_read_adc_2==25){
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;adc[4]=read_adc(4);//чтение батареи
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;}if(Timer_read_adc_2==30){
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;adc[5]=read_adc(5);//чтение батареи
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;}if(Timer_read_adc_2==35){
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;
;Temp=adc[0]/102.4;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;Voltage2=adc[1]/18.7;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;SetVoltage=adc[2]/18.7;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;VoltPower=adc[3]/200.0;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;//if ()
;
;if (Voltage2!=Voltage2_old){
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;    if (Voltage2_old>Voltage2){
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;    now_is_charge=0;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;    now_is_discharge=1;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;    //Volt_diff= Voltage2-Voltage2_old;
;    }
;    if (Voltage2_old<Voltage2){
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;    now_is_charge=1;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;    now_is_discharge=0;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;    //Volt_diff= Voltage2_old-Voltage2;
;    }
;    Time=((Time_sec*(SetVoltage-Voltage2))/(Voltage2-Voltage2_old))/60;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;    Time_sec=0;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;    Voltage2_old=Voltage2;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;}
;
;//отображение
;
;
;if (LCD_switch==0){
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;lcd_clear();
;PCODE: $00000189 VOL: 0
;lcd_gotoxy(0,0);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;//sprintf(Temp_str, "t:%.2f", Temp);}
;sprintf(Voltage2_str, "%.2fV", Voltage2);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;sprintf(SetVoltage_str, " %.2fV", SetVoltage);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;sprintf(VoltPower_str, "I:%.2fA", VoltPower);
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;sprintf(Time_str, " %.2fm", Time);
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;
;
;lcd_puts(Voltage2_str);   // Выводим строку _str на дисплей ЖКИ
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;lcd_puts(SetVoltage_str);   // Выводим строку _str на дисплей ЖКИ
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;lcd_gotoxy(0,1);
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;lcd_puts(VoltPower_str);
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;//if (Temp!=0){
;//lcd_puts(Temp_str);}   // Выводим строку _str на дисплей ЖКИ
;lcd_puts(Time_str);
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;//lcd_gotoxy(0,1);
;//lcd_putsf(" Time:");
;//lcd_puts(_data[1]);
;}
;
;
;
;if (LCD_switch==1){
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;lcd_clear();
;PCODE: $000001D0 VOL: 0
;lcd_gotoxy(0,0);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;VoltBat1=5.0-adc[0]/204.6;
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;VoltBat2=5.0-adc[4]/204.6;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;VoltBat3=5.0-adc[5]/204.6;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;VoltBat4=5.0-adc[5]/204.6;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;//off[2]=1;
;//if (VoltBat1>4.1){on[2]--;}
;//if (VoltBat1<4.0){on[2]++;}
;
;
;sprintf(VoltBat1_str, "B1:%.2fV", VoltBat1);
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;sprintf(VoltBat2_str, "B2:%.2fV", VoltBat2);
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;sprintf(VoltBat3_str, "B3:%.2fV", VoltBat3);
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;sprintf(VoltBat4_str, "B4:%.2fV", VoltBat4);
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;
;
;lcd_puts(VoltBat1_str);
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;lcd_puts(VoltBat2_str);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;lcd_puts(VoltBat3_str);
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;lcd_puts(VoltBat4_str);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;
;//itoa(on[2], _off);
;//lcd_putsf("On");
;//lcd_puts(_off);
;
;//itoa(PIND.0, _charPIN);
;//lcd_puts(_charPIN);
;//lcd_putsf(off[2]);
;//Timer_read_adc_2=0;
;}
;
;Timer_read_adc_2=0;   // Выводим строку _str на дисплей ЖКИ
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;
;
;
;
;}
;if ((PIND.0==0)&&(pressed_PIND_0==0)){
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;on[2]++;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;pressed_PIND_0=1;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;}
;if ((PIND.1==0)&&(pressed_PIND_1==0)){
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;pressed_PIND_1=1;
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;on[2]--;
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;}
;if (PIND.0==1){pressed_PIND_0=0;}
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;if (PIND.1==1){pressed_PIND_1=0;}
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;
;PORTD|=0b00000100;
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;}
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;// Place your code here
;/*
;Timer_3++;
;if (Timer_3==1){//первая цифра
;PORTC&=~0b00000100;
;PORTC|=0b00001000;
;PORTB=Disp6-Dis1;}
;if (Timer_3==100){//вторая цифра
;PORTC&=~0b00001000;
;PORTC|=0b00000100;
;PORTB=Disp7-Dis2;
;}
;if (Timer_3==200){Timer_3=0;}
;//Timer_8++
;*/
;//}
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;/*
;void Dig_init() //Массив для отображения цифр на семисегментном индикаторе
;{          //ABCDEFG DP
;  Dig[0] = 0b00000011;
;  Dig[1] = 0b10011111;
;  Dig[2] = 0b00100101;
;  Dig[3] = 0b00001101;
;  Dig[4] = 0b10011001;
;  Dig[5] = 0b01001001;
;  Dig[6] = 0b01000011;
;  Dig[7] = 0b00011111;
;  Dig[8] = 0b00000001;
;  Dig[9] = 0b00001001;
;  Dig[10]= 0b01001001;//s
;  Dig[11]= 0b00110001;//p
;  Dig[12]= 0b01100011;//C
;  Dig[13]= 0b00001111;//C
;  Dig[14]= 0b11001111;//u
;  Dig[15]= 0b11100111;//u
;  Dig[16]= 0b00000001;//.
;}
;void Display (unsigned int Number) //Ф-ция для разложения десятичного цисла
;{
;if (DisOther==0){
;  Num2=0, Num3=0;
;    while (Number >= 10)
;  {
;    Number -= 10;
;    Num3++;
;  }
;  Num2 = Number;
; }
;
;  Disp6 = Dig[Num3];
;  Disp7 = Dig[Num2];
;}
;*/
;
;// Declare your global variables here
;
;void main(void)
; 0000 003C {
;PCODE: $00000273 VOL: 0
; 0000 003D // Declare your local variables here
; 0000 003E 
; 0000 003F // Input/Output Ports initialization
; 0000 0040 // Port B initialization
; 0000 0041 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0042 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0043 PORTB=0x00;
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 0044 DDRB=0x00;
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0045 
; 0000 0046 // Port C initialization
; 0000 0047 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0048 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0049 PORTC=0x00;
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 004A DDRC=0x00;
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 004B 
; 0000 004C // Port D initialization
; 0000 004D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004F PORTD=0b00000000;
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 0050 DDRD=0b11111100;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 0051 
; 0000 0052 // Timer/Counter 0 initialization
; 0000 0053 // Clock source: System Clock
; 0000 0054 // Clock value: 8000,000 kHz
; 0000 0055 TCCR0=0x01;
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 0056 TCNT0=0x00;
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 0057 
; 0000 0058 // Timer/Counter 1 initialization
; 0000 0059 // Clock source: System Clock
; 0000 005A // Clock value: Timer 1 Stopped
; 0000 005B // Mode: Normal top=FFFFh
; 0000 005C // OC1A output: Discon.
; 0000 005D // OC1B output: Discon.
; 0000 005E // Noise Canceler: Off
; 0000 005F // Input Capture on Falling Edge
; 0000 0060 // Timer 1 Overflow Interrupt: Off
; 0000 0061 // Input Capture Interrupt: Off
; 0000 0062 // Compare A Match Interrupt: Off
; 0000 0063 // Compare B Match Interrupt: Off
; 0000 0064 TCCR1A=0x00;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 0065 TCCR1B=0x03;
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 0066 TCNT1H=0x00;
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 0067 TCNT1L=0x00;
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 0068 ICR1H=0x00;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 0069 ICR1L=0x00;
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 006A OCR1AH=0x00;
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 006B OCR1AL=0x00;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 006C OCR1BH=0x00;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 006D OCR1BL=0x00;
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 006E 
; 0000 006F // Timer/Counter 2 initialization
; 0000 0070 // Clock source: System Clock
; 0000 0071 // Clock value: Timer 2 Stopped
; 0000 0072 // Mode: Normal top=FFh
; 0000 0073 // OC2 output: Disconnected
; 0000 0074 ASSR=0x00;
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 0075 TCCR2=0x00;
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 0076 TCNT2=0x00;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0077 OCR2=0x00;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0078 
; 0000 0079 // External Interrupt(s) initialization
; 0000 007A // INT0: Off
; 0000 007B // INT1: Off
; 0000 007C MCUCR=0x00;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 007D 
; 0000 007E // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 007F TIMSK=0x05;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0080 
; 0000 0081 // Analog Comparator initialization
; 0000 0082 // Analog Comparator: Off
; 0000 0083 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0084 ACSR=0x80;
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 0085 SFIOR=0x00;
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0086 
; 0000 0087 // ADC initialization
; 0000 0088 // ADC Clock frequency: 1000,000 kHz
; 0000 0089 // ADC Voltage Reference: AREF pin
; 0000 008A ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 008B ADCSRA=0x83;
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 008C 
; 0000 008D // LCD module initialization
; 0000 008E lcd_init(16);
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 008F 
; 0000 0090 // Global enable interrupts
; 0000 0091 #asm("sei")
;PCODE: $000002AF VOL: 0
	sei
;PCODE: $000002B0 VOL: 0
; 0000 0092 
; 0000 0093 while (1)
;PCODE: $000002B1 VOL: 0
; 0000 0094       {
; 0000 0095       // Place your code here
; 0000 0096       #include <while.c>
;
;
; 0000 0097 
; 0000 0098       };
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 0099 }
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
