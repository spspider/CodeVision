;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x18 ;PORTB
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0006 #endasm
;#include <stdlib.h>
;
;#include <lcd.h>
;//#include <flex_lcd.c>
;
;
;
;
;
;
;
;// Standard Input/Output functions
;#include <stdio.h>  ////////////////////////////////////////для конвертации
;//#include <string.h>
;// Timer 0 overflow interrupt service routine
;#include <INT.c>
;//interrupt #include <INT.c>
;
;unsigned char adc[5];
;unsigned int Timer1,Timer4,Timer5,Timer7;
;unsigned char Timer2,Timer6,Timer3,interval,cl[5],temp,sw=0,data;
;char *adc_c[5];
;unsigned char a,pulse_ok=0,buzzer,ready_adc_2=0;
;
;unsigned int previous_value[4];
;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0016 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;// Place your code here
;Timer1++;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;if (Timer1==1000){
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;Timer1=0;a=1;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;sw++;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;if (sw==2){sw=0;}
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;
;
;#include <count1000.c>
;/*
;if (ready_adc_2==1){
;previous_value[i]=adc[2];//записываем данные в массив
;
;    if (i==2){
;
;        if (abs(previous_value[i-1]-previous_value[i])>10){
;        //pulse_ok=1;
;        died=0;
;        PORTD|=0b00010000;
;        //echo Timer1;
;        //printf("interval:%d#",Timer5);
;        interval=Timer5;//интервал
;        //itoa(interval, interval_c);
;        Timer5=0;
;        //timer_enable_pulse=1;
;        //запустить таймер подсчета времени между импульсами
;        //добавить импульс
;
;        }
;
;        i=0;
;        }
;    i++;
;    ready_adc_2=0;
;
;}
;*/
;}
;PCODE: $00000023 VOL: 0
;#include <count_TIM0_OVF.c>
;//OVF
;//if (Timer5==200){interval=Timer5;Timer5=0;died=1;}
;if (adc[1]==1){
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;if (pulse_ok==1){
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;    //таймер для звука, работает при обнаружении пульса
;Timer3++;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;        if (Timer3==5){
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;        PORTD^=0b00001000;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;        Timer4++;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;        Timer3=0;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;        }
;
;        if (Timer4==200){
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;        Timer4=0;
;PCODE: $00000040 VOL: 0
;        buzzer=0;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;        pulse_ok=0;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;        PORTD&=~0b00011000;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;        }
;}
;PCODE: $00000049 VOL: 0
;}
;PCODE: $0000004A VOL: 0
;//PORTC^=0b00000001;
;if (sw!=0){
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;//если получен сигнал
;if (pulse_ok==0){
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;Timer5++;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;//adc[1]=0;
;if (Timer5==500){
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;
;PORTC^=0b00000001;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;Timer5=0;
;PCODE: $0000005E VOL: 0
;}
;
;    //if (Timer7==8){
;    //Timer7=0;
;    //adc[1]=1;data=0;
;    //printf("%d",adc[1]);pulse_ok=0;
;    //}
;    if (adc[1]==1){
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;    Timer7++;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;        if (Timer7==2000){
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;        Timer7=0;adc[1]=0;};
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;        }
;
;
;
;
;}
;PCODE: $0000006F VOL: 0
;}
;PCODE: $00000070 VOL: 0
;//PORTC|=0b00000001;
;
;}
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;#include <delay.h>
;//#define ADC_VREF_TYPE 0x00 //для 1024
;#define ADC_VREF_TYPE 0x20
;#include <voids.c>
;char q;
;void clear(char cl_now)
; 0000 001A {
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;    for(q=0;q<5;q++){
;	cl_now -> Y+0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;    if(cl_now==q){cl[q]=1;}
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;    if(cl_now!=q){cl[q]=0;}
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;
;    //else{cl[q]=1;}
;    }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;}
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 001D {
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 001E #include<interrupt_1.c>
;//    if (PIND.2==0){//если сигнал был выслан и был получен
;//if(PINC.0==1){
;    adc[1]=1;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;    //data|=1;
;    //pulse_ok=1;
;//    }
;//}
;
; 0000 001F 
; 0000 0020 }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0023 {
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0024 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0025 // Delay needed for the stabilization of the ADC input voltage
; 0000 0026 delay_us(100);
;PCODE: $000000AC VOL: 0
; 0000 0027 // Start the AD conversion
; 0000 0028 ADCSRA|=0x40;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0029 // Wait for the AD conversion to complete
; 0000 002A while ((ADCSRA & 0x10)==0);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 002B ADCSRA|=0x10;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 002C //return ADCW; //1024
; 0000 002D return ADCH;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 002E }
;PCODE: $000000C0 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0033 {
;PCODE: $000000C1 VOL: 0
; 0000 0034 // Declare your local variables here
; 0000 0035 
; 0000 0036 // Input/Output Ports initialization
; 0000 0037 // Port B initialization
; 0000 0038 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0039 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 003A PORTB=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 003B //DDRB=0x00;
; 0000 003C DDRB=0b00000000;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 003D 
; 0000 003E 
; 0000 003F // Port C initialization
; 0000 0040 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0041 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0042 PORTC=0b00000000;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0043 DDRC=0b00000001;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0044 
; 0000 0045 // Port D initialization
; 0000 0046 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0047 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0048 PORTD=0b00000000;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0049 DDRD=0b00001000;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 004A 
; 0000 004B // Timer/Counter 0 initialization
; 0000 004C // Clock source: System Clock
; 0000 004D // Clock value: 8000,000 kHz
; 0000 004E TCCR0=0x01;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 004F TCNT0=0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0050 
; 0000 0051 // Timer/Counter 1 initialization
; 0000 0052 // Clock source: System Clock
; 0000 0053 // Clock value: Timer 1 Stopped
; 0000 0054 // Mode: Normal top=FFFFh
; 0000 0055 // OC1A output: Discon.
; 0000 0056 // OC1B output: Discon.
; 0000 0057 // Noise Canceler: Off
; 0000 0058 // Input Capture on Falling Edge
; 0000 0059 // Timer 1 Overflow Interrupt: Off
; 0000 005A // Input Capture Interrupt: Off
; 0000 005B // Compare A Match Interrupt: Off
; 0000 005C // Compare B Match Interrupt: Off
; 0000 005D TCCR1A=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 005E TCCR1B=0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 005F TCNT1H=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0060 TCNT1L=0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0061 ICR1H=0x00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0062 ICR1L=0x00;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0063 OCR1AH=0x00;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0064 OCR1AL=0x00;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0065 OCR1BH=0x00;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0066 OCR1BL=0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0067 
; 0000 0068 // Timer/Counter 2 initialization
; 0000 0069 // Clock source: System Clock
; 0000 006A // Clock value: Timer 2 Stopped
; 0000 006B // Mode: Normal top=FFh
; 0000 006C // OC2 output: Disconnected
; 0000 006D ASSR=0x00;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 006E TCCR2=0x00;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 006F TCNT2=0x00;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0070 OCR2=0x00;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 0071 
; 0000 0072 // External Interrupt(s) initialization
; 0000 0073 // INT0: Off
; 0000 0074 // INT1: Off
; 0000 0075 MCUCR=0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0076 
; 0000 0077 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0078 TIMSK=0x01;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0079 
; 0000 007A // USART initialization
; 0000 007B // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 007C // USART Receiver: On
; 0000 007D // USART Transmitter: On
; 0000 007E // USART Mode: Asynchronous
; 0000 007F // USART Baud Rate: 9600
; 0000 0080 
; 0000 0081 UCSRA=0x00;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0082 UCSRB=0x18;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0083 UCSRC=0x86;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0084 UBRRH=0x00;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0085 UBRRL=0x33;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0086 
; 0000 0087 // Analog Comparator initialization
; 0000 0088 // Analog Comparator: Off
; 0000 0089 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 008A ACSR=0x80;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 008B SFIOR=0x00;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 008C 
; 0000 008D // ADC initialization
; 0000 008E // ADC Clock frequency: 1000,000 kHz
; 0000 008F // ADC Voltage Reference: AREF pin
; 0000 0090 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0091 ADCSRA=0x83;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0092 
; 0000 0093 
; 0000 0094 GICR|=0x40;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0095 MCUCR=0x02;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0096 GIFR=0x40;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0097 // LCD module initialization
; 0000 0098 lcd_init(16);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0099 
; 0000 009A // Global enable interrupts
; 0000 009B #asm("sei")
;PCODE: $0000010F VOL: 0
	sei
;PCODE: $00000110 VOL: 0
; 0000 009C 
; 0000 009D while (1)
;PCODE: $00000111 VOL: 0
; 0000 009E       {
; 0000 009F       #include <while.c>
;
;
;
;//PORTD^=0b00001000;
;//температура
;//PORTC^=0b00000001;
;
;
;
;if(sw==0){
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;if (pulse_ok==0){
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;//adc[0]=read_adc(0);//считываем уровень
;delay_us(200);
;PCODE: $00000118 VOL: 0
;itoa(adc[0], adc_c[0]);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;delay_us(200);
;PCODE: $0000011F VOL: 0
;//показания IR приемника
;adc[2]=read_adc(2);//считываем уровень
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;delay_ms(200);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;ready_adc_2=1;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;//#include <add_this.c>
;//delay_ms(200);
;
;
;lcd_clear();
;PCODE: $0000012A VOL: 0
;
;lcd_gotoxy(0, 0);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;lcd_putsf("temp");
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;delay_us(100);
;PCODE: $00000134 VOL: 0
;lcd_puts(adc_c[0]);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;delay_us(200);//ms
;PCODE: $00000138 VOL: 0
;
;
;
;itoa(adc[2], adc_c[2]);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;delay_us(200);//
;PCODE: $00000141 VOL: 0
;lcd_gotoxy(8, 0);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;lcd_putsf("IR");
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;//itoa(adc[2], adc_c[2]);
;delay_us(200);
;PCODE: $0000014B VOL: 0
;lcd_puts(adc_c[2]);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;delay_us(200);
;PCODE: $00000150 VOL: 0
;
;
;itoa(adc[1], adc_c[1]);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;delay_us(200);
;PCODE: $00000159 VOL: 0
;lcd_gotoxy(0, 1);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;delay_us(200);
;PCODE: $0000015F VOL: 0
;lcd_putsf("int:");
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;delay_us(200);
;PCODE: $00000164 VOL: 0
;lcd_puts(adc_c[1]);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;delay_us(200);
;PCODE: $00000169 VOL: 0
;}
;
;}
;PCODE: $0000016A VOL: 0
; 0000 00A0       // Place your code here
; 0000 00A1 
; 0000 00A2       };
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00A3 }
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;
