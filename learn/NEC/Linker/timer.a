;#include "timer.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#define PRE 64UL
;
;#define START_IMP_TH  (12000UL*FCPU)/PRE
;#define START_IMP_MAX (15000UL*FCPU)/PRE
;#define BIT_IMP_MAX   (3000UL*FCPU)/PRE
;#define BIT_IMP_TH    (1500UL*FCPU)/PRE
;
;volatile unsigned int icr1 = 0;
;volatile unsigned int icr2 = 0;
;enum state {IDLE = 0, RESEIVE = 1};
;enum state currentState = IDLE;
;
;#define CAPTURE    0
;#define RESEIVE_OK 1
;volatile unsigned char flag = 0;
;
;//первые четыре байта - адрес и команда, пятый байт - количество повторов
;#define NUM_REPEAT 4
;#define MAX_SIZE 5
;unsigned char buf[MAX_SIZE];
;
;//инициализация таймера Т1
;void TIM_Init(void)
; 0003 001A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 001B    DDRD &= ~(1<<PIND6);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0003 001C    PORTD |= (1<<PIND6);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0003 001D 
; 0003 001E    TIMSK = (1<<TICIE1); //разрешаем прерывание по событию захват
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0003 001F    TCCR1A=(0<<COM1A1)|(0<<COM1A0)|(0<<WGM11)|(0<<WGM10);  //режим - normal,
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0003 0020    TCCR1B=(0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(1<<CS11)|(1<<CS10); //захват по заднему фронту, предделитель - 64
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0003 0021    TCNT1 = 0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0003 0022 
; 0003 0023    currentState = IDLE;
;PCODE: $0000001B VOL: 0
; 0003 0024 }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;
;//прерывание по событию захват
;interrupt [TIM1_CAPT] void Timer1Capt(void)
; 0003 0029 {
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0003 002A 
; 0003 002B    icr1 = icr2;
;PCODE: $00000020 VOL: 1
;PCODE: $00000021 VOL: 1
; 0003 002C    icr2 = ((unsigned int)ICR1H<<8)|ICR1L;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 1
; 0003 002D    SetBit(flag, CAPTURE);
;PCODE: $00000029 VOL: 1
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 1
; 0003 002E }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;unsigned int TIM_CalcPeriod(void)
; 0003 0031 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0003 0032   unsigned int buf1, buf2;
; 0003 0033 
; 0003 0034   #asm("cli");
;PCODE: $00000031 VOL: 0
;	buf1 -> R16,R17
;	buf2 -> R18,R19
;PCODE: $00000032 VOL: 0
	cli
;PCODE: $00000033 VOL: 0
; 0003 0035   buf1 = icr1;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 1
; 0003 0036   buf2 = icr2;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 1
; 0003 0037   #asm("sei");
;PCODE: $00000038 VOL: 0
	sei
;PCODE: $00000039 VOL: 0
; 0003 0038 
; 0003 0039   if (buf2 > buf1) {
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0003 003A     buf2 -= buf1;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0003 003B   }
; 0003 003C   else {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0003 003D     buf2 += (65535 - buf1);
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0003 003E   }
;PCODE: $00000045 VOL: 0
; 0003 003F   return buf2;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0003 0040 }
;PCODE: $0000004A VOL: 0
;
;//
;void TIM_Handle(void)
; 0003 0044 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0003 0045   unsigned int period;
; 0003 0046   static unsigned char data;
; 0003 0047   static unsigned char countBit, countByte;
; 0003 0048 
; 0003 0049   if (BitIsClear(flag, CAPTURE)) return;
;PCODE: $0000004D VOL: 0
;	period -> R16,R17
;PCODE: $0000004E VOL: 1
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0003 004A 
; 0003 004B   period = TIM_CalcPeriod();
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0003 004C 
; 0003 004D   switch(currentState){
;PCODE: $00000056 VOL: 0
; 0003 004E       //ждем стартовый импульс
; 0003 004F       case IDLE:
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0003 0050          if (period < START_IMP_MAX) {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0003 0051            if (period > START_IMP_TH){
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0003 0052              data = 0;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0003 0053              countBit = 0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0003 0054              countByte = 0;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0003 0055              buf[NUM_REPEAT] = 0;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0003 0056              currentState = RESEIVE;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0003 0057            }
; 0003 0058            else {
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0003 0059              buf[NUM_REPEAT]++;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0003 005A            }
;PCODE: $00000071 VOL: 0
; 0003 005B          }
; 0003 005C          break;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0003 005D 
; 0003 005E        //прием посылки
; 0003 005F        case RESEIVE:
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0003 0060          if (period < BIT_IMP_MAX){
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0003 0061            if (period > BIT_IMP_TH){
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0003 0062               SetBit(data, 7);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0003 0063            }
; 0003 0064            countBit++;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0003 0065            if (countBit == 8){
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0003 0066              buf[countByte] = data;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0003 0067              countBit = 0;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0003 0068              data = 0;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0003 0069              countByte++;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0003 006A              if (countByte == (MAX_SIZE - 1)){
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0003 006B                SetBit(flag, RESEIVE_OK);
;PCODE: $00000096 VOL: 1
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 1
; 0003 006C                currentState = IDLE;
;PCODE: $00000099 VOL: 0
; 0003 006D                break;
;PCODE: $0000009A VOL: 0
; 0003 006E              }
; 0003 006F            }
;PCODE: $0000009B VOL: 0
; 0003 0070            data = data>>1;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0003 0071          }
; 0003 0072          break;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0003 0073 
; 0003 0074 
; 0003 0075        default:
;PCODE: $000000A2 VOL: 0
; 0003 0076           break;
;PCODE: $000000A3 VOL: 0
; 0003 0077     }
;PCODE: $000000A4 VOL: 0
; 0003 0078 
; 0003 0079   ClearBit(flag, CAPTURE);
;PCODE: $000000A5 VOL: 1
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 1
; 0003 007A }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;
;
;void TIM_Display(void)
; 0003 007E {
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0003 007F   if(BitIsSet(flag, RESEIVE_OK)){
;PCODE: $000000AD VOL: 1
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0003 0080     LCD_Goto(0,0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0003 0081     BCD_3Lcd(buf[0]);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0003 0082     LCD_WriteData(' ');
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0003 0083     BCD_3Lcd(buf[1]);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0003 0084     LCD_WriteData(' ');
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0003 0085     BCD_3Lcd(buf[2]);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0003 0086     LCD_WriteData(' ');
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0003 0087     BCD_3Lcd(buf[3]);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0003 0088     LCD_WriteData(' ');
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0003 0089     ClearBit(flag, RESEIVE_OK);
;PCODE: $000000CE VOL: 1
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 1
; 0003 008A   }
; 0003 008B 
; 0003 008C   LCD_Goto(0,1);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0003 008D   BCD_3Lcd(buf[NUM_REPEAT]);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0003 008E }
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
