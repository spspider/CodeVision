;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.03.4 Standard
;Automatic Program Generator
;© Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10.01.2009
;Author  :
;Company :
;Comments:
;
;
;Chip type           : ATmega8
;Program type        : Application
;Clock frequency     : 8,000000 MHz
;Memory model        : Small
;External RAM size   : 0
;Data Stack size     : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x12 ;PORTB
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 001D #endasm
;#include <lcd.h>
;#include <delay.h>        // подключаем библиотеку задержки
;
; unsigned int sek;        // переменная сек.
; unsigned int min;        // пересенная мин.
; unsigned int hour;       // переменная часов
;// Timer 1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)  // таймер выставлен на частоту 1 Гц
; 0000 0026 {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0027 // Place your code here
; 0000 0028        TCNT1H=0;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0029        TCNT1L=0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002A        sek++;            // инкрементируем секунду
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002B 
; 0000 002C }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0031 {
;PCODE: $0000001C VOL: 0
; 0000 0032 // Declare your local variables here
; 0000 0033 
; 0000 0034 // Input/Output Ports initialization
; 0000 0035 // Port B initialization
; 0000 0036 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0037 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0038 PORTB=0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0039 DDRB=0xFF;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 003A 
; 0000 003B // Port C initialization
; 0000 003C // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 003D // State6=T State5=T State4=T State3=T State2=T State1=P State0=P
; 0000 003E PORTC=0x03;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003F DDRC=0x00;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0040 
; 0000 0041 // Port D initialization
; 0000 0042 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0043 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0044 PORTD=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0045 DDRD=0x00;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0046 
; 0000 0047 // Timer/Counter 0 initialization
; 0000 0048 // Clock source: System Clock
; 0000 0049 // Clock value: Timer 0 Stopped
; 0000 004A TCCR0=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 004B TCNT0=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004C 
; 0000 004D // Timer/Counter 1 initialization
; 0000 004E // Clock source: System Clock
; 0000 004F // Clock value: 7,813 kHz
; 0000 0050 // Mode: Normal top=FFFFh
; 0000 0051 // OC1A output: Discon.
; 0000 0052 // OC1B output: Discon.
; 0000 0053 // Noise Canceler: Off
; 0000 0054 // Input Capture on Falling Edge
; 0000 0055 // Timer 1 Overflow Interrupt: Off
; 0000 0056 // Input Capture Interrupt: Off
; 0000 0057 // Compare A Match Interrupt: On
; 0000 0058 // Compare B Match Interrupt: Off
; 0000 0059 TCCR1A=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 005A TCCR1B=0x05;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 005B TCNT1H=0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 005C TCNT1L=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 005D ICR1H=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005E ICR1L=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 005F OCR1AH=0x1E;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0060 OCR1AL=0x85;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0061 OCR1BH=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0062 OCR1BL=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0063 
; 0000 0064 // Timer/Counter 2 initialization
; 0000 0065 // Clock source: System Clock
; 0000 0066 // Clock value: Timer 2 Stopped
; 0000 0067 // Mode: Normal top=FFh
; 0000 0068 // OC2 output: Disconnected
; 0000 0069 ASSR=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 006A TCCR2=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 006B TCNT2=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 006C OCR2=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 006D 
; 0000 006E // External Interrupt(s) initialization
; 0000 006F // INT0: Off
; 0000 0070 // INT1: Off
; 0000 0071 MCUCR=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0072 
; 0000 0073 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0074 TIMSK=0x10;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0075 
; 0000 0076 // Analog Comparator initialization
; 0000 0077 // Analog Comparator: Off
; 0000 0078 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0079 ACSR=0x80;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 007A SFIOR=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 007B 
; 0000 007C // LCD module initialization
; 0000 007D lcd_init(16);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 007E 
; 0000 007F // Global enable interrupts
; 0000 0080 #asm("sei")
;PCODE: $00000054 VOL: 0
	sei
;PCODE: $00000055 VOL: 0
; 0000 0081 
; 0000 0082 while (1)
;PCODE: $00000056 VOL: 0
; 0000 0083       { // Place your code here
; 0000 0084 
; 0000 0085       // роботаем с кнопками
; 0000 0086        if (PINC.0==0)         // если нажата первая кнопка
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0087         {
; 0000 0088           delay_ms(250);      // задержка 1/4 сек. (для удобства) выбора
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0089           min++;              // к значению минуты добавляем еденицу
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 008A         }
; 0000 008B         if (PINC.1==0)        // если нажата вторая кнопка
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 008C         {
; 0000 008D           delay_ms(250);      // задержка 1/4 сек. (для удобства) выбора
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 008E           hour++;             // к значению часов добавляем еденицу
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 008F         }
; 0000 0090         ///// Условия часов.
; 0000 0091        if(sek==60)          // если сек = 60
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0092        {
; 0000 0093        min++;              // добавляем 1 к переменной "минута"
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0094        sek=0;              // зануляем переменную "секунда"
;PCODE: $00000071 VOL: 0
; 0000 0095        }
; 0000 0096        if(min==60)         // если мин = 60
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0097        {
; 0000 0098        hour++;             // добавляем 1 к переменной "час"
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0099        min=0;              // зануляем переменную "минута"
;PCODE: $00000079 VOL: 0
; 0000 009A        }
; 0000 009B        if (hour==24)        // так как у нас часы имеют 24 часовый формат
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 009C        {                    // при достыжении 24 часов, онулируем все переменные.
; 0000 009D        hour=0;
;PCODE: $0000007E VOL: 0
; 0000 009E        min=0;
;PCODE: $0000007F VOL: 0
; 0000 009F        sek=0;
;PCODE: $00000080 VOL: 0
; 0000 00A0        }
; 0000 00A1          // выводим переменные
; 0000 00A2         lcd_gotoxy(4,0);        // выводим посередине, если хотите вывести в начале дисплея тогда нужно выставить lcd_gotoxy(0,0);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00A3         lcd_putchar(hour/10+0x30);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00A4         lcd_putchar(hour%10+0x30);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00A5         lcd_putchar(':');
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00A6         lcd_putchar(min/10+0x30);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00A7         lcd_putchar(min%10+0x30);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00A8         lcd_putchar(':');
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00A9         lcd_putchar(sek/10+0x30);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00AA         lcd_putchar(sek%10+0x30);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00AB 
; 0000 00AC       };
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00AD }
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
