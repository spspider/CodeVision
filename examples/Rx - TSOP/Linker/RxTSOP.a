;//********************************************************
;// *********** PWM DC MOTOR CONTROL with IR *************
;//********************************************************
;//Controller: ATmega8 (1MHz internal Crystal)
;//Compiler:   ICCAVR
;//Author:     CC Dharmani, Chennai(India)
;//Date:       Dec 2008
;//********************************************************
;//this program uses two of the three PWM channels (OC1A & OC1B)
;//of the ATmega8, for controlling speed & direction of DC motor
;//The remote of Sony TV was used for sending IR codes
;
;
;//***********************************************************************
;// ************** HEADER FILE PWM_main.h *****************
;//***********************************************************************
;
;#define DIRECTION_FORWARD !(PIND & 0x20)
;#define DIRECTION_REVERSE (PIND & 0x20)
;#define STOP_MOTOR TCCR1B = 0x00; TCCR1A = 0x00
;#define START_MOTOR TCCR1B = 0x09
;#define set_FORWARD TCCR1A = 0x81
;#define set_REVERSE TCCR1A = 0x21
;#define ENABLE_INT0 GICR |= 0x40
;#define DISABLE_INT0 GICR &= ~0x40
;
;//defining macros for setting minimum and maximum PWM counter valuesе
;//определяем максимумы и минимумы ШИМ счетчика
;//and step-size for controlling the voltage applied to MOSFETs base
;#define COUNTER_LOWER_LIMIT 0x0070
;#define COUNTER_UPPER_LIMIT 0x00f8
;#define STEP_SIZE 0x0008
;
;
;void port_init(void);
;void timer0_init(void);
;void timer1_init(void);
;unsigned int read_IR (void);
;void motorControl (unsigned char code, unsigned char address);
;void init_devices(void);
;void delay_ms(int miliSec);
;//#include <iom8v.h>
;//#include <macros.h>
;#include <PWM_main.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;#include <mega8.h>
;
;/**************************************************************************
;* Interrupt Service Routine for INT0
;* Executed whenever a remote code is detected
;**************************************************************************/
;//#pragma interrupt_handler int0_isr:2  //вкл. пргма
;void int0_isr(void)                   //функция
; 0000 0035 {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0036 unsigned char count, code, address;
; 0000 0037 unsigned int IR_input;
; 0000 0038 
; 0000 0039 TCNT0 = 0;                            //таймер - выкл.
;PCODE: $00000039 VOL: 0
;	count -> R17
;	code -> R16
;	address -> R19
;	IR_input -> R20,R21
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003A while(!(PIND & 0x04));                //цикл, в котор
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 003B count = TCNT0;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 003C 
; 0000 003D if(count < 30) //to verify start pulse (2.4 ms long)
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 003E {
; 0000 003F delay_ms(20);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0040 ENABLE_INT0;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0041 return;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0042 }
; 0000 0043 
; 0000 0044 PORTC |= 0x20;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0045 
; 0000 0046 IR_input = read_IR ();
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0047 
; 0000 0048 code = (unsigned char) ((IR_input & 0xff00) >> 8);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0049 address = (unsigned char) (IR_input & 0x00ff);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 004A 
; 0000 004B motorControl ( code, address );
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 004C 
; 0000 004D PORTC &= ~0x20;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 004E delay_ms(250);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 004F 
; 0000 0050 }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;
;//*********************************************************************
;//Function to read IR message from the detector
;//Return value contains code in upper byte and address in lower byte
;//*********************************************************************
;unsigned int read_IR (void)
; 0000 0057 {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0058 unsigned char pulseCount=0, code = 0, address = 0, timerCount;
; 0000 0059 unsigned int IR_input;
; 0000 005A 
; 0000 005B while(pulseCount < 7)
;PCODE: $0000006F VOL: 0
;	pulseCount -> R17
;	code -> R16
;	address -> R19
;	timerCount -> R18
;	IR_input -> R20,R21
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 005C {
; 0000 005D while(PIND & 0x04);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 005E TCNT0 = 0;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 005F 
; 0000 0060 while(!(PIND & 0x04));
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0061 pulseCount++;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0062 
; 0000 0063 timerCount = TCNT0;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0064 
; 0000 0065 if(timerCount > 14)
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0066 code = code | (1 << (pulseCount-1));
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0067 else
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0068 code = code & ~(1 << (pulseCount-1));
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0069 }
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 006A 
; 0000 006B pulseCount = 0;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 006C while(pulseCount < 5)
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 006D {
; 0000 006E while(PIND & 0x04);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 006F TCNT0 = 0;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0070 
; 0000 0071 while(!(PIND & 0x04));
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0072 pulseCount++;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0073 
; 0000 0074 timerCount = TCNT0;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0075 
; 0000 0076 if(timerCount > 14)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0077 address = address | (1 << (pulseCount-1));
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0078 else
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0079 address = address & ~(1 << (pulseCount-1));
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 007A }
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 007B 
; 0000 007C IR_input = (((unsigned int)code) << 8) | address;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 007D 
; 0000 007E return(IR_input);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 007F }
;PCODE: $000000FA VOL: 0
;
;//****************************************************************************
;//Function to control motor speed & direction depending onthe IR code rceived
;//Argumets are the code and address values received from IR detector
;//****************************************************************************
;void motorControl (unsigned char code, unsigned char address)
; 0000 0086 {
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0087 static unsigned char counter, dir, dir1;
; 0000 0088 
; 0000 0089 if (address != 1) //detect only TV remote, other signals rejected
;	code -> Y+1
;	address -> Y+0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 008A return;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 008B 
; 0000 008C if((code == 16) || (code == 17)) //Channel+ or Channel- button is pressed
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 008D {
; 0000 008E if(code == 16) //Channel+
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 008F dir = 0;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0090 else //Channel-
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0091 dir = 1;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0092 
; 0000 0093 if(dir != dir1) //change direction
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0094 {
; 0000 0095 STOP_MOTOR;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0096 delay_ms(500);
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0097 
; 0000 0098 if(dir == 0)
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0099 set_FORWARD;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 009A else
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 009B set_REVERSE;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 009C 
; 0000 009D START_MOTOR;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 009E dir1 = dir;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 009F }
; 0000 00A0 }
;PCODE: $0000012E VOL: 0
; 0000 00A1 
; 0000 00A2 if(code == 18) //Volume- button pressed
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00A3 {
; 0000 00A4 if(counter >= COUNTER_UPPER_LIMIT) //if speed is already maximum, don't do anything
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00A5 counter = COUNTER_UPPER_LIMIT;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00A6 else
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00A7 counter += STEP_SIZE; //increase speed by a fixed step
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00A8 
; 0000 00A9 OCR1A = counter;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00AA OCR1B = counter;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00AB }
; 0000 00AC 
; 0000 00AD if(code == 19) //Volume+ button pressed
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00AE {
; 0000 00AF if(counter <= COUNTER_LOWER_LIMIT) //if speed is already minimum, don't do anything
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00B0 counter = COUNTER_LOWER_LIMIT;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00B1 else
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00B2 counter -= STEP_SIZE; //reduce speed by a fixed step
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00B3 
; 0000 00B4 OCR1A = counter;
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00B5 OCR1B = counter;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00B6 }
; 0000 00B7 
; 0000 00B8 if(code == 9) //'0' button pressed
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00B9 {
; 0000 00BA OCR1A = COUNTER_LOWER_LIMIT;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00BB OCR1B = COUNTER_LOWER_LIMIT;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00BC STOP_MOTOR;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00BD }
; 0000 00BE 
; 0000 00BF if(code == 0) //'1' button pressed
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00C0 {
; 0000 00C1 OCR1A = COUNTER_LOWER_LIMIT;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00C2 OCR1B = COUNTER_LOWER_LIMIT;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00C3 
; 0000 00C4 TCCR1A = 0x81;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00C5 START_MOTOR;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00C6 }
; 0000 00C7 }
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;
;//************************************************************
;//*** call this routine to initialize all peripherals
;//************************************************************
;void init_devices(void)
; 0000 00CD {
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00CE //stop errant interrupts until set up
; 0000 00CF #asm("CLI"); //disable all interrupts
;PCODE: $00000179 VOL: 0
	CLI
;PCODE: $0000017A VOL: 0
; 0000 00D0 port_init();
;PCODE: $0000017B VOL: 0
; 0000 00D1 timer0_init();
;PCODE: $0000017C VOL: 0
; 0000 00D2 timer1_init();
;PCODE: $0000017D VOL: 0
; 0000 00D3 
; 0000 00D4 MCUCR = 0x02;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00D5 GICR = 0x40;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00D6 TIMSK = 0x00; //timer interrupt sources
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00D7 #asm ("SEI"); //re-enable interrupts
;PCODE: $00000184 VOL: 0
	SEI
;PCODE: $00000185 VOL: 0
; 0000 00D8 //all peripherals are now initialized
; 0000 00D9 }
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;
;//************************************************************
;//***** FUNCTION FOR SOFTWARE DELAY OF 1 mSEC (appx.) *******
;//************************************************************
;void delay_ms(int miliSec) //for 1 Mhz crystal
; 0000 00DF {
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00E0 int i,j;
; 0000 00E1 
; 0000 00E2 for(i=0;i<miliSec;i++)
;PCODE: $0000018A VOL: 0
;	miliSec -> Y+4
;	i -> R16,R17
;	j -> R18,R19
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00E3 for(j=0;j<100;j++)
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00E4 {
; 0000 00E5 #asm("nop");
;PCODE: $0000019D VOL: 0
	nop
;PCODE: $0000019E VOL: 0
; 0000 00E6 #asm("nop");
;PCODE: $0000019F VOL: 0
	nop
;PCODE: $000001A0 VOL: 0
; 0000 00E7 }
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00E8 }
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;
;//*******************************************************
;// ************ MAIN FUNCTION *************
;//*******************************************************
;void main(void)
; 0000 00EE {
;PCODE: $000001AF VOL: 0
; 0000 00EF init_devices();
;PCODE: $000001B0 VOL: 0
; 0000 00F0 
; 0000 00F1 while(1); //infinite loop, waiting for interrups from IR detector
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 00F2 }
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
