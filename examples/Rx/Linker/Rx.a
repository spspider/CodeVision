;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;#define RXB8 1
;#define TXB8 0
;#define UPE 2
;#define OVR 3
;#define FE 4
;#define UDRE 5
;#define RXC 7
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<OVR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE],prin;
;char data, status, data1;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0022 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0023 char status,data;
; 0000 0024 status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0025 data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0026 PORTB=0b00000000;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0027 rx_buffer[rx_wr_index]=data;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0028 
; 0000 0029 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002A    {
; 0000 002B 
; 0000 002C 
; 0000 002D    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002E    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 002F       {
; 0000 0030       rx_counter=0;
;PCODE: $0000002A VOL: 0
; 0000 0031       rx_buffer_overflow=1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0032       };
;PCODE: $0000002E VOL: 0
; 0000 0033    //printf("%d\r",data);
; 0000 0034    //putchar('\n');
; 0000 0035    putchar(data);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0036    //PORTB=0b00000000;
; 0000 0037    data1= data;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0038    };
;PCODE: $00000033 VOL: 0
; 0000 0039 }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 003F {
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0040 char data;
; 0000 0041 while (rx_counter==0);
;PCODE: $0000003A VOL: 0
;	data -> R17
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0042 data=rx_buffer[rx_rd_index];
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0043 if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0044 #asm("cli")
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
	cli
;PCODE: $0000004B VOL: 0
; 0000 0045 --rx_counter;
;PCODE: $0000004C VOL: 0
; 0000 0046 #asm("sei")
;PCODE: $0000004D VOL: 0
	sei
;PCODE: $0000004E VOL: 0
; 0000 0047 return data;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0048 }
;PCODE: $00000052 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE<256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0058 {
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0059 if (tx_counter)
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 005A    {
; 0000 005B    --tx_counter;
;PCODE: $00000057 VOL: 0
; 0000 005C    UDR=tx_buffer[tx_rd_index];
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 005D    if (++tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 005E    };
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 005F }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0066 {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0067 while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0068 #asm("cli")
;PCODE: $0000006F VOL: 0
	cli
;PCODE: $00000070 VOL: 0
; 0000 0069 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 006A    {
; 0000 006B    tx_buffer[tx_wr_index]=c;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 006C    if (++tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 006D    ++tx_counter;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 006E    }
; 0000 006F else
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0070    UDR=c;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0071 #asm("sei")
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
	sei
;PCODE: $0000008B VOL: 0
; 0000 0072 }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;void main(void)
; 0000 007C {
;PCODE: $0000008F VOL: 0
; 0000 007D PORTB=0xFF;         //вкл. подт€гивающие резисторы
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 007E DDRB=0xFF;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 007F 
; 0000 0080 UCSRA=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0081 UCSRB=0xD8;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0082 UCSRC=0x86;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0083 UBRRH=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0084 UBRRL=0x33;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0085 
; 0000 0086 #asm("sei")
;PCODE: $0000009E VOL: 0
	sei
;PCODE: $0000009F VOL: 0
; 0000 0087 
; 0000 0088 while (1)
;PCODE: $000000A0 VOL: 0
; 0000 0089       {
; 0000 008A //      delay_ms(1000);
; 0000 008B //      printf ("getchar");
; 0000 008C //      printf (" %d\r",data1);
; 0000 008D //      putchar('\n');
; 0000 008E 
; 0000 008F             };
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0090 }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
