/* Name: main.c
 * Project: HID-Test
 * Author: Christian Starkjohann
 * Creation Date: 2006-02-02
 * Tabsize: 4
 * Copyright: (c) 2006 by OBJECTIVE DEVELOPMENT Software GmbH
 * License: GNU GPL v2 (see License.txt) or proprietary (CommercialLicense.txt)
 * This Revision: $Id: main.c 299 2007-03-29 17:07:19Z cs $
 */

#define F_CPU   12000000L    /* evaluation board runs on 4MHz */

#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/pgmspace.h>
#include <avr/wdt.h>

#include "usbdrv.h"
#include "oddebug.h"
#include <util/delay.h>

static uchar ps2buffer[9]={0,0,0,0,0,0,0,0,0};
static uchar type=0; // 0=Normal digital, >200 = DDR Pad

/* ----------------------- hardware I/O abstraction ------------------------ */


/* ------------------------------------------------------------------------- */

static void hardwareInit(void)
{
uchar	i, j;

	DDRB = 0x2D;	// PORTB vsi outputi, razen MISO in PB1
	PORTB = 0x04;	// SS line (the ATENTION line on the PS1/2 controllers) is active LOW

    PORTC = 0;		// Don't need these atm.
    DDRC = 0;		// Don't need these atm.

    PORTD = 0xfa;   /* 1111 1010 bin: activate pull-ups except on USB lines */
    DDRD = 0x07;    /* 0000 0111 bin: all pins input except USB (-> USB reset) */
	j = 0;
	while(--j){     /* USB Reset by device only required on Watchdog Reset */
		i = 0;
		while(--i); /* delay >10ms for USB reset */
	}
    DDRD = 0x02;    /* 0000 0010 bin: remove USB reset condition */
    /* configure timer 0 for a rate of 12M/(1024 * 256) = 45.78 Hz (~22ms) */
    TCCR0 = 5;      /* timer 0 prescaler: 1024 */
}

/* ------------------------------------------------------------------------- */

/* ------------------------------------------------------------------------- */
/* ----------------------Atmega9 SPI, master, 93.75khz---------------------- */
/* ------------------------------------------------------------------------- */

void spi_mInit()
{
	// SPI, master, clock/128 = 93.75khz (187.5 didn't work...)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0)|(1<<DORD)|(1<<CPHA)|(1<<CPOL);
}

unsigned char spi_mSend(unsigned char podatek)	//straight from documentation
{

	// Gets information, sends it, waits untill it's sent, then reads the same register (used for both Input and Output) ans returns it

	/* Start transmission */
	SPDR = podatek;
	while(!(SPSR & (1<<SPIF))) 
	;

	return SPDR;
}

/* ------------------------------------------------------------------------- */

/* ------------------------------------------------------------------------- */
/* ----------------------------- USB interface ----------------------------- */
/* ------------------------------------------------------------------------- */

static uchar    reportBuffer[9];    /* buffer for HID reports */
static uchar	cheatBuffer[18];	// Cheating, it's a sport
static uchar    idleRate;           /* in 4 ms units */

PROGMEM char usbHidReportDescriptor[USB_CFG_HID_REPORT_DESCRIPTOR_LENGTH] = { /* USB report descriptor */
	0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)
    0x09, 0x05,                    // USAGE (Game pad)
    0xa1, 0x01,                    // COLLECTION (Application)
    0x09, 0x01,                    //   USAGE (Pointer)
    0xa1, 0x00,                    //   COLLECTION (Physical)
	0x85, 0x01, 					//     REPORT_ID (1)
    0x09, 0x30,                    //     USAGE (X)
    0x09, 0x31,                    //     USAGE (Y)
	0x09, 0x32,                    //     USAGE (Z)
	0x09, 0x33,                    //     USAGE (Rx)
	0x09, 0x34,                    //     USAGE (Ry)
	0x09, 0x35,                    //     USAGE (Rz)
	
    0x15, 0x00,                    //     LOGICAL_MINIMUM (0)
    0x26, 0xff, 0x00,              //     LOGICAL_MAXIMUM (255)
    0x75, 0x08,                    //     REPORT_SIZE (8)
    0x95, 0x06,                    //     REPORT_COUNT (6)

	0x81, 0x02,                    //     INPUT (Data,Var,Abs)
	
	
	//

	0x15, 0x00,                    //     LOGICAL_MINIMUM (0)
	0x25, 0x01,                    //     LOGICAL_MAXIMUM (1)
	0x95, 0x10,                    //     REPORT_COUNT (16)
	0x75, 0x01,                    //     REPORT_SIZE (1)
	0x05, 0x09,                    //     USAGE_PAGE (Button)
	0x19, 0x01,                    //     USAGE_MINIMUM (Button 1)
	0x29, 0x10,                    //     USAGE_MAXIMUM (Button 16)

	0x81, 0x02,                    //     INPUT (Data,Var,Abs)
	0xc0,                          //     END_COLLECTION
	0xc0,                          //     END_COLLECTION

	// HID for second controller
	// HID for second controller
	// HID for second controller
	// HID for second controller

	0x05, 0x01,                    // USAGE_PAGE (Generic Desktop)
    0x09, 0x05,                    // USAGE (Game pad)
    0xa1, 0x01,                    // COLLECTION (Application)
    0x09, 0x01,                    //   USAGE (Pointer)
    0xa1, 0x00,                    //   COLLECTION (Physical)
	0x85, 0x02, 					//     REPORT_ID (2)
    0x09, 0x30,                    //     USAGE (X)
    0x09, 0x31,                    //     USAGE (Y)
	0x09, 0x32,                    //     USAGE (Z)
	0x09, 0x33,                    //     USAGE (Rx)
	0x09, 0x34,                    //     USAGE (Ry)
	0x09, 0x35,                    //     USAGE (Rz)
	
    0x15, 0x00,                    //     LOGICAL_MINIMUM (0)
    0x26, 0xff, 0x00,              //     LOGICAL_MAXIMUM (255)
    0x75, 0x08,                    //     REPORT_SIZE (8)
    0x95, 0x06,                    //     REPORT_COUNT (6)

	0x81, 0x02,                    //     INPUT (Data,Var,Abs)
	
	
	//

	0x15, 0x00,                    //     LOGICAL_MINIMUM (0)
	0x25, 0x01,                    //     LOGICAL_MAXIMUM (1)
	0x95, 0x10,                    //     REPORT_COUNT (16)
	0x75, 0x01,                    //     REPORT_SIZE (1)
	0x05, 0x09,                    //     USAGE_PAGE (Button)
	0x19, 0x01,                    //     USAGE_MINIMUM (Button 1)
	0x29, 0x10,                    //     USAGE_MAXIMUM (Button 16)

	0x81, 0x02,                    //     INPUT (Data,Var,Abs)
	0xc0,                          //     END_COLLECTION
	0xc0,                          //     END_COLLECTION



};

/* ------------------------------------------------------------------------- */

// Delays


void wait100us(){
	_delay_us(100);
}



uchar	usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;

    
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */

				usbMsgPtr = reportBuffer;
 		return 9;

        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
            usbMsgPtr = &idleRate;
            return 1;
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
            idleRate = rq->wValue.bytes[1];
        }
    }else{
        /* no vendor specific requests implemented */
    }
	return 0;
}

/* ------------------------------------------------------------------------- */

int	main(void)
{
uchar   idleCounter = 0;

	wdt_enable(WDTO_2S);
    hardwareInit();
	odDebugInit();
	usbInit();
	sei();

	int x=0;
	spi_mInit();	// SPI
	uchar i=0;
	uchar p=0;

	for(;;){	/* main event loop */
		wdt_reset();
		usbPoll();
		


		if (usbInterruptIsReady())	
 	   {
		reportBuffer[0]= 0x01;
		reportBuffer[1]= i++;
		reportBuffer[2]= i++;
		reportBuffer[3]= i++;
		reportBuffer[4]= i++;
		reportBuffer[5]= i++;
		reportBuffer[6]= i++;
		reportBuffer[7]= i++;
		reportBuffer[8]= i++;

		usbSetInterrupt(reportBuffer, 8);
		

		while(!usbInterruptIsReady()){usbPoll(); wdt_reset();}

		usbSetInterrupt(reportBuffer+8, 1);

		while(!usbInterruptIsReady()){usbPoll(); wdt_reset();}

		reportBuffer[0]=0x02;
		reportBuffer[1]= p--;
		reportBuffer[2]= p--;
		reportBuffer[3]= p--;
		reportBuffer[4]= p--;
		reportBuffer[5]= p--;
		reportBuffer[6]= p--;
		reportBuffer[7]= p--;
		reportBuffer[8]= p--;
	
		if (usbInterruptIsReady())	
 	   {
		usbSetInterrupt(reportBuffer, 8);
		}

		while(!usbInterruptIsReady()){usbPoll(); wdt_reset();}

		usbSetInterrupt(reportBuffer+8, 1);
		}
	}
	return 0;
}

/* ------------------------------------------------------------------------- */
