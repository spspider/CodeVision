
Hid_example_firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000007a4  00000838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  00800062  00800062  0000083a  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000840  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000020e  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cfa  00000000  00000000  00000aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000491  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000865  00000000  00000000  00001c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000024a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000488  00000000  00000000  00002530  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000046a  00000000  00000000  000029b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002e22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	5b c0       	rjmp	.+182    	; 0xb8 <__ctors_end>
   2:	94 c2       	rjmp	.+1320   	; 0x52c <__vector_1>
   4:	74 c0       	rjmp	.+232    	; 0xee <__bad_interrupt>
   6:	73 c0       	rjmp	.+230    	; 0xee <__bad_interrupt>
   8:	72 c0       	rjmp	.+228    	; 0xee <__bad_interrupt>
   a:	71 c0       	rjmp	.+226    	; 0xee <__bad_interrupt>
   c:	70 c0       	rjmp	.+224    	; 0xee <__bad_interrupt>
   e:	6f c0       	rjmp	.+222    	; 0xee <__bad_interrupt>
  10:	6e c0       	rjmp	.+220    	; 0xee <__bad_interrupt>
  12:	6d c0       	rjmp	.+218    	; 0xee <__bad_interrupt>
  14:	6c c0       	rjmp	.+216    	; 0xee <__bad_interrupt>
  16:	6b c0       	rjmp	.+214    	; 0xee <__bad_interrupt>
  18:	6a c0       	rjmp	.+212    	; 0xee <__bad_interrupt>
  1a:	69 c0       	rjmp	.+210    	; 0xee <__bad_interrupt>
  1c:	68 c0       	rjmp	.+208    	; 0xee <__bad_interrupt>
  1e:	67 c0       	rjmp	.+206    	; 0xee <__bad_interrupt>
  20:	66 c0       	rjmp	.+204    	; 0xee <__bad_interrupt>
  22:	65 c0       	rjmp	.+202    	; 0xee <__bad_interrupt>
  24:	64 c0       	rjmp	.+200    	; 0xee <__bad_interrupt>

00000026 <usbDescriptorHidReport>:
  26:	06 00 ff 09 01 a1 01 15 00 26 ff 00 75 08 95 03     .........&..u...
  36:	09 00 b2 02 01 c0                                   ......

0000003c <usbDescriptorString0>:
  3c:	04 03 09 04                                         ....

00000040 <usbDescriptorStringVendor>:
  40:	2c 03 77 00 65 00 2e 00 65 00 61 00 73 00 79 00     ,.w.e...e.a.s.y.
  50:	65 00 6c 00 65 00 63 00 74 00 72 00 6f 00 6e 00     e.l.e.c.t.r.o.n.
  60:	69 00 63 00 73 00 2e 00 72 00 75 00                 i.c.s...r.u.

0000006c <usbDescriptorStringDevice>:
  6c:	18 03 48 00 69 00 64 00 20 00 65 00 78 00 61 00     ..H.i.d. .e.x.a.
  7c:	6d 00 70 00 6c 00 65 00                             m.p.l.e.

00000084 <usbDescriptorDevice>:
  84:	12 01 10 01 00 00 00 08 c0 16 df 05 00 01 01 02     ................
  94:	00 01                                               ..

00000096 <usbDescriptorConfiguration>:
  96:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
  a6:	00 00 09 21 01 01 00 01 22 16 00 07 05 81 03 08     ...!....".......
  b6:	00 64                                               .d

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf e5       	ldi	r28, 0x5F	; 95
  be:	d4 e0       	ldi	r29, 0x04	; 4
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_copy_data>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	a0 e6       	ldi	r26, 0x60	; 96
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	e4 ea       	ldi	r30, 0xA4	; 164
  cc:	f7 e0       	ldi	r31, 0x07	; 7
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <.do_copy_data_start>

000000d0 <.do_copy_data_loop>:
  d0:	05 90       	lpm	r0, Z+
  d2:	0d 92       	st	X+, r0

000000d4 <.do_copy_data_start>:
  d4:	a2 36       	cpi	r26, 0x62	; 98
  d6:	b1 07       	cpc	r27, r17
  d8:	d9 f7       	brne	.-10     	; 0xd0 <.do_copy_data_loop>

000000da <__do_clear_bss>:
  da:	10 e0       	ldi	r17, 0x00	; 0
  dc:	a2 e6       	ldi	r26, 0x62	; 98
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <.do_clear_bss_start>

000000e2 <.do_clear_bss_loop>:
  e2:	1d 92       	st	X+, r1

000000e4 <.do_clear_bss_start>:
  e4:	ae 39       	cpi	r26, 0x9E	; 158
  e6:	b1 07       	cpc	r27, r17
  e8:	e1 f7       	brne	.-8      	; 0xe2 <.do_clear_bss_loop>
  ea:	94 d0       	rcall	.+296    	; 0x214 <main>
  ec:	59 c3       	rjmp	.+1714   	; 0x7a0 <_exit>

000000ee <__bad_interrupt>:
  ee:	88 cf       	rjmp	.-240    	; 0x0 <__vectors>

000000f0 <usbFunctionRead>:

/* usbFunctionRead() вызывается когда хост запрашивает порцию данных от устройства
 * Для дополнительной информации см. документацию в usbdrv.h
 */
uchar   usbFunctionRead(uchar *data, uchar len)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	ec 01       	movw	r28, r24
    if(len > bytesRemaining)
  f6:	50 91 66 00 	lds	r21, 0x0066
  fa:	56 17       	cp	r21, r22
  fc:	08 f4       	brcc	.+2      	; 0x100 <usbFunctionRead+0x10>
  fe:	65 2f       	mov	r22, r21
        len = bytesRemaining;

    uchar *buffer = (uchar*)&pdata;

    if(!currentAddress)        // Ни один кусок данных еще не прочитан.
 100:	40 91 65 00 	lds	r20, 0x0065
 104:	44 23       	and	r20, r20
 106:	a9 f4       	brne	.+42     	; 0x132 <usbFunctionRead+0x42>
    {                          // Заполним структуру для передачи
        if ( PINB & _BV(1) )
 108:	b1 9b       	sbis	0x16, 1	; 22
 10a:	04 c0       	rjmp	.+8      	; 0x114 <usbFunctionRead+0x24>
            pdata.b1 = 1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 62 00 	sts	0x0062, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <usbFunctionRead+0x28>
        else
            pdata.b1 = 0;
 114:	10 92 62 00 	sts	0x0062, r1


        if ( PINB & _BV(2) )
 118:	b2 9b       	sbis	0x16, 2	; 22
 11a:	04 c0       	rjmp	.+8      	; 0x124 <usbFunctionRead+0x34>
            pdata.b2 = 1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 63 00 	sts	0x0063, r24
 122:	02 c0       	rjmp	.+4      	; 0x128 <usbFunctionRead+0x38>
        else
            pdata.b2 = 0;
 124:	10 92 63 00 	sts	0x0063, r1


        if ( PINB & _BV(3) )
 128:	b3 9b       	sbis	0x16, 3	; 22
 12a:	0a c0       	rjmp	.+20     	; 0x140 <usbFunctionRead+0x50>
            pdata.b3 = 1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 64 00 	sts	0x0064, r24
 132:	a4 2f       	mov	r26, r20
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	ae 59       	subi	r26, 0x9E	; 158
 138:	bf 4f       	sbci	r27, 0xFF	; 255
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	0a c0       	rjmp	.+20     	; 0x154 <usbFunctionRead+0x64>
        else
            pdata.b3 = 0;
 140:	10 92 64 00 	sts	0x0064, r1
 144:	f6 cf       	rjmp	.-20     	; 0x132 <usbFunctionRead+0x42>
    }

    uchar j;
    for(j=0; j<len; j++)
        data[j] = buffer[j+currentAddress];
 146:	fe 01       	movw	r30, r28
 148:	e2 0f       	add	r30, r18
 14a:	f3 1f       	adc	r31, r19
 14c:	8d 91       	ld	r24, X+
 14e:	80 83       	st	Z, r24
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	3f 4f       	sbci	r19, 0xFF	; 255
        else
            pdata.b3 = 0;
    }

    uchar j;
    for(j=0; j<len; j++)
 154:	26 17       	cp	r18, r22
 156:	b8 f3       	brcs	.-18     	; 0x146 <usbFunctionRead+0x56>
        data[j] = buffer[j+currentAddress];

    currentAddress += len;
 158:	46 0f       	add	r20, r22
 15a:	40 93 65 00 	sts	0x0065, r20
    bytesRemaining -= len;
 15e:	56 1b       	sub	r21, r22
 160:	50 93 66 00 	sts	0x0066, r21
    return len;
}
 164:	86 2f       	mov	r24, r22
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <usbFunctionWrite>:

/* usbFunctionWrite() вызывается когда хост отправляет порцию данных к устройству
 * Для дополнительной информации см. документацию в usbdrv.h
 */
uchar   usbFunctionWrite(uchar *data, uchar len)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
    if(bytesRemaining == 0)
 172:	50 91 66 00 	lds	r21, 0x0066
 176:	55 23       	and	r21, r21
 178:	b1 f1       	breq	.+108    	; 0x1e6 <usbFunctionWrite+0x7a>
 17a:	56 17       	cp	r21, r22
 17c:	08 f4       	brcc	.+2      	; 0x180 <usbFunctionWrite+0x14>
 17e:	65 2f       	mov	r22, r21

    uchar *buffer = (uchar*)&pdata;
    
    uchar j;
    for(j=0; j<len; j++)
        buffer[j+currentAddress] = data[j];
 180:	40 91 65 00 	lds	r20, 0x0065
 184:	a4 2f       	mov	r26, r20
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	ae 59       	subi	r26, 0x9E	; 158
 18a:	bf 4f       	sbci	r27, 0xFF	; 255
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	07 c0       	rjmp	.+14     	; 0x1a0 <usbFunctionWrite+0x34>
        len = bytesRemaining;

    uchar *buffer = (uchar*)&pdata;
    
    uchar j;
    for(j=0; j<len; j++)
 192:	fe 01       	movw	r30, r28
 194:	e2 0f       	add	r30, r18
 196:	f3 1f       	adc	r31, r19
 198:	80 81       	ld	r24, Z
 19a:	8d 93       	st	X+, r24
 19c:	2f 5f       	subi	r18, 0xFF	; 255
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
 1a0:	26 17       	cp	r18, r22
 1a2:	b8 f3       	brcs	.-18     	; 0x192 <usbFunctionWrite+0x26>
        buffer[j+currentAddress] = data[j];

    currentAddress += len;
 1a4:	46 0f       	add	r20, r22
 1a6:	40 93 65 00 	sts	0x0065, r20
    bytesRemaining -= len;
 1aa:	56 1b       	sub	r21, r22
 1ac:	65 2f       	mov	r22, r21
 1ae:	50 93 66 00 	sts	0x0066, r21

    if(bytesRemaining == 0)     // Все данные получены
 1b2:	55 23       	and	r21, r21
 1b4:	a9 f4       	brne	.+42     	; 0x1e0 <usbFunctionWrite+0x74>
    {                           // Выставим значения на PORTB
        if ( pdata.b1 )
 1b6:	80 91 62 00 	lds	r24, 0x0062
 1ba:	88 23       	and	r24, r24
 1bc:	11 f0       	breq	.+4      	; 0x1c2 <usbFunctionWrite+0x56>
            PORTB |= _BV(1);
 1be:	c1 9a       	sbi	0x18, 1	; 24
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <usbFunctionWrite+0x58>
        else
            PORTB &= ~_BV(1);
 1c2:	c1 98       	cbi	0x18, 1	; 24


        if ( pdata.b2 )
 1c4:	80 91 63 00 	lds	r24, 0x0063
 1c8:	88 23       	and	r24, r24
 1ca:	11 f0       	breq	.+4      	; 0x1d0 <usbFunctionWrite+0x64>
            PORTB |= _BV(2);
 1cc:	c2 9a       	sbi	0x18, 2	; 24
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <usbFunctionWrite+0x66>
        else
            PORTB &= ~_BV(2);
 1d0:	c2 98       	cbi	0x18, 2	; 24


        if ( pdata.b3 )
 1d2:	80 91 64 00 	lds	r24, 0x0064
 1d6:	88 23       	and	r24, r24
 1d8:	11 f0       	breq	.+4      	; 0x1de <usbFunctionWrite+0x72>
            PORTB |= _BV(3);
 1da:	c3 9a       	sbi	0x18, 3	; 24
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <usbFunctionWrite+0x74>
        else
            PORTB &= ~_BV(3);
 1de:	c3 98       	cbi	0x18, 3	; 24
    }

    return bytesRemaining == 0; /* 0 означает, что есть еще данные */
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	66 23       	and	r22, r22
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <usbFunctionWrite+0x7c>
 1e6:	81 e0       	ldi	r24, 0x01	; 1
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <usbFunctionSetup>:

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
usbRequest_t    *rq = (void *)data;
 1ee:	fc 01       	movw	r30, r24

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* HID устройство */
 1f0:	80 81       	ld	r24, Z
 1f2:	80 76       	andi	r24, 0x60	; 96
 1f4:	80 32       	cpi	r24, 0x20	; 32
 1f6:	61 f4       	brne	.+24     	; 0x210 <usbFunctionSetup+0x22>
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 1f8:	81 81       	ldd	r24, Z+1	; 0x01
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	11 f0       	breq	.+4      	; 0x202 <usbFunctionSetup+0x14>
            // у нас только одна разновидность репорта, можем игнорировать report-ID
            bytesRemaining = sizeof(struct dataexchange_t);
            currentAddress = 0;
            return USB_NO_MSG;  // используем usbFunctionRead() для отправки данных хосту
        }else if(rq->bRequest == USBRQ_HID_SET_REPORT){
 1fe:	89 30       	cpi	r24, 0x09	; 9
 200:	39 f4       	brne	.+14     	; 0x210 <usbFunctionSetup+0x22>
            // у нас только одна разновидность репорта, можем игнорировать report-ID
            bytesRemaining = sizeof(struct dataexchange_t);
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	80 93 66 00 	sts	0x0066, r24
            currentAddress = 0;
 208:	10 92 65 00 	sts	0x0065, r1
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	08 95       	ret
            return USB_NO_MSG;  // используем usbFunctionWrite() для получения данных от хоста
 210:	80 e0       	ldi	r24, 0x00	; 0
        }
    }else{
        /* остальные запросы мы просто игнорируем */
    }
    return 0;
}
 212:	08 95       	ret

00000214 <main>:
/* ------------------------------------------------------------------------- */

int main(void)
{
    DDRB = 0b00001110;      // PB1,PB2,PB3 - выход
 214:	8e e0       	ldi	r24, 0x0E	; 14
 216:	87 bb       	out	0x17, r24	; 23

    usbInit();
 218:	0e d0       	rcall	.+28     	; 0x236 <usbInit>
    usbDeviceDisconnect();  // принудительно отключаемся от хоста, так делать можно только при выключенных прерываниях!
 21a:	8c 9a       	sbi	0x11, 4	; 17
 21c:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 21e:	48 eb       	ldi	r20, 0xB8	; 184
 220:	5b e0       	ldi	r21, 0x0B	; 11
 222:	03 c0       	rjmp	.+6      	; 0x22a <main+0x16>
 224:	ca 01       	movw	r24, r20
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <main+0x12>
    
    uchar i = 0;
    while(--i){             // пауза > 250 ms
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	d9 f7       	brne	.-10     	; 0x224 <main+0x10>
        _delay_ms(1);
    }
    
    usbDeviceConnect();     // подключаемся
 22e:	8c 98       	cbi	0x11, 4	; 17

    sei();                  // разрешаем прерывания
 230:	78 94       	sei

    for(;;){                // главный цикл программы
        usbPoll();          // эту функцию надо регулярно вызывать с главного цикла, максимальная задержка между вызовами - 50 ms
 232:	2f d0       	rcall	.+94     	; 0x292 <usbPoll>
 234:	fe cf       	rjmp	.-4      	; 0x232 <main+0x1e>

00000236 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 236:	85 b7       	in	r24, 0x35	; 53
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 23c:	8b b7       	in	r24, 0x3b	; 59
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 242:	8b e4       	ldi	r24, 0x4B	; 75
 244:	80 93 74 00 	sts	0x0074, r24
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 248:	8a e5       	ldi	r24, 0x5A	; 90
 24a:	80 93 73 00 	sts	0x0073, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 24e:	08 95       	ret

00000250 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 250:	1f 93       	push	r17
 252:	dc 01       	movw	r26, r24
 254:	16 2f       	mov	r17, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 256:	80 91 73 00 	lds	r24, 0x0073
 25a:	84 ff       	sbrs	r24, 4
 25c:	07 c0       	rjmp	.+14     	; 0x26c <usbSetInterrupt+0x1c>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 25e:	80 91 74 00 	lds	r24, 0x0074
 262:	98 e8       	ldi	r25, 0x88	; 136
 264:	89 27       	eor	r24, r25
 266:	80 93 74 00 	sts	0x0074, r24
 26a:	03 c0       	rjmp	.+6      	; 0x272 <usbSetInterrupt+0x22>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 26c:	8a e5       	ldi	r24, 0x5A	; 90
 26e:	80 93 73 00 	sts	0x0073, r24
 272:	91 2f       	mov	r25, r17
 274:	e5 e7       	ldi	r30, 0x75	; 117
 276:	f0 e0       	ldi	r31, 0x00	; 0
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 278:	8d 91       	ld	r24, X+
 27a:	81 93       	st	Z+, r24
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 27c:	91 50       	subi	r25, 0x01	; 1
 27e:	e1 f7       	brne	.-8      	; 0x278 <usbSetInterrupt+0x28>
    usbCrc16Append(&txStatus->buffer[1], len);
 280:	85 e7       	ldi	r24, 0x75	; 117
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	61 2f       	mov	r22, r17
 286:	4e d1       	rcall	.+668    	; 0x524 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 288:	1c 5f       	subi	r17, 0xFC	; 252
 28a:	10 93 73 00 	sts	0x0073, r17
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 28e:	1f 91       	pop	r17
 290:	08 95       	ret

00000292 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 298:	60 91 84 00 	lds	r22, 0x0084
 29c:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 29e:	67 fd       	sbrc	r22, 7
 2a0:	c2 c0       	rjmp	.+388    	; 0x426 <usbPoll+0x194>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 2a2:	80 91 81 00 	lds	r24, 0x0081
 2a6:	cc e0       	ldi	r28, 0x0C	; 12
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	c8 1b       	sub	r28, r24
 2ac:	d1 09       	sbc	r29, r1
 2ae:	c8 57       	subi	r28, 0x78	; 120
 2b0:	df 4f       	sbci	r29, 0xFF	; 255
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 2b2:	80 91 80 00 	lds	r24, 0x0080
 2b6:	8d 32       	cpi	r24, 0x2D	; 45
 2b8:	09 f0       	breq	.+2      	; 0x2bc <usbPoll+0x2a>
 2ba:	a3 c0       	rjmp	.+326    	; 0x402 <usbPoll+0x170>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 2bc:	68 30       	cpi	r22, 0x08	; 8
 2be:	09 f0       	breq	.+2      	; 0x2c2 <usbPoll+0x30>
 2c0:	b0 c0       	rjmp	.+352    	; 0x422 <usbPoll+0x190>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 2c2:	83 ec       	ldi	r24, 0xC3	; 195
 2c4:	80 93 68 00 	sts	0x0068, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 2c8:	8a e5       	ldi	r24, 0x5A	; 90
 2ca:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
 2ce:	10 92 67 00 	sts	0x0067, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 2d2:	88 81       	ld	r24, Y
 2d4:	80 76       	andi	r24, 0x60	; 96
 2d6:	39 f0       	breq	.+14     	; 0x2e6 <usbPoll+0x54>
            replyLen = usbFunctionSetup(data);
 2d8:	ce 01       	movw	r24, r28
 2da:	89 df       	rcall	.-238    	; 0x1ee <usbFunctionSetup>
 2dc:	28 2f       	mov	r18, r24
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 2de:	8f 3f       	cpi	r24, 0xFF	; 255
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <usbPoll+0x52>
 2e2:	7e c0       	rjmp	.+252    	; 0x3e0 <usbPoll+0x14e>
 2e4:	84 c0       	rjmp	.+264    	; 0x3ee <usbPoll+0x15c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
uchar   len  = 0, *dataPtr = usbTxBuf + 9;  /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 2e6:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 2e8:	10 92 71 00 	sts	0x0071, r1
    SWITCH_START(rq->bRequest)
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 2ee:	88 23       	and	r24, r24
 2f0:	21 f4       	brne	.+8      	; 0x2fa <usbPoll+0x68>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 2f2:	10 92 72 00 	sts	0x0072, r1
 2f6:	22 e0       	ldi	r18, 0x02	; 2
 2f8:	6c c0       	rjmp	.+216    	; 0x3d2 <usbPoll+0x140>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 2fa:	85 30       	cpi	r24, 0x05	; 5
 2fc:	19 f4       	brne	.+6      	; 0x304 <usbPoll+0x72>
        usbNewDeviceAddr = value;
 2fe:	90 93 85 00 	sts	0x0085, r25
 302:	66 c0       	rjmp	.+204    	; 0x3d0 <usbPoll+0x13e>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 304:	86 30       	cpi	r24, 0x06	; 6
 306:	09 f0       	breq	.+2      	; 0x30a <usbPoll+0x78>
 308:	4f c0       	rjmp	.+158    	; 0x3a8 <usbPoll+0x116>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 30a:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	41 f4       	brne	.+16     	; 0x320 <usbPoll+0x8e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 310:	84 e8       	ldi	r24, 0x84	; 132
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	90 93 83 00 	sts	0x0083, r25
 318:	80 93 82 00 	sts	0x0082, r24
 31c:	22 e1       	ldi	r18, 0x12	; 18
 31e:	40 c0       	rjmp	.+128    	; 0x3a0 <usbPoll+0x10e>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	41 f4       	brne	.+16     	; 0x334 <usbPoll+0xa2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 324:	86 e9       	ldi	r24, 0x96	; 150
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	90 93 83 00 	sts	0x0083, r25
 32c:	80 93 82 00 	sts	0x0082, r24
 330:	22 e2       	ldi	r18, 0x22	; 34
 332:	36 c0       	rjmp	.+108    	; 0x3a0 <usbPoll+0x10e>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 334:	83 30       	cpi	r24, 0x03	; 3
 336:	f9 f4       	brne	.+62     	; 0x376 <usbPoll+0xe4>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 338:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 33a:	88 23       	and	r24, r24
 33c:	41 f4       	brne	.+16     	; 0x34e <usbPoll+0xbc>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 33e:	8c e3       	ldi	r24, 0x3C	; 60
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	90 93 83 00 	sts	0x0083, r25
 346:	80 93 82 00 	sts	0x0082, r24
 34a:	24 e0       	ldi	r18, 0x04	; 4
 34c:	29 c0       	rjmp	.+82     	; 0x3a0 <usbPoll+0x10e>
        SWITCH_CASE(1)
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	41 f4       	brne	.+16     	; 0x362 <usbPoll+0xd0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 352:	80 e4       	ldi	r24, 0x40	; 64
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	90 93 83 00 	sts	0x0083, r25
 35a:	80 93 82 00 	sts	0x0082, r24
 35e:	2c e2       	ldi	r18, 0x2C	; 44
 360:	1f c0       	rjmp	.+62     	; 0x3a0 <usbPoll+0x10e>
        SWITCH_CASE(2)
 362:	82 30       	cpi	r24, 0x02	; 2
 364:	e1 f4       	brne	.+56     	; 0x39e <usbPoll+0x10c>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 366:	8c e6       	ldi	r24, 0x6C	; 108
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	90 93 83 00 	sts	0x0083, r25
 36e:	80 93 82 00 	sts	0x0082, r24
 372:	28 e1       	ldi	r18, 0x18	; 24
 374:	15 c0       	rjmp	.+42     	; 0x3a0 <usbPoll+0x10e>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 376:	81 32       	cpi	r24, 0x21	; 33
 378:	41 f4       	brne	.+16     	; 0x38a <usbPoll+0xf8>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 37a:	88 ea       	ldi	r24, 0xA8	; 168
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	90 93 83 00 	sts	0x0083, r25
 382:	80 93 82 00 	sts	0x0082, r24
 386:	29 e0       	ldi	r18, 0x09	; 9
 388:	0b c0       	rjmp	.+22     	; 0x3a0 <usbPoll+0x10e>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 38a:	82 32       	cpi	r24, 0x22	; 34
 38c:	41 f4       	brne	.+16     	; 0x39e <usbPoll+0x10c>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 38e:	86 e2       	ldi	r24, 0x26	; 38
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	90 93 83 00 	sts	0x0083, r25
 396:	80 93 82 00 	sts	0x0082, r24
 39a:	26 e1       	ldi	r18, 0x16	; 22
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <usbPoll+0x10e>
 39e:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 3a0:	80 e4       	ldi	r24, 0x40	; 64
 3a2:	80 93 67 00 	sts	0x0067, r24
 3a6:	23 c0       	rjmp	.+70     	; 0x3ee <usbPoll+0x15c>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 3a8:	88 30       	cpi	r24, 0x08	; 8
 3aa:	21 f4       	brne	.+8      	; 0x3b4 <usbPoll+0x122>
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	87 e8       	ldi	r24, 0x87	; 135
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	11 c0       	rjmp	.+34     	; 0x3d6 <usbPoll+0x144>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 3b4:	89 30       	cpi	r24, 0x09	; 9
 3b6:	19 f4       	brne	.+6      	; 0x3be <usbPoll+0x12c>
        usbConfiguration = value;
 3b8:	90 93 87 00 	sts	0x0087, r25
 3bc:	09 c0       	rjmp	.+18     	; 0x3d0 <usbPoll+0x13e>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 3be:	8a 30       	cpi	r24, 0x0A	; 10
 3c0:	11 f4       	brne	.+4      	; 0x3c6 <usbPoll+0x134>
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	06 c0       	rjmp	.+12     	; 0x3d2 <usbPoll+0x140>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 3c6:	8b 30       	cpi	r24, 0x0B	; 11
 3c8:	19 f4       	brne	.+6      	; 0x3d0 <usbPoll+0x13e>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 3ca:	8b e4       	ldi	r24, 0x4B	; 75
 3cc:	80 93 74 00 	sts	0x0074, r24
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	81 e7       	ldi	r24, 0x71	; 113
 3d4:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 3d6:	90 93 83 00 	sts	0x0083, r25
 3da:	80 93 82 00 	sts	0x0082, r24
 3de:	07 c0       	rjmp	.+14     	; 0x3ee <usbPoll+0x15c>
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 3e0:	88 81       	ld	r24, Y
 3e2:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 3e4:	2e 81       	ldd	r18, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 3e6:	80 e8       	ldi	r24, 0x80	; 128
 3e8:	80 93 67 00 	sts	0x0067, r24
 3ec:	06 c0       	rjmp	.+12     	; 0x3fa <usbPoll+0x168>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 3ee:	8f 81       	ldd	r24, Y+7	; 0x07
 3f0:	88 23       	and	r24, r24
 3f2:	19 f4       	brne	.+6      	; 0x3fa <usbPoll+0x168>
 3f4:	8e 81       	ldd	r24, Y+6	; 0x06
 3f6:	82 17       	cp	r24, r18
 3f8:	08 f0       	brcs	.+2      	; 0x3fc <usbPoll+0x16a>
 3fa:	82 2f       	mov	r24, r18
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 3fc:	80 93 61 00 	sts	0x0061, r24
 400:	10 c0       	rjmp	.+32     	; 0x422 <usbPoll+0x190>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 402:	80 91 67 00 	lds	r24, 0x0067
 406:	87 ff       	sbrs	r24, 7
 408:	0c c0       	rjmp	.+24     	; 0x422 <usbPoll+0x190>
            uchar rval = usbFunctionWrite(data, len);
 40a:	ce 01       	movw	r24, r28
 40c:	af de       	rcall	.-674    	; 0x16c <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 40e:	8f 3f       	cpi	r24, 0xFF	; 255
 410:	21 f4       	brne	.+8      	; 0x41a <usbPoll+0x188>
                usbTxLen = USBPID_STALL;
 412:	8e e1       	ldi	r24, 0x1E	; 30
 414:	80 93 60 00 	sts	0x0060, r24
 418:	04 c0       	rjmp	.+8      	; 0x422 <usbPoll+0x190>
            }else if(rval != 0){    /* This was the final package */
 41a:	88 23       	and	r24, r24
 41c:	11 f0       	breq	.+4      	; 0x422 <usbPoll+0x190>
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 41e:	10 92 61 00 	sts	0x0061, r1
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 422:	10 92 84 00 	sts	0x0084, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 426:	80 91 60 00 	lds	r24, 0x0060
 42a:	84 ff       	sbrs	r24, 4
 42c:	58 c0       	rjmp	.+176    	; 0x4de <__stack+0x7f>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 42e:	80 91 61 00 	lds	r24, 0x0061
 432:	8f 3f       	cpi	r24, 0xFF	; 255
 434:	09 f4       	brne	.+2      	; 0x438 <usbPoll+0x1a6>
 436:	53 c0       	rjmp	.+166    	; 0x4de <__stack+0x7f>
 438:	18 2f       	mov	r17, r24
 43a:	89 30       	cpi	r24, 0x09	; 9
 43c:	08 f0       	brcs	.+2      	; 0x440 <usbPoll+0x1ae>
 43e:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 440:	81 1b       	sub	r24, r17
 442:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 446:	80 91 68 00 	lds	r24, 0x0068
 44a:	98 e8       	ldi	r25, 0x88	; 136
 44c:	89 27       	eor	r24, r25
 44e:	80 93 68 00 	sts	0x0068, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 452:	11 23       	and	r17, r17
 454:	91 f1       	breq	.+100    	; 0x4ba <__stack+0x5b>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 456:	80 91 67 00 	lds	r24, 0x0067
 45a:	87 ff       	sbrs	r24, 7
 45c:	08 c0       	rjmp	.+16     	; 0x46e <__stack+0xf>
            len = usbFunctionRead(data, len);
 45e:	89 e6       	ldi	r24, 0x69	; 105
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	61 2f       	mov	r22, r17
 464:	45 de       	rcall	.-886    	; 0xf0 <usbFunctionRead>
 466:	18 2f       	mov	r17, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
 468:	89 30       	cpi	r24, 0x09	; 9
 46a:	98 f5       	brcc	.+102    	; 0x4d2 <__stack+0x73>
 46c:	26 c0       	rjmp	.+76     	; 0x4ba <__stack+0x5b>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 46e:	20 91 82 00 	lds	r18, 0x0082
 472:	30 91 83 00 	lds	r19, 0x0083
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 476:	86 ff       	sbrs	r24, 6
 478:	0d c0       	rjmp	.+26     	; 0x494 <__stack+0x35>
 47a:	a9 e6       	ldi	r26, 0x69	; 105
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	90 e0       	ldi	r25, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 482:	f9 01       	movw	r30, r18
 484:	e8 0f       	add	r30, r24
 486:	f9 1f       	adc	r31, r25
 488:	e4 91       	lpm	r30, Z+
                    *data++ = c;
 48a:	ed 93       	st	X+, r30
 48c:	01 96       	adiw	r24, 0x01	; 1
                    r++;
                }while(--i);
 48e:	18 17       	cp	r17, r24
 490:	c1 f7       	brne	.-16     	; 0x482 <__stack+0x23>
 492:	08 c0       	rjmp	.+16     	; 0x4a4 <__stack+0x45>
 494:	91 2f       	mov	r25, r17
 496:	d9 01       	movw	r26, r18
 498:	e9 e6       	ldi	r30, 0x69	; 105
 49a:	f0 e0       	ldi	r31, 0x00	; 0
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 49c:	8d 91       	ld	r24, X+
 49e:	81 93       	st	Z+, r24
                }while(--i);
 4a0:	91 50       	subi	r25, 0x01	; 1
 4a2:	e1 f7       	brne	.-8      	; 0x49c <__stack+0x3d>
 4a4:	11 50       	subi	r17, 0x01	; 1
 4a6:	81 2f       	mov	r24, r17
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	1f 5f       	subi	r17, 0xFF	; 255
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	82 0f       	add	r24, r18
 4b0:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 4b2:	90 93 83 00 	sts	0x0083, r25
 4b6:	80 93 82 00 	sts	0x0082, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 4ba:	89 e6       	ldi	r24, 0x69	; 105
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	61 2f       	mov	r22, r17
 4c0:	31 d0       	rcall	.+98     	; 0x524 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 4c2:	61 2f       	mov	r22, r17
 4c4:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 4c6:	6c 30       	cpi	r22, 0x0C	; 12
 4c8:	41 f0       	breq	.+16     	; 0x4da <__stack+0x7b>
            usbMsgLen = USB_NO_MSG;
 4ca:	8f ef       	ldi	r24, 0xFF	; 255
 4cc:	80 93 61 00 	sts	0x0061, r24
 4d0:	04 c0       	rjmp	.+8      	; 0x4da <__stack+0x7b>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 4d2:	8f ef       	ldi	r24, 0xFF	; 255
 4d4:	80 93 61 00 	sts	0x0061, r24
 4d8:	6e e1       	ldi	r22, 0x1E	; 30
    }
    usbTxLen = len;
 4da:	60 93 60 00 	sts	0x0060, r22
 4de:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 4e0:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 4e2:	84 71       	andi	r24, 0x14	; 20
 4e4:	31 f4       	brne	.+12     	; 0x4f2 <__stack+0x93>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 4e6:	91 50       	subi	r25, 0x01	; 1
 4e8:	d9 f7       	brne	.-10     	; 0x4e0 <__stack+0x81>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 4ea:	10 92 85 00 	sts	0x0085, r1
    usbDeviceAddr = 0;
 4ee:	10 92 7f 00 	sts	0x007F, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	08 95       	ret

000004fa <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 4fa:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 4fc:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 4fe:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 500:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 502:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 504:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 506:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 508:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 50a:	09 c0       	rjmp	.+18     	; 0x51e <usbCrcLoopEntry>

0000050c <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 50c:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 50e:	82 27       	eor	r24, r18

00000510 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 510:	97 95       	ror	r25
    ror     resCrcL
 512:	87 95       	ror	r24
    brcs    usbCrcNoXor
 514:	10 f0       	brcs	.+4      	; 0x51a <usbCrcNoXor>
    eor     resCrcL, polyL
 516:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 518:	95 27       	eor	r25, r21

0000051a <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 51a:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 51c:	c8 f3       	brcs	.-14     	; 0x510 <usbCrcBitLoop>

0000051e <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 51e:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 520:	a8 f3       	brcs	.-22     	; 0x50c <usbCrcByteLoop>

00000522 <usbCrcReady>:
usbCrcReady:
    ret
 522:	08 95       	ret

00000524 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 524:	ea df       	rcall	.-44     	; 0x4fa <usbCrc16>
    st      ptr+, resCrcL
 526:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 528:	9d 93       	st	X+, r25
    ret
 52a:	08 95       	ret

0000052c <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 52c:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 52e:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 530:	cf 93       	push	r28

00000532 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 532:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 534:	84 9b       	sbis	0x10, 4	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
 536:	e9 f7       	brne	.-6      	; 0x532 <waitForJ>

00000538 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 538:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 53a:	09 c0       	rjmp	.+18     	; 0x54e <foundK>
    sbis    USBIN, USBMINUS
 53c:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 53e:	07 c0       	rjmp	.+14     	; 0x54e <foundK>
    sbis    USBIN, USBMINUS
 540:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 542:	05 c0       	rjmp	.+10     	; 0x54e <foundK>
    sbis    USBIN, USBMINUS
 544:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 546:	03 c0       	rjmp	.+6      	; 0x54e <foundK>
    sbis    USBIN, USBMINUS
 548:	84 9b       	sbis	0x10, 4	; 16
    rjmp    foundK
 54a:	01 c0       	rjmp	.+2      	; 0x54e <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 54c:	a3 c0       	rjmp	.+326    	; 0x694 <sofError>

0000054e <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 54e:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 550:	c0 91 81 00 	lds	r28, 0x0081
    clr     YH                  ;1 [5]
 554:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 556:	c8 57       	subi	r28, 0x78	; 120
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 558:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 55a:	84 9b       	sbis	0x10, 4	; 16
    rjmp    haveTwoBitsK    ;2 [10]
 55c:	02 c0       	rjmp	.+4      	; 0x562 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 55e:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 560:	eb cf       	rjmp	.-42     	; 0x538 <waitForK>

00000562 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 562:	2f 93       	push	r18
    push    x1              ;2 [12]
 564:	0f 93       	push	r16
    push    x2              ;2 [14]
 566:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 568:	00 b3       	in	r16, 0x10	; 16
    ldi     shift, 0xff     ;1 [18]
 56a:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 56c:	04 fb       	bst	r16, 4
    bld     shift, 0        ;1 [20]
 56e:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 570:	4f 93       	push	r20
    push    cnt             ;2 [24]
 572:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 574:	10 b3       	in	r17, 0x10	; 16
    ser     x3              ;1 [26] [inserted init instruction]
 576:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 578:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 57a:	04 fb       	bst	r16, 4
    bld     shift, 1        ;1 [29]
 57c:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 57e:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 580:	31 c0       	rjmp	.+98     	; 0x5e4 <rxbit2>

00000582 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 582:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 584:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 586:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x01 ;1 [18]
 588:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 58a:	28 c0       	rjmp	.+80     	; 0x5dc <didUnstuff0>

0000058c <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 58c:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 58e:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 590:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 592:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 594:	00 b3       	in	r16, 0x10	; 16
    rjmp    didUnstuff1 ;2 [27]
 596:	29 c0       	rjmp	.+82     	; 0x5ea <didUnstuff1>

00000598 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 598:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 59a:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 59c:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 59e:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 5a0:	10 b3       	in	r17, 0x10	; 16
    rjmp    didUnstuff2 ;2 [35]
 5a2:	2b c0       	rjmp	.+86     	; 0x5fa <didUnstuff2>

000005a4 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 5a4:	10 b3       	in	r17, 0x10	; 16
    andi    x3, ~0x08   ;1 [35]
 5a6:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 5a8:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 5aa:	2a c0       	rjmp	.+84     	; 0x600 <didUnstuff3>

000005ac <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 5ac:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 5ae:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x10 ;1 [42]
 5b0:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 5b2:	2c c0       	rjmp	.+88     	; 0x60c <didUnstuff4>

000005b4 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 5b4:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 5b6:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x20 ;1 [50]
 5b8:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 5ba:	2f c0       	rjmp	.+94     	; 0x61a <didUnstuff5>

000005bc <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 5bc:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 5be:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x40 ;1 [58]
 5c0:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 5c2:	32 c0       	rjmp	.+100    	; 0x628 <didUnstuff6>

000005c4 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 5c4:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 5c6:	00 b3       	in	r16, 0x10	; 16
    st      y+, x3      ;2 [3] store data
 5c8:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 5ca:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 5cc:	00 00       	nop
    eor     x2, x1      ;1 [6]
 5ce:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 5d0:	14 fb       	bst	r17, 4
    bld     shift, 0    ;1 [8]
 5d2:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 5d4:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;1 [10]
 5d6:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;1 [11] SE0 check for bit 1
 5d8:	c9 f1       	breq	.+114    	; 0x64c <se0>
    andi    shift, 0xf9 ;1 [12]
 5da:	29 7f       	andi	r18, 0xF9	; 249

000005dc <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 5dc:	91 f2       	breq	.-92     	; 0x582 <unstuff0>
    eor     x1, x2      ;1 [14]
 5de:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 5e0:	04 fb       	bst	r16, 4
    bld     shift, 1    ;1 [16]
 5e2:	21 f9       	bld	r18, 1

000005e4 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 5e4:	00 b3       	in	r16, 0x10	; 16
    andi    shift, 0xf3 ;1 [18]
 5e6:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 5e8:	89 f2       	breq	.-94     	; 0x58c <unstuff1>

000005ea <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 5ea:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 5ec:	58 f1       	brcs	.+86     	; 0x644 <overflow>
    eor     x2, x1      ;1 [22]
 5ee:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 5f0:	14 fb       	bst	r17, 4
    bld     shift, 2    ;1 [24]
 5f2:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 5f4:	10 b3       	in	r17, 0x10	; 16
    andi    shift, 0xe7 ;1 [26]
 5f6:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 5f8:	79 f2       	breq	.-98     	; 0x598 <unstuff2>

000005fa <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 5fa:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 5fc:	04 fb       	bst	r16, 4
    bld     shift, 3    ;1 [30]
 5fe:	23 f9       	bld	r18, 3

00000600 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 600:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 602:	81 f2       	breq	.-96     	; 0x5a4 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 604:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [34]
 606:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 608:	14 fb       	bst	r17, 4
    bld     shift, 4    ;1 [36]
 60a:	24 f9       	bld	r18, 4

0000060c <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 60c:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 60e:	71 f2       	breq	.-100    	; 0x5ac <unstuff4>
    nop2                ;2 [40]
 610:	00 c0       	rjmp	.+0      	; 0x612 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 612:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [42]
 614:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 616:	04 fb       	bst	r16, 4
    bld     shift, 5    ;1 [44]
 618:	25 f9       	bld	r18, 5

0000061a <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 61a:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 61c:	59 f2       	breq	.-106    	; 0x5b4 <unstuff5>
    nop2                ;2 [48]
 61e:	00 c0       	rjmp	.+0      	; 0x620 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 620:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [50]
 622:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 624:	14 fb       	bst	r17, 4
    bld     shift, 6    ;1 [52]
 626:	26 f9       	bld	r18, 6

00000628 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 628:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 62a:	40 f2       	brcs	.-112    	; 0x5bc <unstuff6>
    nop2                ;2 [56]
 62c:	00 c0       	rjmp	.+0      	; 0x62e <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 62e:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [58]
 630:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 632:	04 fb       	bst	r16, 4
    bld     shift, 7    ;1 [60]
 634:	27 f9       	bld	r18, 7

00000636 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 636:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 638:	28 f6       	brcc	.-118    	; 0x5c4 <rxLoop>

0000063a <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 63a:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 63c:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 63e:	10 b3       	in	r17, 0x10	; 16
    nop                 ;1 [66]
 640:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 642:	f9 cf       	rjmp	.-14     	; 0x636 <didUnstuff7>

00000644 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 644:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 646:	1a bf       	out	0x3a, r17	; 58

00000648 <ignorePacket>:
ignorePacket:
    clr     token
 648:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 64a:	19 c0       	rjmp	.+50     	; 0x67e <handleSetupOrOut>

0000064c <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 64c:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 64e:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 650:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 652:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 654:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 656:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 658:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 65a:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 65c:	f9 f0       	breq	.+62     	; 0x69c <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 65e:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 660:	e9 f0       	breq	.+58     	; 0x69c <handleData>
    lds     shift, usbDeviceAddr;[17]
 662:	20 91 7f 00 	lds	r18, 0x007F
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 666:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 668:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 66a:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 66c:	ed cf       	rjmp	.-38     	; 0x648 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 66e:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 670:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 672:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 674:	41 f1       	breq	.+80     	; 0x6c6 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 676:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 678:	11 f0       	breq	.+4      	; 0x67e <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 67a:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 67c:	29 f7       	brne	.-54     	; 0x648 <ignorePacket>

0000067e <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 67e:	00 93 86 00 	sts	0x0086, r16

00000682 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 682:	3f 91       	pop	r19
 684:	4f 91       	pop	r20
 686:	1f 91       	pop	r17
 688:	0f 91       	pop	r16
 68a:	2f 91       	pop	r18
 68c:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 68e:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 690:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 692:	4f cf       	rjmp	.-354    	; 0x532 <waitForJ>

00000694 <sofError>:
sofError:
    POP_RETI                    ;macro call
 694:	cf 91       	pop	r28
 696:	cf bf       	out	0x3f, r28	; 63
 698:	cf 91       	pop	r28
    reti
 69a:	18 95       	reti

0000069c <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 69c:	20 91 86 00 	lds	r18, 0x0086
    tst     shift               ;[20]
 6a0:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 6a2:	79 f3       	breq	.-34     	; 0x682 <doReturn>
    lds     x2, usbRxLen        ;[22]
 6a4:	10 91 84 00 	lds	r17, 0x0084
    tst     x2                  ;[24]
 6a8:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 6aa:	69 f5       	brne	.+90     	; 0x706 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 6ac:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 6ae:	6a f1       	brmi	.+90     	; 0x70a <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 6b0:	30 93 84 00 	sts	0x0084, r19
    sts     usbRxToken, shift   ;[30]
 6b4:	20 93 80 00 	sts	0x0080, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 6b8:	10 91 81 00 	lds	r17, 0x0081
    ldi     cnt, USB_BUFSIZE    ;[34]
 6bc:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 6be:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 6c0:	30 93 81 00 	sts	0x0081, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 6c4:	22 c0       	rjmp	.+68     	; 0x70a <sendAckAndReti>

000006c6 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 6c6:	00 91 84 00 	lds	r16, 0x0084
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 6ca:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 6cc:	e4 f4       	brge	.+56     	; 0x706 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 6ce:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 6d0:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 6d2:	49 f4       	brne	.+18     	; 0x6e6 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 6d4:	30 91 60 00 	lds	r19, 0x0060
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 6d8:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 6da:	19 c0       	rjmp	.+50     	; 0x70e <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 6dc:	00 93 60 00 	sts	0x0060, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 6e0:	c8 e6       	ldi	r28, 0x68	; 104
    ldi     YH, hi8(usbTxBuf)   ;[44]
 6e2:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 6e4:	18 c0       	rjmp	.+48     	; 0x716 <usbSendAndReti>

000006e6 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 6e6:	30 91 73 00 	lds	r19, 0x0073
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 6ea:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 6ec:	10 c0       	rjmp	.+32     	; 0x70e <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 6ee:	00 93 73 00 	sts	0x0073, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 6f2:	c4 e7       	ldi	r28, 0x74	; 116
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 6f4:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 6f6:	0f c0       	rjmp	.+30     	; 0x716 <usbSendAndReti>

000006f8 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 6f8:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 6fa:	a8 f4       	brcc	.+42     	; 0x726 <doExorN1>
    subi    x4, 1               ;[-3]
 6fc:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 6fe:	a9 f4       	brne	.+42     	; 0x72a <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 700:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 702:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 704:	f9 cf       	rjmp	.-14     	; 0x6f8 <stuffN1Delay>

00000706 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 706:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 708:	03 c0       	rjmp	.+6      	; 0x710 <usbSendX3>

0000070a <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 70a:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 70c:	01 c0       	rjmp	.+2      	; 0x710 <usbSendX3>

0000070e <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 70e:	43 2f       	mov	r20, r19

00000710 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 710:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 712:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 714:	32 e0       	ldi	r19, 0x02	; 2

00000716 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 716:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK         ;[-11]
 718:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 71a:	94 9a       	sbi	0x12, 4	; 18
    out     USBDDR, x2          ;[-8] <--- acquire bus
 71c:	11 bb       	out	0x11, r17	; 17
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 71e:	02 b3       	in	r16, 0x12	; 18
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 720:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 722:	14 e1       	ldi	r17, 0x14	; 20
    push    x4                  ;[-4]
 724:	5f 93       	push	r21

00000726 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 726:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 728:	56 e0       	ldi	r21, 0x06	; 6

0000072a <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 72a:	02 bb       	out	0x12, r16	; 18
    ror     shift               ;[01]
 72c:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 72e:	20 f4       	brcc	.+8      	; 0x738 <doExorN2>
    subi    x4, 1               ;[03]
 730:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 732:	21 f4       	brne	.+8      	; 0x73c <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 734:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 736:	f9 cf       	rjmp	.-14     	; 0x72a <commonN1>

00000738 <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 738:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 73a:	56 e0       	ldi	r21, 0x06	; 6

0000073c <commonN2>:
commonN2:
    nop                         ;[06] [14]
 73c:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 73e:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 740:	02 bb       	out	0x12, r16	; 18
    brcs    txBitloop           ;[09]      [25] [41]
 742:	d0 f2       	brcs	.-76     	; 0x6f8 <stuffN1Delay>

00000744 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 744:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 746:	28 f4       	brcc	.+10     	; 0x752 <doExor6>
    subi    x4, 1               ;[44]
 748:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 74a:	29 f4       	brne	.+10     	; 0x756 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 74c:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 74e:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 750:	f9 cf       	rjmp	.-14     	; 0x744 <stuff6Delay>

00000752 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 752:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 754:	56 e0       	ldi	r21, 0x06	; 6

00000756 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 756:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 758:	02 bb       	out	0x12, r16	; 18
    brcc    doExor7             ;[49]
 75a:	20 f4       	brcc	.+8      	; 0x764 <doExor7>
    subi    x4, 1               ;[50]
 75c:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 75e:	21 f4       	brne	.+8      	; 0x768 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 760:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 762:	f9 cf       	rjmp	.-14     	; 0x756 <common6>

00000764 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 764:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 766:	56 e0       	ldi	r21, 0x06	; 6

00000768 <common7>:
common7:
    ld      shift, y+           ;[53]
 768:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 76a:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 76c:	02 bb       	out	0x12, r16	; 18
    brne    txByteLoop          ;[57]
 76e:	21 f6       	brne	.-120    	; 0x6f8 <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 770:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[59]
 772:	10 91 85 00 	lds	r17, 0x0085
    lsl     x2                  ;[61] we compare with left shifted address
 776:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 778:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 77a:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 77c:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 77e:	11 f0       	breq	.+4      	; 0x784 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 780:	10 93 7f 00 	sts	0x007F, r17

00000784 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 784:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
 786:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
 788:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR          ;[06]
 78a:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK         ;[07] set both pins to input
 78c:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1              ;[08]
 78e:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 790:	4b 7e       	andi	r20, 0xEB	; 235
    pop     x4                  ;[10]
 792:	5f 91       	pop	r21
    nop2                        ;[12]
 794:	00 c0       	rjmp	.+0      	; 0x796 <skipAddrAssign+0x12>
    nop2                        ;[14]
 796:	00 c0       	rjmp	.+0      	; 0x798 <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 798:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2          ;[17] <-- release bus now
 79a:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 79c:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
 79e:	71 cf       	rjmp	.-286    	; 0x682 <doReturn>

000007a0 <_exit>:
 7a0:	f8 94       	cli

000007a2 <__stop_program>:
 7a2:	ff cf       	rjmp	.-2      	; 0x7a2 <__stop_program>
