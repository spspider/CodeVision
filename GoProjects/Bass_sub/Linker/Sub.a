;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0005 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0006 // Place your code here
; 0000 0007 
; 0000 0008 }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 000C {
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 000D // Place your code here
; 0000 000E 
; 0000 000F }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0013 {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0014 // Place your code here
; 0000 0015 
; 0000 0016 }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;#include <variables.c>
;unsigned int level;
;unsigned int to[10],i;
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 001F {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0020 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0021 // Delay needed for the stabilization of the ADC input voltage
; 0000 0022 delay_us(10);
;PCODE: $00000021 VOL: 0
; 0000 0023 // Start the AD conversion
; 0000 0024 ADCSRA|=0x40;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0025 // Wait for the AD conversion to complete
; 0000 0026 while ((ADCSRA & 0x10)==0);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0027 ADCSRA|=0x10;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0028 return ADCW;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0029 }
;PCODE: $00000034 VOL: 0
;
;
;// Declare your global variables here
;
;void main(void)
; 0000 002F {
;PCODE: $00000035 VOL: 0
; 0000 0030 // Declare your local variables here
; 0000 0031 
; 0000 0032 // Input/Output Ports initialization
; 0000 0033 // Port B initialization
; 0000 0034 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0035 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0036 PORTB=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0037 DDRB=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0038 
; 0000 0039 // Port C initialization
; 0000 003A // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 003B // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 003C PORTC=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 003D DDRC=0b0000010;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003E 
; 0000 003F // Port D initialization
; 0000 0040 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0041 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0042 PORTD=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0043 DDRD=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0044 
; 0000 0045 // Timer/Counter 0 initialization
; 0000 0046 // Clock source: System Clock
; 0000 0047 // Clock value: 8000,000 kHz
; 0000 0048 TCCR0=0x01;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0049 TCNT0=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004A 
; 0000 004B // Timer/Counter 1 initialization
; 0000 004C // Clock source: System Clock
; 0000 004D // Clock value: Timer 1 Stopped
; 0000 004E // Mode: Normal top=FFFFh
; 0000 004F // OC1A output: Discon.
; 0000 0050 // OC1B output: Discon.
; 0000 0051 // Noise Canceler: Off
; 0000 0052 // Input Capture on Falling Edge
; 0000 0053 // Timer 1 Overflow Interrupt: Off
; 0000 0054 // Input Capture Interrupt: Off
; 0000 0055 // Compare A Match Interrupt: Off
; 0000 0056 // Compare B Match Interrupt: Off
; 0000 0057 TCCR1A=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0058 TCCR1B=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0059 TCNT1H=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 005A TCNT1L=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 005B ICR1H=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 005C ICR1L=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 005D OCR1AH=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 005E OCR1AL=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005F OCR1BH=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0060 OCR1BL=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0061 
; 0000 0062 // Timer/Counter 2 initialization
; 0000 0063 // Clock source: System Clock
; 0000 0064 // Clock value: Timer 2 Stopped
; 0000 0065 // Mode: Normal top=FFh
; 0000 0066 // OC2 output: Disconnected
; 0000 0067 ASSR=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0068 TCCR2=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0069 TCNT2=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 006A OCR2=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 006B 
; 0000 006C // External Interrupt(s) initialization
; 0000 006D // INT0: On
; 0000 006E // INT0 Mode: Low level
; 0000 006F // INT1: On
; 0000 0070 // INT1 Mode: Low level
; 0000 0071 GICR|=0xC0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0072 MCUCR=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0073 GIFR=0xC0;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0074 
; 0000 0075 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0076 TIMSK=0x01;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0077 
; 0000 0078 // Analog Comparator initialization
; 0000 0079 // Analog Comparator: Off
; 0000 007A // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 007B ACSR=0x80;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 007C SFIOR=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 007D 
; 0000 007E // ADC initialization
; 0000 007F // ADC Clock frequency: 1000,000 kHz
; 0000 0080 // ADC Voltage Reference: AREF pin
; 0000 0081 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0082 ADCSRA=0x83;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0083 
; 0000 0084 // Global enable interrupts
; 0000 0085 #asm("sei")
;PCODE: $00000074 VOL: 0
	sei
;PCODE: $00000075 VOL: 0
; 0000 0086 
; 0000 0087 while (1)
;PCODE: $00000076 VOL: 0
; 0000 0088       {
; 0000 0089       #include <while.c>
;level=read_adc(0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;
;to[1]=level/1000;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;
;//to[1]=1;
;
;if(i==0){
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;    PORTC&=~0b0000010;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;
;}
;if(i==to[1]){
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;    PORTC|=0b0000010;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;}
;i++;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;
;if(i>10){
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;i=0;}
;PCODE: $00000096 VOL: 0
; 0000 008A       // Place your code here
; 0000 008B 
; 0000 008C       };
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 008D }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
